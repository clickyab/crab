// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x59\x6f\xdc\x36\x10\x7e\xd6\xfe\x0a\x42\xed\xa3\x61\x39\x89\xd1\xa2\x79\x4b\xdb\xa0\x08\x7a\xc4\xa8\xd3\xbe\x14\x81\xc0\x95\x66\x57\x4c\x28\x8e\x4a\x52\x4e\xb7\x86\xff\x7b\xa1\xfb\xa2\x8e\x3d\xec\x5d\x6f\xd5\xa7\xae\x34\xa4\xe6\xfc\x66\x38\x1c\xe7\x7e\x61\xd9\x4b\xaa\xe0\x86\xea\xc0\x7e\x4d\x6c\x87\x46\xcc\xbe\x58\x58\xb6\x87\x42\xc5\x21\x28\xfb\x35\xf9\x6b\x61\x59\x36\x8d\x22\xce\x3c\xaa\x19\x0a\xe7\x93\x42\x61\x2f\xac\x8f\x09\x9d\x0f\x2b\x26\x58\xf2\x38\x21\xbd\x4f\x49\x29\x75\x7f\x02\xe1\x83\xfc\xb0\x89\x20\x7f\x6a\xd9\x3a\xfb\x61\x2b\x2d\x99\x58\xdb\x0b\xcb\x7a\xb8\x48\xc8\x3d\x14\x5a\x22\xe7\x20\xdd\xb7\x52\xa2\xfc\x1d\x54\x84\x42\xc1\x2d\x0b\x23\x5e\x2d\x8f\x24\x46\x20\x35\x83\xe2\x3b\x96\x65\x43\x42\x5f\xfe\x34\xd2\x24\x4f\xa9\xa4\x61\xfd\x89\x65\x33\x0d\xcd\x27\x26\xf6\xd2\xff\x52\x1e\x9b\x14\x54\x4a\xba\x29\x08\xca\xf7\xb6\x86\x7f\x74\xe3\x23\xe6\x1d\x1f\x16\x8d\x75\x25\x15\x2e\x3f\x81\xa7\x33\xaa\x94\x26\xa3\x30\xbc\xef\xa8\xed\x37\x94\x21\xe5\x85\xde\x7a\x34\x36\xb2\x9d\x1f\x0a\xf7\x8d\xa7\xd9\x1d\xdc\x6a\xaa\x63\x35\x6a\xb6\x64\xc1\x8f\x18\x52\x26\x06\x4d\x44\xd3\x3d\x6b\x36\x32\x69\x25\x57\x86\xed\x49\xa0\x1a\x7c\x97\xd6\x14\x69\xaf\x12\xe9\x92\x07\xb6\x4f\x35\x7c\x60\x21\xd8\x6d\xdd\x99\xf6\xf2\x41\x79\x92\x45\x89\x67\x8e\x7a\xc8\x6d\xb6\x7e\x82\xf1\x4a\x6b\xff\x49\x39\xf3\x8d\x2b\x96\x88\x1c\xa8\xd8\xca\xde\x39\xcf\xf5\x1d\x4b\x42\x26\x34\xac\x41\x36\x29\x05\x0d\xa7\x2a\x35\x8e\xfc\xfd\x95\x3a\xc1\x21\x39\x66\xf0\xe0\xfe\x80\xb1\xd0\x72\x33\xe8\x16\x87\x95\x74\x1b\xee\x6e\x24\xde\x31\xe1\x0d\x03\x8b\x97\x89\xe0\x4e\x67\xf3\x78\x02\x65\xbc\xd6\xd8\x6f\xa1\x9b\xd1\xe7\x1b\xfc\xf6\x30\x5c\xf9\x6c\x93\xe5\x9e\xe0\x78\x68\x48\x69\x70\xf3\x96\x40\x25\x8c\xb6\xe4\x89\x72\x03\x6d\x27\x8f\xc9\x62\xa3\x72\x9d\x9c\x12\xb4\xa4\x42\xb9\xfa\xbb\xef\x69\x2f\x8e\xe7\x3a\x68\xe5\xb4\x4e\x46\xeb\x61\xaf\x1d\xe4\xb5\x5c\x56\x32\xdd\xc8\x63\x3b\xfb\x67\xac\x40\xba\x5e\x00\xde\xe7\x5f\x29\xe3\x37\x74\xc3\x91\xfa\xc3\xd9\x3c\xa4\x8c\x1f\xfc\xcb\x23\x69\x31\x8f\xf7\x58\x4a\x10\xda\xf5\x1b\x09\xad\x0f\xd4\xcb\x14\x93\x52\x0f\x5a\xc1\x98\x6f\xba\x59\x71\x5a\x01\x62\x4a\x8f\xc3\x60\x3e\x6d\x5f\x63\xaa\xec\xe7\xde\x98\x30\x07\xbe\x54\xff\x96\x29\x73\x0e\x24\xcf\x2a\x7f\x36\x77\x31\x66\xd1\xa6\x50\xad\x6f\xf4\x44\x77\x63\x49\x2b\xc2\x27\xe9\xce\x94\x5d\x77\xb7\x49\xa7\xcc\x30\xca\x39\x18\xc5\x53\x03\x64\x85\x72\x0d\xfa\xe9\x02\x32\x02\xa9\x50\xd0\x49\x48\x40\x7d\x5f\x82\x52\x53\xab\x46\xe0\x3c\x0a\x50\x4c\xae\x32\x99\xde\x26\xb3\xaf\x98\x54\xda\xdd\xa2\xe0\x5a\xa7\x67\x9f\x89\xc4\x9c\x6e\xb7\xf9\x24\x41\xa7\xda\x44\xc2\x9a\x29\x0d\x72\x8a\x4d\x3c\x0c\x23\x2a\x36\xdb\xf0\x3a\xc9\x7f\x76\xd5\xf2\xd6\x8a\xa3\x4a\x7d\x41\x69\x32\xbb\xb1\x6a\x4e\xf4\xa3\x6b\xe7\xd7\xfd\x75\x9d\xe5\xa1\x5f\x70\xcd\xc4\xfb\x9f\x47\x0e\x4d\x69\x39\x33\x7a\x6e\xf1\x50\x46\x28\x69\x1b\xb8\xfb\x70\xbb\x1b\x57\x43\xd4\x7d\x30\x3f\x80\xf3\x0d\xa0\x37\x23\xfd\x10\xd4\xd7\xb0\xbe\x99\x32\x7a\xd0\xbe\x91\x11\x0c\x28\x70\x4e\xd2\xb5\x31\x6b\x44\xb6\x77\x42\x7f\x73\xdd\xcb\x5c\x3b\x07\x1e\x59\x36\x73\x59\x33\x92\x43\xfb\x0d\x55\xdf\x1b\x3c\x14\x18\x32\xcf\xf5\xd0\x3f\x4f\xcf\x30\x01\xe7\x64\xf5\x18\x40\x74\xf2\xda\x1d\x97\x9d\x6f\x8c\x16\xd9\xf4\x7c\x7d\xad\xa7\xd8\x3d\x48\xa4\xa6\x49\xb2\x83\x70\xbd\x88\x55\x8a\x61\x68\xd0\x36\x45\xa8\x8a\xe9\x56\x3d\x32\xa1\xcb\xd7\xd3\xe2\x6b\x71\x53\xd1\x17\x45\xee\x9c\x8d\xe7\x6c\x5c\x63\x63\xce\xc6\xf9\x16\xfb\xe4\xaa\xf6\xb1\x6a\xf2\xc2\x7d\x92\xdc\xf9\xfa\xf0\x33\xc7\x72\xc3\xf9\x6c\xbf\x2b\xb7\xa2\xfb\x89\x9f\xc1\xd4\x00\xdc\xe2\xcc\xb7\x48\xdf\xd9\x01\xaa\x54\x8b\x2f\x5e\x7e\x7b\x79\x75\x79\x75\xf9\x22\xbd\x57\x65\x62\x85\xf9\xf6\xad\xbe\x9b\xfd\x21\x00\xe2\x49\xba\x24\x34\x62\x17\x84\xc6\x1a\xc9\x1a\x04\xc8\xc4\x4c\x76\xd6\x1e\x66\x3a\xbd\x11\xcd\x48\x39\xf3\x3e\x6f\xe8\xf2\xd2\xc3\xd0\x49\xd7\xbd\xb9\x79\x97\xd1\xdd\x81\x54\xf9\xa6\xaf\xae\xec\x9c\x9f\x88\xea\xa0\xbc\xa3\x75\x8a\x76\xbb\xe3\xb1\xc4\x93\x9d\xfb\xb2\xed\xee\x32\xff\xa1\x3c\x9d\xd6\x5a\x44\x1d\x7e\xed\xf2\x64\x2d\x69\x08\x1a\x64\x71\x59\x6c\x59\x56\x79\x44\x35\xaf\x49\x52\x6b\xfa\x3b\x61\xaa\x7a\x96\x07\xa9\x5d\xe7\xa5\x7a\x2b\xe1\xef\x98\x49\x48\xdc\x4a\xcb\x18\x3a\x3d\x32\x43\x23\xfe\x63\xce\x62\x71\xf8\xae\xb7\x94\x5e\x5e\x5d\xd5\xcf\xd2\xbd\x8c\x2a\x2f\x80\x90\x36\xdc\xec\x6b\x09\xab\x84\xe8\x2b\xa7\x76\xfd\xed\x18\x6e\x30\x7a\x1c\xf0\xfa\xd0\x9f\x1e\xb9\x43\xef\x65\xe3\xfa\x98\x6c\x34\xe3\x8e\xae\x6b\xee\x53\xde\x06\x65\x6b\x3e\x2e\x72\xfa\xac\x9f\x52\x73\xde\xce\xdd\xd7\x14\x87\x7d\x5a\x6f\xa8\x78\x3c\xbc\xfc\xa5\xa7\x39\xf7\xd5\x05\xd8\xb1\xa3\xb7\x76\x15\x37\xc7\xee\x1c\xbb\x2d\xdf\x8d\x23\x8e\xd4\x77\xee\x43\xf4\x63\x0e\x95\xaf\x46\x59\xba\x34\x3b\xeb\x1f\xe9\x22\xc2\x84\x46\xa2\x03\x20\x6a\xa3\x34\x84\x8f\xe7\xc2\x19\x73\xbb\xba\xef\xc5\x30\x0b\xa9\x00\xe0\xc5\x92\xe9\x0d\x49\xeb\x8d\x0b\xb2\x06\x4d\x98\x26\x2b\x89\x21\xe1\xb8\x66\x82\x48\x8c\x35\xb4\xb9\x0d\x80\x26\x35\x70\x87\xdf\xac\x6a\x79\xac\x68\xbb\xbe\x7a\x31\xe0\x6b\x1b\x8c\x09\x95\x40\x04\xea\xa4\x68\x09\x50\xb2\x7f\xc1\x1f\xf4\xc0\xbe\x13\x71\x6b\x9e\x6b\x88\xd6\x38\xd7\x95\x69\xaa\x33\xdb\xd5\x2f\xbb\xd5\x30\x58\x8b\xb2\x31\xe7\xd5\xa1\xeb\xcc\x7b\x8d\x7c\x65\xeb\x5a\x7d\xd1\xa1\xae\xea\x3f\x81\xda\x35\xe8\xba\xb7\x6c\xee\x80\xc7\xab\x01\x83\xae\x50\x2e\x99\xef\x27\x6e\x99\xd8\x36\xa0\x77\x89\x71\x09\xf5\x3c\x50\x8a\x04\x20\x61\x36\xee\x63\x1a\xb7\xd4\xff\x64\xbb\x0e\xa1\x71\x85\xeb\xaa\x07\x90\x15\x48\x87\xe3\x1a\x63\x3d\xa9\x70\xf0\x38\x2a\xb8\x05\x95\x9c\x30\x48\xfa\x43\x91\x7c\x7e\x82\xa8\xec\xf1\x2e\xc0\xfc\xec\x50\xf1\xe0\x35\x48\xff\x44\x67\x6f\x18\xcf\xb8\xdc\xa1\x9b\x71\x79\x36\xee\xe3\x18\xf7\xb0\xb8\x9c\xc0\xee\x28\x20\x3b\x29\xbe\xa2\x0e\xaa\xc6\xe7\x38\x36\xbf\xe1\xfc\x7d\xb2\xa2\x85\xd1\x94\x73\x82\x2b\xe2\x71\x06\x42\xab\x02\xaa\x15\x59\xc6\xba\xc4\x6f\x14\x30\x63\xf7\x8c\xdd\xff\xcb\xf0\x9e\xb1\xfb\x8c\x8d\xfb\xa4\xd8\x1d\x52\xc6\x9d\x74\x00\x79\x5a\x77\xa3\x9c\x55\x26\xe9\xff\x91\x64\x3d\x61\xe2\x80\x5d\x8e\x25\xfa\x1b\x43\x9b\x3d\x1b\xfb\x73\x7d\xaa\xa9\x11\x6a\x57\x94\x2b\xd8\x1e\x0c\xcd\xa3\xdf\x26\xfd\x3e\x29\x46\xf7\xcc\x85\x1f\xce\xee\xc5\x88\xa1\xd3\x9e\xad\x1d\x32\x7e\x46\x7b\x53\x4c\x27\x3e\x4f\x63\xe7\x02\x1f\xdd\xc4\x3b\xa4\xe1\xa3\x76\x73\xf7\x71\xb6\xd6\xa8\x89\x1d\xc5\xfd\x4e\xf6\xd6\x67\xfa\x26\x5f\x90\xd5\x61\x64\x85\x92\x80\xcf\x34\x29\x36\x22\x91\xc4\x15\xe3\x67\x51\x00\x8e\x74\x60\x4f\x20\x62\xda\xe3\xf0\x47\x0f\x1d\xe3\x90\xf2\x69\x46\xcd\x5c\x43\x9f\x6a\x99\x35\xd7\xd0\x67\x6c\xdc\x27\xad\xa1\xa3\xda\x20\xd5\x60\xcb\x23\x6b\x94\x10\xa6\xd2\x8c\x96\x24\xa2\xfc\x49\x9a\x78\xf6\xbb\x2c\x3c\xb5\xb4\x76\xea\x59\x61\x86\xe3\x0e\xdd\x0c\xc7\xb3\x71\x1f\xc7\xb8\x4f\x0a\xc7\xc5\xdf\x36\x4c\x3b\xd3\x3e\xd3\x53\x6c\xfb\xcf\x21\x4d\xea\x3b\x61\xf4\x7d\x56\x27\xd9\x62\x28\x55\xa2\x1f\x7b\xe3\xff\xcc\x50\xca\x75\x45\x16\x68\x1d\x95\xaf\xbe\xd0\xf5\x3a\xf5\x4c\xfb\xe5\xe5\x95\xbd\x78\xf8\x2f\x00\x00\xff\xff\x6c\x8c\x55\x22\xd4\x48\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

