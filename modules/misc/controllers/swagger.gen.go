// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x8f\xdb\xb6\x12\x7e\x96\x7f\x05\xc1\x73\x1e\x17\x6b\xe7\x82\x73\x70\xf2\x96\x83\x06\x45\xd0\x4b\x16\xdd\xb4\x2f\x45\x60\x8c\xa5\xb1\xc5\x84\x22\x55\x92\x4a\xea\x06\xfb\xdf\x0b\x52\x17\xeb\x42\x5d\xec\xbd\x64\xd7\x55\x5e\xb2\xa2\x86\xd4\x70\x66\xbe\x6f\xc8\x21\xfd\x75\x11\xd0\x0d\x68\xbc\x02\x13\xd3\x57\x84\x2e\x21\x65\xf4\x62\x11\xd0\x50\x0a\x9d\x25\xa8\xe9\x2b\xf2\xfb\x22\x08\x28\xa4\x29\x67\x21\x18\x26\xc5\xf2\xa3\x96\x82\x2e\x82\x0f\x56\x2e\xc2\x2d\x13\xcc\x36\x5b\xd1\xaf\x4e\x14\x60\xfd\x3d\x8a\x08\xd5\xfb\x7d\x8a\x45\x6b\x40\x4d\xfe\x40\xb5\x51\x4c\xec\xe8\x22\x08\x6e\x2e\xac\x78\x28\x85\x51\x92\x73\x54\xeb\x37\x4a\x49\xf5\x0b\xea\x54\x0a\x8d\xd7\x2c\x49\xf9\xa1\x7b\xaa\x64\x8a\xca\x30\x2c\xbf\x13\x04\x14\xad\x7c\xf5\xe8\x95\xb1\xad\xa0\x20\xa9\xb7\x04\x94\x19\x6c\xb6\xf8\xd4\x73\xff\x9c\x8e\x4d\x09\x50\x0a\xf6\xa5\x40\xf5\x9e\x1a\xfc\xd3\x34\x3e\xe2\x1f\xf1\x66\xd1\xe8\x57\x49\xc9\xcd\x47\x0c\x4d\x2e\xe5\x64\x72\x09\xcf\xfb\x8e\xd9\x7e\x96\x2a\x01\x5e\xda\xad\xc7\x62\x23\xc3\x45\x89\x58\xbf\x0e\x0d\xfb\x8c\xd7\x06\x4c\xa6\x47\xdd\x66\x3b\x7c\x27\x13\x60\x62\xd0\x45\xe0\xc6\xac\xf9\xc8\x67\x95\xc2\x18\x34\x54\x08\x06\xa3\x35\xd4\x0c\x49\xb7\x76\x76\xb6\x81\x46\x60\xf0\x3d\x4b\x90\xb6\x6d\xe7\x1b\x2b\x42\x1d\x2a\x96\xda\xc8\x1c\x8d\x90\xeb\xbc\xff\x04\xe7\x55\xde\xfe\x0d\x38\x8b\xbc\x3d\x36\x52\x72\x04\x71\x94\xbf\x0b\x9d\xeb\x23\x56\x82\x4c\x18\xdc\xa1\x6a\x4a\x0a\x48\xa6\x1a\x35\x4b\xa3\xdb\x1b\x75\x42\x40\x1a\x05\x42\xaf\xcd\xff\xfe\x0f\xbd\x31\xb8\xf0\xe2\xb1\x83\x46\xbf\xf1\x3b\x16\xac\xe1\xb0\x9c\x6b\x13\x83\x27\x4f\x25\xd3\xa8\xd6\x61\x8c\xe1\xa7\x9f\x80\xf1\x2b\xd8\x73\x09\xd1\x30\x13\x25\xc0\xf8\x9d\x7f\x79\x04\xd2\x05\x68\x32\xa5\x50\x98\x75\xd4\x00\x63\x5f\x40\x56\xf0\x70\xd2\x83\x5e\xf0\x62\xa5\x8b\xe8\x69\xe4\xe9\x83\xf6\x70\x20\x4e\x1b\xd7\x0b\xf3\x7e\xed\xbd\x60\x1f\xf8\x52\xfd\x5b\x3e\xd4\x0f\x00\xff\x80\xfd\xe6\x28\x5e\x06\x68\x4e\xaa\xf5\x0d\x3f\x15\x34\xbb\x34\x09\x61\x9a\xed\x7c\xcc\x70\xba\x4f\xba\x09\xd1\x37\xcf\x41\x14\x4f\x05\xc8\x56\xaa\x1d\x9a\x87\x03\x64\x8a\x4a\x4b\x01\x93\x98\x00\xa2\x48\xa1\xd6\x53\x33\x1e\x72\x9e\xc6\x52\x4c\xce\x90\xcc\xec\xd7\xd3\xd3\xc4\x96\x29\x6d\xd6\x47\x24\x8b\x9d\x5b\xb7\x4d\x14\xe6\x70\xdc\xe0\x93\x26\x3a\xd5\x27\x0a\x77\x4c\x1b\x54\x53\x7c\x12\xca\x24\x05\xb1\x3f\x46\xd7\x49\xf1\x73\xaa\x95\x8f\x36\x1c\x68\xfd\x45\x2a\x9f\xdb\xbd\x19\xdf\xda\xc7\xd4\xd6\xde\xb7\xb7\x75\x9e\x87\x7e\x94\x3b\x26\xde\xfd\x30\xb2\xe0\x0b\x65\x26\xcc\xe8\x9a\x2b\x94\x2a\x95\x0a\xda\xc4\xdd\xc7\xdb\x5d\x5c\x0d\x49\xf7\xd1\xfc\x00\xcf\x37\x88\xde\xcf\xf4\x43\x54\x5f\xe3\xfa\x66\xca\xe8\x61\xfb\x46\x46\xf0\xb0\xc0\x39\xcd\xae\xcd\x59\x23\x73\x7b\x2b\xcc\x7f\x5e\xf6\x2a\xd7\xce\x81\xdf\x78\x6e\xfe\x65\xcd\x48\x0e\xed\x77\x54\x7d\x6c\x0c\xa5\x90\x09\x0b\xd7\xa1\x8c\xce\x33\x32\x7c\xc4\x39\xd9\x3c\x1e\x12\x9d\xdc\xf7\xc4\x6e\xe7\x8b\xd1\x32\x9b\x9e\x6f\xac\xf5\x2c\x76\xef\x04\xa9\x2e\x49\x76\x18\xae\x97\xb1\xaa\x69\x78\x8a\x4b\xcd\x29\x1c\x16\xd3\xad\xf5\xc8\x84\x0a\x45\x4f\x79\xa2\xa5\xcd\x41\xbe\x5c\xe4\xce\xd9\x78\xce\xc6\x35\x35\xe6\x6c\x5c\x0c\x71\x9b\x5c\xd5\xde\x56\x4d\xee\x78\x9b\x24\x77\xbe\x31\xfc\xc4\xb9\xdc\xb3\x3f\xbb\xdd\x71\x41\x59\xfd\x94\x9f\xd0\x57\x00\x3c\x62\xcf\xb7\x70\xef\x68\x2c\xb5\xb3\xe2\xb3\xe7\xff\xbd\x5c\x5d\xae\x2e\x9f\xb9\x33\x21\x26\xb6\xb2\x18\xbe\x55\x77\xa3\xef\x63\x24\xa1\x82\x0d\x81\x94\x5d\x10\xc8\x8c\x24\x3b\x14\xa8\xac\x9b\x68\x5e\x1e\x66\xc6\x9d\xe6\xe4\xa2\x9c\x85\x9f\xf6\xb0\xb9\x0c\x65\xb2\x74\xfd\x5e\x5f\xbd\xcd\xe5\x3e\xa3\xd2\xc5\xa0\x2f\x56\xb4\xd0\x27\x05\x13\x57\xe7\x4b\xcb\x2c\xb5\x3b\xfe\xe5\xd7\x44\x46\x19\xc7\x9b\xc3\x76\x34\xd7\xba\xd8\x88\xb6\x34\xfc\xd5\x75\x22\x4c\x18\x49\x4c\x8c\x44\xef\xb5\xc1\x84\x56\x3b\x6c\x05\x09\x1a\x54\xe5\x81\x57\x10\x04\xd5\x56\xb5\x35\x12\x3d\xa4\x58\xf7\x6c\x95\x3b\xb4\x15\x60\xa5\xb9\x72\x87\x76\x85\x7f\x64\x4c\xa1\x0d\x2c\xa3\x32\xec\x54\xc9\xbc\xb5\xee\x3e\x15\xdc\x04\x30\xcc\x14\x33\x7b\xe2\xdc\x7e\x41\x76\x68\x08\x33\x64\xab\x64\x42\xb8\xdd\xa8\x13\x25\x33\x83\x6d\x6d\x63\x04\x4b\x45\x1d\x7d\xf3\xe0\x39\x51\x5d\xf7\xdf\x87\xc2\x96\x65\xb5\xa0\x5e\x03\x7b\xb9\x7a\x56\xdf\xfc\xb7\xa6\xb3\x97\x19\x01\x85\x44\x48\x63\x63\x27\x96\x8a\xfd\x55\xc4\x8d\x13\xd7\x61\x8c\x09\x4c\x5a\x98\xb4\x8e\x04\x87\x64\xbd\x47\x83\xb9\xa5\x3a\xc7\x83\x03\x08\x6d\xa1\xbf\x21\xd9\x38\x2a\xec\xc8\x75\x8e\x0c\x47\xbe\x72\x34\x65\xfa\xb8\xa9\x84\xa1\x90\x66\xed\xb1\x75\x2f\x7b\xb5\x78\xe8\xe5\xea\xc5\x80\x43\xb7\x52\x6d\x58\x14\xd9\xb0\xb4\xbe\x8d\xe1\xb3\x75\x2e\x81\x30\x44\xad\x49\x8c\x0a\x67\xe7\xde\xa7\x73\x2b\xfb\x4f\xf6\x6b\x33\x91\xc0\xae\xc6\x83\xb5\xa3\x66\x9d\x77\xfb\xb0\x28\xba\xe4\x35\xc2\xa5\x4d\x68\x4b\x2e\x77\x32\x3b\x14\xe5\x6b\x05\xfa\x4e\x78\x84\x5c\x6a\xbc\x46\x6d\x89\x9e\xb8\x07\x4d\x8a\x63\x2c\xa2\xf3\xe6\x53\x88\xf9\xc9\xb1\xe2\xf3\xd5\x6a\x00\x44\x83\x10\xf9\xb7\xc2\xad\x15\xfa\xd7\xb2\x76\x03\x63\xd9\x7f\x29\xa0\x17\xc6\x33\x2f\x77\xe4\x66\x5e\x9e\x9d\x7b\x3f\xce\xbd\x5b\x5e\xb6\xb4\x3b\x4a\xc8\x4b\xc7\xaf\xd2\xc4\x87\xfd\xe7\x38\x37\xbf\xe6\xfc\x9d\xed\xd1\xe2\x68\xe0\x9c\xc8\xad\x5d\xbd\xa3\x30\xba\xa4\x6a\x4d\x36\x99\xa9\xf8\xdb\xee\x39\x67\xee\x9e\xb9\xfb\x9f\x08\xef\x99\xbb\xcf\xd8\xb9\x0f\xca\xdd\x09\x30\xbe\x74\xf7\xc0\xa6\x55\x37\xaa\x2b\x63\xc4\xfd\x45\x6c\x7f\xc2\xc4\x1d\x56\x39\x36\x32\xda\x77\x39\x36\xcd\x6f\x5f\xac\x23\x30\xe0\xa5\xda\x2d\x70\x8d\xc7\x93\xa1\xff\x06\x9e\xcf\xbe\x0f\xca\xd1\x3d\xd7\xf3\xee\xce\xef\xe5\x4d\x8f\x65\xfb\x8a\xd3\x90\xf3\x73\xd9\xab\xf2\x92\xc8\xd3\x74\x76\x31\xe1\x6f\xee\xe2\x13\xd2\xf0\xfd\x69\xe0\xbb\x10\x7f\x87\xc1\xd6\x3a\xf1\xa3\x69\xd6\x1f\x64\x6f\x22\x66\xae\x8a\x0e\xf9\x3a\x8c\x6c\xa5\x22\x18\x31\x43\xca\x81\x48\xaa\xe4\x96\xf1\xb3\x58\x00\x8e\x54\x60\x1f\x01\x62\xda\xb7\x12\xbf\x39\x74\xbc\x77\xc5\x1e\x27\x6a\xe6\x35\xf4\x63\x5d\x66\xcd\x6b\xe8\x33\x76\xee\x83\xae\xa1\xd3\xda\x79\xf6\x60\xc9\x23\x2f\x94\x10\xa6\x5d\x46\xb3\x89\xa8\x68\x71\x89\xe7\x76\x87\x85\x8f\x2d\xad\x3d\xf6\xac\x30\xd3\x71\x47\x6e\xa6\xe3\xd9\xb9\xf7\xe3\xdc\x07\xa5\xe3\xf2\x8a\xe9\xb4\x3d\xed\x13\xdd\xc5\xb6\x7f\x95\xe2\x33\xdf\x23\x66\xdf\x27\xb5\x93\x2d\xef\x06\x29\x19\x65\xe1\xf8\x2f\xd5\x9d\xd6\x07\xb1\xd8\x98\xb4\x7a\xf5\x05\x76\x3b\x17\x99\xf4\xf9\xe5\x8a\x2e\x6e\xfe\x0e\x00\x00\xff\xff\x2a\x1f\x73\x06\x17\x3f\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

