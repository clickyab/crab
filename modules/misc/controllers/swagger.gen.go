// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\xaf\xdb\xb6\x15\x7f\xb6\xff\x0a\x42\xdb\xc3\x06\x5c\xd8\xb7\x69\xb6\x61\x05\x02\x2c\xcd\x8a\x21\xd8\xba\x5c\xf4\xa6\x7b\x69\x03\x83\x96\x8e\x6d\x26\x14\xa9\x91\x54\x52\xef\x22\xff\xfb\x20\x4a\x96\xf5\x41\x52\xb2\xaf\xfc\x21\x83\x7d\xea\x95\x0f\xa9\xf3\xf9\x3b\xe7\x50\x24\xf3\x34\x9d\x04\x4b\x2c\xe1\x01\xab\x4d\xf0\x1d\x0a\xe6\x38\x21\xc1\xdd\x74\x12\x84\x9c\xc9\x34\x06\x19\x7c\x87\x7e\x99\x4e\x26\x01\x4e\x12\x4a\x42\xac\x08\x67\xf3\x8f\x92\xb3\x60\x3a\xf9\x90\xd1\x45\xb0\x22\x8c\x64\x8f\x33\xd2\x27\x4d\x8a\xf1\xe2\x1f\xc0\x22\x10\xef\xb7\x09\x14\x4f\x27\x81\xca\xff\x08\xa4\x12\x84\xad\x83\xe9\x64\xf2\xf5\x6e\x47\xfe\xb3\x04\xf1\x86\x8b\x84\x0b\xfd\x86\x72\x4c\x22\x78\x02\x42\x11\xd8\x4d\x9e\xd1\x47\x91\x00\xb9\x7f\x60\xa4\x9a\x4c\x82\xc7\xfc\x3d\xfb\x27\x26\x16\xb2\xff\x34\x1b\xfa\xf7\xff\x60\x4a\x22\xe3\x88\x25\xe7\x14\x30\x2b\x87\x4c\x6b\x23\x4b\x32\xbe\xfc\x08\xa1\xca\xa9\x8a\x1f\x83\x10\x28\x4d\x36\x9c\xc1\x78\x38\x26\x6a\xbb\xa8\x4e\x6b\xe1\xf7\x2d\x53\x7f\x7e\x69\x7c\x39\x61\x0a\xd6\x20\xce\xc5\xaf\x00\xac\x20\x5a\x60\x55\x61\x79\xc5\x45\xac\x1f\x04\x11\x56\xf0\x9e\xc4\x10\x34\xe7\xaa\x2a\x75\x37\x17\x84\x9c\xf1\x98\x84\x8b\x90\x47\xe3\xb1\xd8\x8a\x08\xa9\x16\x0c\xc7\xe3\x61\x99\xe2\xb1\x71\x3c\x2a\x66\xc7\x85\x38\x02\xd6\x44\x2a\x10\xe3\x8a\xba\x34\x89\x06\xc3\x9d\x54\x82\xa8\x63\xae\x11\x4b\x35\x7b\xf9\x18\x03\x6b\x45\x42\x95\x52\x2d\xde\x60\x05\x6b\x2e\xb6\xce\x54\x1a\x81\x0c\x05\x49\xaa\x29\xb7\x83\xcd\x1e\x1c\x9a\xa3\xc5\x35\xa9\x54\x58\xa5\xd2\x40\x5c\xb3\x4d\x6f\xd1\xdf\x3e\x3e\x38\xa5\x1e\x32\x5d\x5c\x52\x1f\x43\x7a\x61\x5f\xdd\xbe\x7b\xf4\xaa\x1d\x5e\xb5\x21\x67\x4a\x70\x4a\x41\x2c\x7e\x10\x82\x8b\x9f\x40\x26\x9c\x49\x78\x24\x71\x42\xc1\xa9\x71\xc8\xe8\x3b\x11\x33\xc1\x02\xc7\xb2\x86\x7f\x44\x41\xfd\x89\x0d\x44\xf7\x28\xba\xa7\xc0\x42\xe0\x6d\x1b\x65\x15\xfc\xa6\xfa\xc0\x72\x1f\x8c\x3d\x4c\x6d\xff\xce\x8c\x42\x77\x7a\xb3\x68\xac\xf7\x74\x72\x11\x62\xd5\x9a\xac\xae\x31\xa3\xa6\xcd\x88\x6a\xd1\x43\x29\x7f\x2d\x33\x59\x6a\xe8\x92\xb8\xee\xec\x5d\x53\x37\xfd\xdd\x96\xf7\xbe\xd6\xfc\xde\x60\x90\x86\xee\x4a\x07\x68\xab\x8e\xc8\xe4\x28\xd5\x99\xb0\xc3\x15\x6d\x63\xd0\xea\x6e\x80\x09\x48\x8e\x91\x6d\x38\x2b\xc5\x98\xa5\x2b\x1c\xaa\x54\x80\x90\x07\xd9\x09\x87\x8a\x7c\x36\x2a\xcb\x22\xfc\x52\x60\x66\xb4\x85\x59\xb9\x17\xf5\x83\xeb\x33\x14\x97\x3e\x9a\xae\xd2\x48\x51\xcc\x16\xaf\x75\x2c\x3c\xd6\x04\xb0\x2e\x74\x65\x03\xfe\xce\x63\x4c\x3a\xd6\xb7\x1a\xf1\xe5\xac\x67\x86\x2c\xb8\xcc\xdd\xc0\x75\xb7\x60\x27\x29\x12\xcf\x55\xf6\x51\x9e\x2f\xa8\x2e\xde\x10\xe5\x6e\xd4\x4e\x22\x66\x22\xf8\x67\xc2\x42\x18\xa8\xed\xdc\x4b\xc3\x53\xa6\x3a\x3a\xcf\x61\x05\x3a\x84\xbb\x87\x42\x6a\x77\x1f\x93\x8b\xd0\x47\x33\x27\x71\xc4\x43\x04\x0a\x49\x95\xf7\x5e\xc9\xe1\x84\x60\x6e\x74\x2a\xeb\x3b\x9e\x87\xc0\x7b\x15\x68\x73\x5d\x81\x16\x06\x92\x67\xa7\xc4\xc3\xe4\x31\x39\x6d\xa7\x5c\x57\xa7\x04\x2e\xe2\xc5\x8f\x95\xe2\xf4\xb8\x5c\x69\x6c\xe7\x1b\x85\xe8\xd9\x12\x6b\x7f\x6c\x38\x57\xe6\xc9\x94\xbc\xc4\xd6\x46\xf9\x18\xe5\xde\xb6\xc2\x94\xc0\x4c\x2e\xd4\x5f\xbf\xef\x52\x5a\x73\xa5\xa5\xb5\xce\xd2\x81\x9f\x86\x15\x96\x32\x94\x6a\xab\x2b\x47\x8b\xa2\x57\x9a\x43\x4c\xe9\xf7\x38\xfc\xe4\x94\x85\xc1\x97\x45\x82\xa5\xfc\xc2\x45\xdf\xb0\x51\xfc\x13\x74\xae\x25\xf7\x66\x72\x83\xd9\x1a\x1e\x1a\x1c\x98\x13\x76\x2a\x04\x30\x75\x28\xbb\x87\x48\xd8\x9f\x6b\x08\x3f\xfd\x88\x09\x7d\xc0\x5b\xca\xb1\x9b\x6f\x88\x31\xa1\x83\xbf\xb9\x63\x1d\xac\xae\xb2\xa8\xd6\x92\x74\x85\x79\x4e\xed\x74\x70\x63\xc7\x60\x58\x37\xe8\xb5\xe2\x68\xec\x63\xdd\xdd\x5e\xaf\x79\xcd\x0b\x75\x56\xee\x8d\x2d\x8f\xe3\x4d\xd5\x77\x99\x7a\x1f\x47\xfb\xb3\xef\x80\xea\xb3\x18\xfb\xa0\xba\x50\x8d\x77\x58\xd2\x79\x6d\x48\x23\xa5\xf7\xd2\x9d\xb1\xff\x3e\xda\x26\xd3\xc6\xfc\x66\x39\x9d\x00\xd9\x3b\x40\x8e\xde\x62\xe2\x2c\x15\x0c\x1b\x3c\x9c\xf4\xad\xed\x15\xce\x14\x67\xdb\x91\xe0\x7a\x85\x71\x3f\x80\x6b\x80\xe9\x6b\xbc\x13\x38\x0f\x68\x33\x0f\x50\x8d\xed\x3b\xf0\xb3\x60\x71\xc5\xc5\x1a\xd4\xf9\x60\x98\xf2\x35\x61\x83\x81\xff\x4e\x8b\x03\x67\xa9\x04\x84\xe4\x0c\xf7\x4a\x52\x57\x15\x0e\x07\xbb\xf6\x5a\x6f\x45\x3b\x51\x1c\xf4\x12\xb4\xaf\x4d\x76\xde\xdf\xc7\x26\x21\x8f\x13\xcc\xb6\x87\xf0\x7a\x88\xbb\x9d\x1c\x40\x62\xbe\x24\xb4\xb7\x96\x0f\xab\xea\xb4\x32\x0b\x82\x81\x0c\x93\xd7\x53\xff\xca\x22\xfb\xdd\x3f\x3b\xba\x26\xdd\x87\x77\xae\xa0\x1a\x72\x91\x9d\xda\x14\x84\x2e\x6a\x5b\xb9\xe2\xa8\x57\x6a\x05\x8b\xb9\x62\x71\x95\x2c\x95\x9a\xa5\x5e\xfa\x58\xaa\x96\x5a\x65\x63\x80\x8c\x5b\x92\xae\x09\x70\x1d\xb2\xb5\xb6\x55\x4e\x5c\xb5\xdc\x85\x65\x33\x97\xe7\x1d\xb5\xa0\xdd\x50\xd5\xb9\x2d\x85\x4f\x87\xf6\xc6\xe4\x19\x26\x94\xbd\x21\xf1\x0c\x39\xe1\x86\xa4\xbb\x59\xc1\x6e\x17\x89\x2d\xed\xc5\x0d\x49\x68\x69\xcd\x07\xc1\xe3\xd6\x16\xd5\x89\x33\x2f\x95\x62\x54\x56\x0e\xcc\x22\xec\x5b\xff\x46\x89\x6a\x65\x6c\x3f\xc2\xf2\x49\xd9\x7a\x00\x61\xd7\xf7\xf8\x9a\xcb\xd7\x5c\x15\x36\x7c\xcd\x55\x4c\x61\xab\x48\xfa\x0c\x6e\x76\xda\xbd\x07\xda\x0a\x85\x3e\x63\x6f\xd7\x87\x47\x8e\xe5\x86\x2e\xdc\x8e\xe7\xd3\xda\x60\xe3\xdc\x03\x7e\x62\x9a\xea\xdf\x82\x0d\x97\x5a\x8b\xdf\xbc\xf8\xcb\xec\x7e\x76\x3f\xfb\x46\x9f\x7c\x24\x6c\xc5\x8b\xe9\x1b\x5f\x09\x82\xf7\x1b\x40\xa1\xc0\x4b\x84\x13\x72\x87\x70\xaa\x38\x5a\x03\x03\x91\x99\x29\xc8\xbf\x13\x12\xa5\x57\x35\x72\x52\x4a\xc2\x4f\x5b\xbc\x9c\x85\x3c\x9e\xeb\x71\xaf\x1f\xde\xe6\x74\x9f\x41\xc8\x62\xd2\x3f\x7d\x1b\x14\xfc\x24\x58\x6d\xca\x53\x94\x73\x2c\x25\xa8\x79\xd8\x3c\xc7\x51\x59\xca\x6c\xf1\xb7\x23\x46\x02\x54\x2a\x18\xa2\x44\x2a\x44\xf0\x12\x15\x3f\x64\x01\x51\x2e\xa9\x08\x1c\x83\xca\x37\x7f\xfe\x92\xab\xb2\x5c\x9b\x68\x4c\xab\x36\x80\x24\x84\xa9\x20\x6a\x8b\xb4\xfa\xef\xd0\x1a\x14\x22\x0a\xad\x04\x8f\x91\x5e\xf0\x44\x82\xa7\xaa\xb2\xe5\x4e\x7f\x52\x0a\x36\x80\x33\x48\x28\x9f\x16\x41\x5e\x18\xb1\x7c\x2c\xe0\xbf\x29\x11\x90\xf9\xa3\x12\x29\xb4\x3e\x05\x18\x36\x18\x7c\x28\x97\x8c\xf3\xb5\x99\xea\xf2\xe4\x8b\xfb\xfb\xea\x52\x4b\x43\x9c\xfd\x6b\x65\xb8\x81\x18\xd7\xfc\xf3\xf7\x02\x56\x19\xd1\xef\xe6\x95\x93\xad\x73\xdb\xd6\x70\x8b\xfb\xbe\xbc\xff\xc6\xf1\xfe\x2d\x4f\x11\x16\x80\x18\x57\x99\x0f\x6d\xb8\x20\xff\x2b\xfc\xc7\xc6\x95\xad\x40\x69\xec\xfe\x77\xd1\x1a\x4f\x01\xe4\x96\x6a\x9d\x04\x70\x44\x6a\x03\x05\x6a\x94\xb5\x53\x01\x2d\xba\xd6\xe9\x80\x8e\xb7\x1c\x0c\x9d\x26\x8c\xda\x85\x23\xe3\x6a\x61\xd0\xb5\x15\xc5\x5a\x06\xfd\xd6\x61\xd0\x15\x17\x4b\x12\x45\x59\x58\x64\xb6\xdd\xe0\xcf\x99\x71\x11\x0e\x43\x90\x12\x6d\x40\x80\x37\xee\x29\x8d\x5b\xea\xbf\xb7\x5d\xeb\x09\x05\xaf\x2b\x20\x58\xdd\x7c\x9d\x0f\xfb\x30\x2d\x86\xe4\x2b\xc2\x05\x30\x13\x99\xf4\xc2\x64\x22\x93\x1a\x1c\x63\x4a\x11\x91\xe8\x0f\x30\x5b\xcf\x10\x11\x98\x65\x85\xf8\x1d\x9a\xcd\x66\x7f\xf4\xd8\xfc\x5c\x6c\xae\x9e\x3d\xf1\xd8\x3c\x92\xf0\xf5\xd8\x7c\xc3\xc6\xbd\x08\x36\x9b\x0f\x37\xb9\x50\xba\xba\xe3\x54\xb6\xf0\x3a\xff\x58\x89\x6a\xd3\x16\x08\xfe\x3a\x49\x28\xdc\xa1\x47\x1c\xcb\x94\xad\x3d\x84\x3f\x1b\xc2\xeb\xb6\xf3\x20\x3e\x92\x38\xf7\x20\x7e\xc3\xc6\xbd\x08\x88\xf3\x7e\xc8\xcd\xdb\x70\x5d\x96\xd7\x94\xb0\xf4\x37\x5f\x5b\x0f\x03\xcc\x95\x83\xa8\x1e\x95\x47\x12\xb8\x1e\x95\x6f\xd8\xb8\x67\x46\xe5\xdd\xe9\xb4\x79\x7e\xe0\x70\xfe\x54\x9e\x52\x5b\x90\xe8\x6b\x2f\xac\x3e\x06\x84\x9b\xc8\x9a\x60\xb5\x69\xe3\x6a\x95\x97\xf1\xc0\x6b\xf3\x0c\xa7\x35\x0c\x4f\x06\xeb\xc6\xfb\x66\xac\x6c\xbc\xbc\x24\x1b\x2e\xe7\xdd\x29\xb2\xcb\x73\x5b\xe7\x44\xfb\x78\xeb\x99\x5d\xa1\xe4\x71\x78\xf9\xcb\x28\x99\x3f\xed\x0f\x8b\x5e\x3a\x74\x2b\xc7\x56\xc7\x17\xb8\xfb\x93\xba\x3e\x76\x4f\x12\xbb\x69\x42\x39\x8e\xe6\x4f\x31\x8f\x52\x0a\x7b\x5f\x4d\xf2\x6f\xb7\x66\x67\xfd\x59\x0f\x42\x84\x29\x8e\x74\x11\xbf\x95\x0a\xe2\xd3\xb9\x70\xce\xdc\xb1\xee\x7b\xe7\x66\x61\x74\x5d\x88\x6f\x03\x0c\x74\xbe\x0d\xf0\xc6\x3d\x8d\x71\xcf\xdc\x06\xa4\x12\xc4\xdc\x78\x90\x32\xb5\x03\x32\x44\x44\x55\xee\xf7\x46\x44\xa2\x54\x42\x84\x56\x5c\xa0\xe2\x1c\x72\xf6\x40\xa0\x7c\xcf\xd3\x2d\x2c\xd6\x74\xa0\x7a\x93\x87\x25\x8f\xb6\x86\xb6\x26\x3f\x09\xb6\x88\xb0\xc2\x46\x46\x56\x98\x4a\x38\x3c\x7b\xb7\x4e\xc3\x9a\x3c\xe4\xac\x15\x95\xe9\x16\x78\x2b\x1c\xf9\xfc\xd2\xa2\xbb\xdd\xfc\x72\xd1\xe2\x34\x0b\x14\x07\x0e\x6a\x50\xe9\x57\x93\xe6\xf8\xa3\x41\x8e\xb0\x01\x2b\xd2\x0b\x00\x47\xed\x80\xf3\xc5\x91\xc3\x78\x42\xd3\xea\x69\x57\xd2\x8d\x8d\xd8\xe1\xf9\x3e\xcf\xbb\x37\xa3\x52\x2e\xe1\x11\xa4\xcc\x12\xbe\xfe\x43\x96\xb9\x5e\xe6\x8f\x6f\x21\xcf\x9f\xdf\xe1\xed\xd7\x1e\xfb\x84\xe9\x13\xa6\x6f\xc8\x2e\x6d\xdc\x61\x1b\xb2\x5e\x80\x3c\xd7\xf8\xca\xd5\xa6\x72\x5f\x5e\x27\x36\xbf\xa6\xf4\x5d\x36\xa2\x81\xd1\x98\x52\xc4\x57\x28\xa4\x04\x98\x92\x3b\xa8\x96\x68\x99\xaa\x12\xbf\x39\xbb\x89\x1e\xcd\x63\xb7\x0f\x6f\x8f\xdd\xde\xb8\x17\xc2\xee\x18\x13\x3a\xd7\x97\xf6\xf5\x6b\x21\xcb\xfb\xfd\x90\xfe\x3f\x94\x8d\x1f\x7d\x33\xd9\xba\x2e\xd1\xa4\xdf\xf3\x37\x94\xed\xbb\x14\x87\xb3\xfb\xee\x3a\xa3\x79\x88\x29\x5d\xd6\x6e\xe1\x74\xac\xa1\xe6\xd7\x98\xbd\x29\x2e\xee\x44\x44\xea\x4f\x5b\xa9\xa0\x28\xe4\x31\x61\xeb\x3c\x85\xca\x2c\x3d\xeb\x63\xf4\xe8\x57\xf5\xab\xfa\xdb\x4f\x59\x32\x45\x4f\xfa\x8f\x8c\xf6\x15\x6a\xbf\x5e\xff\x18\x83\xda\xf0\x08\xbd\x42\x49\xaa\x50\x61\x71\xf4\x0a\xed\x2e\x0a\xd5\x34\x2f\xee\xef\xb3\x47\x65\x0e\x9b\xd5\x73\x98\xa6\x79\xd9\xa4\x31\x34\xa4\xe8\xeb\x58\x9d\x75\x77\x6d\xea\xc5\x9d\xf4\x88\x42\xe2\xa2\x4b\x1f\x83\x84\x8b\xbe\x0f\xb6\x57\xb0\x34\xae\x8e\xbd\x81\x5a\x75\x04\xdf\x13\xea\x3a\xf7\x21\x72\xf4\xea\xa0\x2f\xf9\x5b\x74\xbe\xe4\xf7\xc6\x3d\x8d\x71\xcf\x5a\xf2\x97\xb9\xac\x79\x29\xad\xab\xee\xcf\x69\x9f\x93\xcc\xae\x20\x3b\x14\x02\xfb\xac\x70\xc6\xc2\xa9\x71\xd7\x95\xb3\x62\xfa\x21\x22\xea\xa1\x18\x90\x97\x35\x7a\x77\x06\x44\x44\xa1\xdd\x44\x28\x11\x7c\x45\xe8\x4d\xac\xfd\x5d\x7f\x3d\xd5\xbc\xa2\xf9\xe2\xa1\x33\xca\x2f\xad\xbe\x96\x6a\xd1\xf9\x5a\xca\x1b\xf7\x34\xc6\x3d\x6f\x2d\x55\xb9\xc9\xcd\xf9\xb5\x2b\xff\x46\x86\x88\xd4\x19\x2d\x4b\x44\xc5\x13\x9d\x78\x9e\xb7\x41\xfc\xda\xd2\xda\xb5\x67\x05\x0f\xc7\x2d\x3a\x0f\xc7\xde\xb8\xa7\x31\xee\x59\xe1\x78\x77\xb9\x72\xbf\x9e\x76\xa4\x5d\x6c\xf3\x9f\xe8\x30\xa9\xef\x8a\xd1\x77\x54\x9d\xec\xee\x56\x4c\xc1\xa3\x34\xff\xb7\x30\x33\xea\x00\x27\x09\x25\xc5\x81\xc6\x8f\x52\x6f\x13\xcf\x34\x9e\x73\xbd\x27\xdb\x28\x95\x94\x3f\x7d\xc1\xeb\xb5\xf6\xcc\xe0\xc5\xec\x3e\x98\x7e\xfd\x7f\x00\x00\x00\xff\xff\xbe\xc8\xaf\xab\xf7\x8c\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

