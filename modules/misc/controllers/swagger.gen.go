// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x8f\xdb\xb8\x11\x7f\x96\xff\x0a\x42\xed\xe3\x62\xed\xa4\x8b\x16\x3d\x20\x40\x73\xe9\xa1\x38\xf4\xe3\x16\x97\x5c\x5f\x7a\x81\x41\x4b\x63\x9b\x09\x45\xaa\x24\x95\xd4\x5d\xec\xff\x7e\x10\xf5\x2d\x91\x94\xbc\x91\x3f\x64\x28\x4f\xb1\x34\xa4\x86\x9c\xe1\x6f\x7e\x33\x24\x93\xa7\x85\xe7\x6f\xb0\x84\x47\xac\xf6\xfe\x77\xc8\x5f\xe2\x98\xf8\x77\x0b\xcf\x0f\x38\x93\x49\x04\xd2\xff\x0e\xfd\x67\xe1\x79\x3e\x8e\x63\x4a\x02\xac\x08\x67\xcb\x4f\x92\x33\x7f\xe1\x7d\x4c\xe5\x42\xd8\x12\x46\xd2\xc7\xa9\xe8\x93\x16\xc5\x78\xfd\x37\x60\x21\x88\x0f\x87\x18\xf2\xa7\x9e\xaf\xb2\x1f\xbe\x54\x82\xb0\x9d\xbf\xf0\xbc\xe7\xbb\x42\xfc\x17\x09\xe2\x1d\x17\x31\x17\xfa\x0b\x65\x9b\x58\xf0\x18\x84\x22\x50\x74\x9e\xca\x87\xa1\x00\x59\x3d\x30\x4a\x79\x9e\xff\x3e\xfb\x4e\xf5\xc4\xa4\x42\xfa\x47\xab\xa1\xdf\xff\x1b\x53\x12\x1a\x5b\x6c\x38\xa7\x80\x59\xd9\x64\xd1\x68\x59\x8a\xf1\xcd\x27\x08\x54\x26\x95\xbf\xf4\x03\xa0\x34\xde\x73\x06\xd3\xd1\x98\xa8\xc3\xba\xde\xad\x45\xdf\x1f\x99\xfa\xe3\x83\xf1\xe3\x84\x29\xd8\x81\x38\x97\xbe\x02\xb0\x82\x70\x8d\x55\x4d\xe5\x2d\x17\x91\x7e\xe0\x87\x58\xc1\x07\x12\x81\xdf\xee\xab\x3e\xa9\x45\x5f\x10\x70\xc6\x23\x12\xac\x03\x1e\x4e\xc7\x62\x5b\x22\xa4\x5a\x33\x1c\x4d\x47\x65\x8a\xa7\xa6\xf1\xa4\x94\x9d\x16\xe2\x08\xd8\x11\xa9\x40\x4c\x6b\xd5\x25\x71\x38\x1a\xee\x24\x12\x44\x13\x73\x8d\x58\xaa\xd5\xcb\xda\x18\x54\xcb\x02\x6a\xc0\x99\x12\x9c\x52\x10\xeb\x1f\x84\xe0\xe2\x67\x90\x31\x67\x12\xde\x93\x28\xa6\xe0\x8c\xad\x90\xca\xf7\xce\x7f\x8c\x05\x8e\x64\x63\x36\x89\x82\xe6\x13\x9b\x49\x2a\x9b\x54\x12\x58\x08\x7c\xe8\xda\x4c\xc1\xff\xd4\x10\x23\x0f\xb1\xd8\x71\xd3\xf6\xaf\xd4\x86\xb4\x98\x37\xcb\x8c\xf5\x74\x17\x46\x6c\xfd\x36\x50\xe4\x0b\xbc\x57\x58\x25\xb2\x97\x07\xa5\x0d\xfe\xca\x23\x4c\x7a\xe8\x8f\xee\xd3\xe0\x27\x26\xaf\x1a\x33\x32\x86\x20\x03\x41\xe2\x3a\x3f\xbb\xfa\x15\x3a\x60\x41\x99\xc1\xdd\xb9\x54\xc7\x58\xf6\x03\x1c\x92\xf2\x8c\x6f\xaf\xdf\x11\x75\x70\xfa\xc4\x49\x86\x19\x0b\xfe\x85\xb0\x00\x46\x42\xa5\x6a\x34\x3c\x61\x4a\x9c\x73\x40\xc7\x68\xf7\x98\x8f\xda\xa9\x5e\x90\x0d\x61\xc8\xcc\x9c\xc4\x11\x8f\x19\x50\x40\xea\xba\xb7\x80\xda\xb8\x7c\x1b\xca\xda\x38\x7d\xb9\xfc\x9a\xfa\x5a\xd6\x79\x29\x6d\x74\x2a\xeb\x37\x1a\x13\x63\x58\xe7\xad\x39\x28\xe3\x48\x7b\x0a\xb4\xb9\xae\x60\x16\x46\x1a\x4f\x31\x89\xc7\x8d\xc7\xe4\xb4\xbd\xe3\xba\xba\x49\x50\x02\x33\xb9\x56\x7f\xfe\x1e\x5b\x03\x73\x3e\x07\x2d\x92\xd2\xa1\x28\x3d\x9e\x6a\x20\x27\xa5\xd2\x0d\x62\xf2\xe2\x25\xaa\x29\x5f\x80\x29\xfd\x1e\x07\x9f\x9d\x63\x61\xf0\x75\x1d\x63\x29\xbf\x72\x61\xc2\x11\x13\x7a\x2b\xfe\x19\xd8\x68\x4a\xee\x21\xf8\xfc\x4f\x4c\xe8\x23\x3e\x50\x8e\x43\x37\x87\x8c\x30\xa1\xa3\x7f\xb9\x87\x8c\xe5\xb8\x9c\x08\x01\x4c\xad\xc3\x06\x8d\xb2\x51\x89\x92\xd8\x68\x69\xa7\xab\x18\x59\x4e\x97\x8b\x0d\xa3\xbd\x26\x52\xe6\xa6\x10\xc3\xfa\x35\x12\x34\xbb\xf6\x46\x9a\xe6\xf8\x52\xfd\x5b\x26\xbe\xe6\xa0\x6c\x15\x6b\x6b\xf6\x62\xe4\x6e\xcd\x41\xb5\xbe\x61\xab\x30\xd5\x9b\xb4\x60\x68\xd0\xdc\x99\x38\xdd\xcb\x6d\xb2\x68\xf5\x6f\x1e\xa7\x13\x6a\x06\x2f\x90\x17\x57\x4d\x9d\x79\x83\xa1\x66\xe9\x94\xef\x54\x0c\x9d\x1c\xc7\x56\x64\x73\x7d\xc2\x58\xe2\x72\x35\x30\x15\x98\x5c\xf2\xc7\x50\xe3\x23\xa6\xc6\x56\xda\xf8\x26\x58\xdc\x72\xb1\x03\x75\x3e\x18\xa6\x7c\x47\xd8\x68\xe0\x5f\xcc\xe2\xc0\x88\x36\x54\xc9\x18\x84\xe4\x0c\x0f\x0a\x52\x57\xb5\x1c\x8e\x76\xed\x9d\xde\x5d\x39\xd1\x3a\x18\x34\xd0\xa1\x36\x29\xbc\x7f\x88\x4d\x02\x1e\xc5\x98\x1d\x8e\xd1\xf5\x18\x77\x3b\x39\x80\x44\x7c\x43\xe8\xe0\x59\x3e\x8e\xce\xe9\xc9\x54\xb5\xed\xb4\x6f\x37\x4c\xc6\xa7\xfe\x91\xae\xec\x9f\xfe\xde\x53\x72\xd2\xb9\x43\x6f\xd5\xc7\x10\x8b\xec\xd2\xa6\x45\xe8\x92\xb6\xd1\x15\x07\x5f\x69\x10\x16\x33\x63\x71\x51\x96\x1a\x67\x69\x52\x1f\x0b\x6b\x69\x30\x1b\x03\x64\xdc\xd2\xe8\xda\x00\xd7\x33\xb6\xce\x4e\xa1\xe7\xe2\x72\x17\x1e\x9b\x99\x9e\xf7\x70\x41\xbb\xa1\xea\x7d\x5b\x88\x4f\xcf\xec\x4d\xc9\x33\x4c\x28\x7b\x43\xc3\x33\xc4\x84\x1b\x1a\xdd\xcd\x0e\xec\x76\x91\xd8\x92\x5e\xdc\xd0\x08\x2d\xa9\xf9\x28\x78\xdc\xd9\x75\xf5\x9c\x71\xa9\x1c\x86\x61\x13\xb3\x39\x84\x2a\xf5\x6f\x51\xd4\x01\x3b\x61\x96\x6d\x30\xeb\x99\x9a\x22\xef\x99\x39\xd7\xcc\xb9\x6a\x6a\xcc\x9c\x2b\xef\xc2\xc6\x48\x86\x34\x6e\x67\xda\x83\x1b\xda\x88\xc2\x90\xb6\xb7\xeb\xc3\x13\xc7\x72\x43\x16\x6e\xc7\xf3\x45\xa3\xb1\xb1\xef\x11\x37\x6b\x16\xfa\x9d\xbf\xe7\x52\xcf\xe2\xab\xd7\x7f\xba\x5f\xdd\xaf\xee\x5f\xe9\xc3\xbc\x84\x6d\x79\xde\x7d\x6b\x97\xc0\xff\xb0\x07\x14\x08\xbc\x41\x38\x26\x77\x08\x27\x8a\xa3\x1d\x30\x10\xa9\x99\xfc\x6c\xc7\x8d\x28\x5d\xd5\xc8\x44\x29\x09\x3e\x1f\xf0\xe6\x3e\xe0\xd1\x52\xb7\x7b\xfb\xf8\x63\x26\xf7\x05\x84\xcc\x3b\x7d\x78\xf0\x73\x7d\x62\xac\xf6\xe5\xc1\xe0\x65\xb1\x83\xb9\xcc\x36\xa5\x97\x4f\xe5\x4e\xe6\x9a\x84\xcf\x65\x0d\xa2\x56\xda\xec\xe8\xeb\x97\xf5\x13\x81\x23\x50\x20\x8a\x13\xca\x9e\xe7\x95\x85\x08\x73\x9b\x34\xb4\xea\xdf\xa9\x52\xd5\xb3\x7c\x91\xfa\x75\x5d\xaa\xb7\x02\xfe\x9b\x10\x01\xa9\x5b\x29\x91\x40\xa7\xa2\x6f\xd8\xdb\xfc\x58\x56\x7e\xb3\x12\x4b\xbd\xca\xf8\x7a\xb5\xaa\x57\x4c\xac\x8a\xca\x60\x0f\x11\x6e\xb8\xd9\xef\x05\x6c\x53\xa1\xdf\x2d\x6b\x67\xae\x97\xed\x7d\x7e\x8b\xf7\x3d\x8c\xfd\xdd\x9e\x43\x66\x56\x35\x1e\x2e\xa9\x46\x73\xd1\xe1\x5d\xcd\x77\xca\xdd\xf5\xac\xcd\xc7\x45\x2e\x9f\x95\xcc\x6a\x9e\xdb\x39\x4b\x30\xc4\x5b\xcf\xec\x0a\xa5\x8e\xe3\x8f\xbf\x5c\x25\xcb\xa7\xea\x40\xc1\xa5\x97\x6e\xed\x68\xc3\xf4\x16\x6e\x75\x9a\x63\x5e\xbb\x27\x59\xbb\x49\x4c\x39\x0e\x97\x4f\x11\x0f\x13\x0a\x95\xaf\xc6\x59\xac\x34\x3b\xeb\x2f\xba\x11\x22\x4c\x71\xa4\xf6\x80\xe4\x41\x2a\x88\x4e\xe7\xc2\x99\x72\x2f\x75\xdf\x3b\xb7\x0a\x7a\x00\x10\x24\x82\xa8\x03\xd2\x64\xe3\x0e\xed\x40\x21\xa2\xd0\x56\xf0\x08\xe9\xed\x3d\x24\x78\xa2\xa0\xad\xed\x1e\x70\x4a\x80\x3b\xfa\x66\x94\xe5\x54\xab\xed\x61\xf5\xca\xe1\x6b\x07\x9e\x20\x2c\x00\x31\xae\x52\xc6\xb2\xe7\x82\xfc\x1f\x42\xa7\x07\xda\xd2\xe1\xd6\x81\x67\x97\xac\xf1\xe0\x73\x36\x53\x9d\xc3\xcf\xf6\xb1\x7b\x0d\x83\xb5\x24\x1b\x07\xa1\x3b\x72\x9d\x03\xd1\x3d\x5f\x39\x9a\xa8\x2f\x3a\xd2\x15\xf9\x63\x5c\xad\x0d\x73\x6d\xe5\xcc\x1d\xf0\xf8\x83\xc3\xa0\x5b\x2e\x36\x24\x0c\x53\xb7\x4c\x6d\xbb\xc7\x5f\x52\xe3\x22\x1c\x04\x20\x25\xda\x83\x80\xd9\xb8\xa7\x34\x6e\x39\xff\x83\xed\xea\x42\xe3\x0a\xd7\xa5\x05\x90\x25\x88\xa5\xf1\xe0\x4a\x62\x07\x64\x08\x89\xaa\x5d\x11\x44\x44\xa2\x44\x42\x88\xb6\x5c\xa0\xfc\xdc\x57\xfa\x40\xa0\x2c\xc7\x7c\x09\x52\x5f\x1b\x4c\xf6\xa0\x7a\x5b\x87\x0d\x0f\x0f\x86\xb4\x26\xdb\x79\x5f\x87\x58\x61\xa3\x22\x5b\x4c\x25\x1c\x1f\xbd\x3b\xa7\x8f\x4c\x1e\x72\x56\x46\x65\xba\x48\x6a\x85\xa3\x39\xbe\x74\xe4\x6e\x37\xbe\x5c\x94\x9c\xa6\x0b\xc5\x81\x83\x1a\x54\x86\x71\xd2\x0c\x7f\x34\xc8\x11\x36\x22\x23\xbd\x00\x70\x34\x0e\x94\x5d\x1c\x39\x8c\x27\x62\xac\x9e\x76\x25\xd9\xd8\x84\x1d\x9e\x57\x71\xde\x59\x31\x08\x28\x97\xf0\x1e\xa4\x4c\x03\xbe\xfe\x21\xcb\x58\x2f\xb3\xc7\xb7\x10\xe7\xcf\xef\xf0\xf6\xbb\x8e\x73\xc0\x9c\x03\xe6\x9c\x90\x5d\xda\xb8\xe3\x26\x64\x83\x00\x79\xa9\xf1\x95\xab\x7d\xb5\xdd\xd9\x8f\xcd\x6f\x29\xfd\x29\x6d\xd1\xc2\x68\x4c\x29\xe2\x5b\x14\x50\x02\x4c\xc9\x02\xaa\x25\xda\x24\xaa\xc4\x6f\xce\x6e\x22\x47\x9b\xb1\x7b\x5e\xde\x33\x76\xcf\xc6\xbd\x10\x76\x47\x98\xd0\xa5\xbe\x24\x39\x2c\x85\x2c\xef\x53\x22\xfd\x37\x94\xb6\x9f\x7c\x32\xd9\xb9\x9e\x6a\x9a\xdf\xf3\x27\x94\xdd\xbb\xab\xe3\xd9\xbd\xb8\x3e\xb2\x0c\x30\xa5\x9b\xc6\xfd\x61\x47\x0d\x35\xbb\x36\xf6\x2e\xbf\x72\x8c\x88\xd4\x5b\x5b\x89\xa0\x28\xe0\x11\x61\xbb\x2c\x84\xca\x34\x3c\xeb\x63\x8b\xe8\x57\xf5\xab\xfa\xcb\xcf\x69\x30\x45\x4f\xfa\x47\x2a\xfb\x06\x75\x3f\xaf\x5f\x46\xa0\xf6\x3c\x44\x6f\x50\x9c\x28\x94\x5b\x1c\xbd\x41\xc5\x15\x67\x2d\xf3\x7a\xb5\x4a\x1f\x95\x31\xec\xbe\x19\xc3\xb4\xcc\x43\x5b\xc6\x90\x90\xa2\xe7\xa9\x3a\x6b\x71\xe1\xfb\xe2\x4e\xfa\x02\x22\x71\xd1\xd2\xc7\x18\xcb\xa5\x7d\x71\xd2\x85\x95\x99\xec\x63\x71\x51\x6b\x9a\xee\x96\x0f\x78\x76\xb6\x33\x3a\x5b\xeb\x3c\xb6\x13\x92\x7f\x08\x89\x7a\xcc\x1b\x64\x69\x8b\xde\xd1\x82\x90\x28\x54\x74\x84\x62\xc1\xb7\x84\xde\x44\xbe\x74\xfd\x7b\x5a\xed\x6b\xc4\x17\x5f\x3a\x93\xac\x4e\xcf\x29\x67\x47\x6e\x4e\x39\x67\xe3\x9e\xc6\xb8\x67\x4d\x39\xe3\xda\x6d\x03\x67\x85\x30\xab\x2b\xa6\x59\x46\x1a\xd1\xd2\x40\x94\x3f\xd1\x81\xe7\xdb\x0e\xd5\x5d\x5b\x58\xbb\xf6\xa8\x30\xc3\x71\x47\x6e\x86\xe3\xd9\xb8\xa7\x31\xee\x59\xe1\xb8\xb8\x00\x3c\x2c\xa7\x9d\x68\x16\xdb\xfe\x67\x64\x4c\xd3\x77\xc5\xe8\x3b\xa9\x4c\xb6\xb8\xb9\x25\x78\x98\x04\xfd\xff\x01\x84\xd6\xba\x12\xdb\x2b\x15\x97\xaf\xbe\xe2\xdd\x4e\x7b\xa6\xff\xfa\x7e\xe5\x2f\x9e\x7f\x0b\x00\x00\xff\xff\x6a\x33\x49\xe1\x6e\x62\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

