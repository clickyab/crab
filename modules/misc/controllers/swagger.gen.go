// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x8f\xd4\x36\x10\x7f\xce\xfe\x15\x96\xdb\xc7\xd3\xed\x71\xa5\xad\xca\x1b\x55\x51\x85\xda\xaa\xa7\x82\xfa\x52\xa1\x68\xd6\x99\x4d\x0c\x89\x9d\x8e\x1d\xe8\x16\xf1\xbf\x57\x71\x3e\x36\x1f\x4e\x36\xbb\x0b\xe5\x38\x2d\x2f\xb0\xce\xd8\x9e\xcf\xdf\x8c\x67\x78\xbf\x0a\xf8\x06\x0c\xde\x81\x4d\xf8\x13\xc6\xd7\x90\x4b\x7e\xb5\x0a\xb8\xd0\xca\x14\x19\x1a\xfe\x84\xfd\xb5\x0a\x02\x0e\x79\x9e\x4a\x01\x56\x6a\xb5\x7e\x6d\xb4\xe2\xab\xe0\x55\x49\x17\xe1\x56\x2a\x59\x2e\x97\xa4\xef\x1d\x29\x40\xf8\x33\xaa\x08\xe9\xe5\x2e\xc7\x7a\x35\xe0\xb6\xfa\xc1\x8d\x25\xa9\x62\xbe\x0a\x82\x0f\x57\x25\xb9\xd0\xca\x92\x4e\x53\xa4\xf0\x19\x91\xa6\x3f\xd0\xe4\x5a\x19\x7c\x21\xb3\x3c\xdd\x6f\xcf\x49\xe7\x48\x56\x62\x73\x4f\x10\x70\x2c\xe9\xdb\x9f\x5e\x9a\x72\x15\x08\xb2\xee\x4a\xc0\xa5\xc5\xfe\x8a\x8f\x3d\xf7\xc7\xf1\xd8\xa7\x00\x22\xd8\x35\x04\xed\x77\x6e\xf1\x1f\xdb\xbb\xc4\x7f\xe2\x87\x55\x6f\x5f\x4b\xa5\x37\xaf\x51\xd8\x8a\xca\xd1\x54\x14\x9e\xef\x95\xda\xa2\x4c\x85\x4f\x85\x95\x6f\xf1\x85\x05\x5b\x98\x83\x7a\x2e\x37\xfc\xa4\x33\x90\x6a\x56\xa7\xe0\xce\xec\x28\xd5\x27\x46\xcd\x3d\x17\x84\x60\x31\x0a\xa1\x23\x39\xdf\x6a\xca\xdc\x02\x8f\xc0\xe2\x4b\x99\x21\x1f\x0a\xeb\x3b\x2b\x42\x23\x48\xe6\xa5\x2b\x1d\x34\xe9\x8b\x6a\xff\x02\x6d\xb7\xe6\xf9\x13\x52\x19\x79\x77\x6c\xb4\x4e\x11\xd4\x51\x06\xaa\x79\xee\x9e\xd8\x12\x4a\x65\x31\x46\xea\x53\x2a\xc8\x96\x2a\xb5\xc8\xa3\xf3\x95\xba\xc0\x83\x2c\x81\x32\xa1\xfd\xe1\x47\x30\xf3\x61\x36\x0c\xa0\x51\xf8\xf8\x95\x3f\xd2\x60\x27\x70\x1a\x59\xfb\x41\x73\xb2\x28\x85\x41\x0a\x45\x82\xe2\xcd\x6f\x20\xd3\x3b\xd8\xa5\x1a\xa2\x79\xe8\xc8\x40\xa6\x1f\xfd\xe6\x06\xbb\x66\xaf\x16\x05\x11\x2a\x1b\x46\xbd\x60\x9c\x72\xc8\x36\x3c\x1c\xf5\xac\x15\xbc\xb1\x32\x8e\xe8\x65\x68\xe7\x0b\xed\x79\x47\x5c\x76\xae\x37\xcc\xa7\xb9\xf7\x06\xfb\xcc\x4d\xdd\xbb\x7c\x51\x3f\x13\xf8\xfb\xd8\xef\x9f\xe2\x45\x80\xbe\x50\x83\x3b\xfc\x50\xd0\xdf\xd2\x07\x84\x65\xba\xf3\x21\xc3\xe9\x36\x19\x67\x30\x9f\x9c\xb3\x51\xbc\x34\x40\x72\x24\xa3\x15\x2c\x8a\x4c\x88\x22\x42\x63\x96\x66\x20\x4c\xd3\x3c\xd1\x6a\x71\xc6\x92\x76\x17\x2e\x87\xed\xad\x24\x63\xc3\x23\xc0\x3b\x76\x85\xcf\x42\xe2\x14\x8e\x3b\x7c\x91\xa0\x4b\x6d\x42\x18\x4b\x63\x91\x96\xd8\x44\xe8\x2c\x07\xb5\x3b\x86\xd7\x45\x00\x7b\xaa\x96\x8f\x56\x1c\x18\xf3\x4e\x93\xcf\xec\xde\x0c\x5c\xea\xc7\x76\x8a\xd7\xf3\x75\x5d\xe5\x85\x5f\x75\x2c\xd5\xef\xbf\x1c\x28\xc0\x84\x2e\x94\x3d\x58\x03\x09\x4d\xb9\x26\x18\x02\xe9\x14\x8e\x8e\xe3\x6a\x8e\x7a\x0a\x76\x67\x70\xb7\x07\xbc\x7e\xe4\x9d\x83\xde\x0e\xf6\xf6\x21\x7c\x02\x7d\x7b\x08\xed\x41\x81\x87\x24\xdd\x10\xb3\x0e\xc8\xf6\x5c\xd9\xef\x1e\x4f\x32\x37\xcc\x49\x9f\x59\x36\x7f\x99\x71\x20\xa7\x4d\x1b\xaa\x7b\x36\x0a\xad\x74\x26\x45\x28\x74\xf4\x30\x3d\xc3\x07\x9c\x8b\xd5\xe3\x01\xd1\xc5\x7b\x4f\xdc\xf6\x70\x63\xb4\xc9\xa6\x0f\xd7\xd7\x26\x8a\xcf\x8f\x12\xa9\x2e\x49\x8e\x10\x6e\x12\xb1\x5a\x31\x3c\xdd\x99\xbe\x08\xfb\xe2\x76\x50\x8f\x2c\xe8\x18\x4c\xb4\x0b\x06\xdc\xec\xe9\x9b\x22\xf7\x92\x8d\x2f\xd9\xb8\xc3\xc6\x25\x1b\xd7\x47\x9c\x93\xab\x86\xcf\xaa\xc5\x1b\xcf\x49\x72\x0f\xd7\x87\xbf\x70\x2c\xf7\xbc\xcf\xce\xeb\xb7\x37\xdd\x48\xfd\x06\x7d\x0d\xb9\x23\xde\x7c\x2b\xf7\x8d\x27\xda\x38\x2d\x3e\xba\xfd\xfe\xfa\xe6\xfa\xe6\xfa\x91\x1b\xaa\x48\xb5\xd5\xcd\x94\xa4\xdf\x07\xe3\x2f\x13\x64\x82\x60\xc3\x20\x97\x57\x0c\x0a\xab\x59\x8c\x0a\xa9\x34\x13\xaf\xda\xb5\xd2\xba\x71\x48\x45\x9a\x4a\xf1\x66\x07\x9b\x6b\xa1\xb3\xb5\xdb\xf7\xf4\xee\x79\x45\xf7\x16\xc9\xd4\x87\xde\x7e\xcb\x6b\x7e\x72\xb0\x49\x3b\xa0\x59\x97\xfa\x5b\x97\xf9\x70\xed\x3a\x97\xfb\xe7\x68\xc5\x75\xfd\x10\x1d\x70\xd8\x36\x39\x99\xfb\x17\x2b\xf7\x33\xa9\x98\xd9\x19\x8b\x19\x6f\x5f\xda\x04\x19\x5a\xa4\x66\x72\x14\x04\x41\xfb\x64\x1d\x9c\xc8\xf7\xa9\x56\x55\x4e\x1e\xed\xf6\x6b\x75\xd0\xf2\xbc\xea\x4f\x84\x11\x58\xd8\x7f\x25\xfc\xbb\x90\x84\xa5\x9b\x6d\x21\x35\xd8\x7e\x30\x22\xc1\x0c\x7a\x8e\xf1\x35\xe1\xb6\x3c\xe9\xab\x75\x67\x5a\xb5\xf6\xf7\x8c\x07\x5e\xe3\xfe\x7a\x55\xcb\xd6\xbc\xe2\xbb\xbd\xa9\xdb\x9b\x9b\xee\xa3\x7c\x52\xc2\x13\xd9\x6a\x1b\xca\x3e\xbe\x5a\xb7\x85\xb8\xa3\x6d\x17\x1d\x15\xfd\xab\x55\x4d\x5b\xb5\x22\x2a\xbb\x0f\xcb\x14\x9e\x17\xd3\x46\x7f\x16\x49\x7b\x57\x6f\x60\xa4\x0b\x8b\x6c\xab\x89\x61\x24\x2d\x6b\x0e\x62\x39\xe9\xad\x4c\xf1\x14\x17\xb0\x09\x32\x83\xa2\x20\x69\x77\xcc\x85\xdf\x15\x8b\xd1\x32\x69\xd9\x96\x74\xc6\x52\x1d\x4b\x55\x5d\x3c\xf4\x96\x04\xa1\x4c\x09\x23\x7f\xa9\x82\xd8\xe7\x28\x96\x0a\x1c\x35\x3b\xbd\x23\x8b\x7b\xec\xb1\xc3\x56\xea\xfd\x70\xd8\x61\x83\x6b\x02\x7c\x1f\x7f\xec\xcb\x0f\x0c\x8f\x27\xd9\x78\x34\xc3\xc6\x4e\x17\x0c\x08\x99\xd2\xb6\x04\xe2\x44\x93\xfc\xb7\x06\xe1\x29\xe6\xa6\xaa\xfc\xc1\x80\x7a\x8e\xd6\x3b\xa8\xae\x5c\x6d\x34\xac\x9e\x76\xe0\xa0\x27\xe8\x80\xb2\x37\xb8\x1e\xd1\x8d\x06\xd8\x07\x6e\x39\xba\xfe\xf0\x25\xfa\x26\xa7\x29\x6d\x43\x8f\xae\x27\x4b\x81\x91\x41\xbf\x99\x31\xe8\x56\xd3\x46\x46\x51\x89\x2d\xa5\x6d\x13\x78\x5b\x1a\x97\x81\x10\x68\x0c\x4b\x90\xf0\x62\xdc\x4f\x69\xdc\x56\xff\x8b\xed\x7a\x4e\x7a\xeb\x14\xe1\x3c\xc6\xe9\xd4\x96\xea\x58\x17\x96\x49\xe3\x32\x5a\x99\x88\xea\x15\x97\x78\x5c\x62\x3a\xb9\xb2\xb9\x6f\x69\xed\xbe\x67\x85\x0b\x1c\x8f\xe8\x2e\x70\x7c\x31\xee\xa7\x31\xee\xff\x0a\xc7\x4d\x5f\x7c\xd9\x1b\xf3\x0b\x7d\x45\x0e\x47\xe9\x3e\xf5\xdd\x63\xf4\xfd\xac\x35\xf9\xb1\xbe\xd5\x34\x34\x48\x47\x85\x38\xfc\xff\x53\x1d\xd7\x7b\xb2\xc4\xda\xbc\xfd\xf4\x0e\xe2\xd8\x79\x26\xbf\xbd\xbe\xe1\xab\x0f\xff\x05\x00\x00\xff\xff\xfd\xcd\xfb\x52\x0d\x2b\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

