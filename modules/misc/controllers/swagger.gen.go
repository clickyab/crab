// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x59\x8f\xdb\xb6\x13\x7f\x96\x3f\x05\xc1\xff\xff\x71\xb1\x76\xb6\x41\x8b\xe4\x2d\x45\x83\x22\xe8\x91\x45\x37\xed\x4b\x11\x18\x63\x69\x6c\x31\xa1\x48\x95\xa4\x92\xba\xc1\x7e\xf7\x82\xd4\x61\x1d\xd4\xe1\xbd\xb2\xeb\x2a\x2f\x59\x51\x43\x6a\x38\xc7\x6f\x38\x33\xf4\x97\x45\x40\x37\xa0\xf1\x12\x4c\x4c\x5f\x12\xba\x84\x94\xd1\xb3\x45\x40\x43\x29\x74\x96\xa0\xa6\x2f\xc9\x9f\x8b\x20\xa0\x90\xa6\x9c\x85\x60\x98\x14\xcb\x0f\x5a\x0a\xba\x08\xde\x5b\xba\x08\xb7\x4c\x30\x3b\x6c\x49\xbf\x38\x52\x80\xf5\x8f\x28\x22\x54\xef\xf6\x29\x16\xa3\x01\x35\xf9\x03\xd5\x46\x31\xb1\xa3\x8b\x20\xb8\x3e\xb3\xe4\xa1\x14\x46\x49\xce\x51\xad\x5f\x2b\x25\xd5\x6f\xa8\x53\x29\x34\x5e\xb1\x24\xe5\x87\xe9\xa9\x92\x29\x2a\xc3\xb0\xfc\x4e\x10\x50\xb4\xf4\xd5\xa3\x97\xc6\x8e\x82\x82\xa4\x3e\x12\x50\x66\xb0\x39\xe2\x63\xcf\xfd\x73\x3c\x36\x29\x40\x29\xd8\x97\x04\xd5\x7b\x6a\xf0\x6f\xd3\xf8\x88\x7f\xc5\xeb\x45\x63\x5e\x45\x25\x37\x1f\x30\x34\x39\x95\xa3\xc9\x29\x3c\xef\x3b\x62\xfb\x55\xaa\x04\x78\x29\xb7\x1e\x89\x8d\x2c\x17\x25\x62\xfd\x2a\x34\xec\x13\x5e\x19\x30\x99\x1e\x55\x9b\x9d\xf0\x83\x4c\x80\x89\x41\x15\x81\x5b\xb3\xa6\x23\x9f\x54\x0a\x61\xd0\x50\x21\x18\x8c\xd6\x50\x13\x24\xdd\xda\xdd\xd9\x01\x1a\x81\xc1\x77\x2c\x41\xda\x96\x9d\x6f\xad\x08\x75\xa8\x58\x6a\x2d\x73\xd4\x42\xae\xf2\xf9\x13\x94\x57\x69\xfb\x0f\xe0\x2c\xf2\xce\xd8\x48\xc9\x11\xc4\x51\xfa\x2e\x78\xae\xaf\x58\x11\x32\x61\x70\x87\xaa\x49\x29\x20\x99\x2a\xd4\x2c\x8d\x6e\x2f\xd4\x09\x06\x69\x14\x08\xbd\x36\x2f\xbe\x87\x5e\x1b\x5c\x78\xfd\xb1\xe3\x8d\x7e\xe1\x77\x24\x58\xf3\xc3\x72\xaf\x4d\x1f\xbc\xf1\x56\x32\x8d\x6a\x1d\xc6\x18\x7e\xfc\x05\x18\xbf\x84\x3d\x97\x10\x0d\x23\x51\x02\x8c\xdf\xf9\x97\x47\x5c\xba\x70\x9a\x4c\x29\x14\x66\x1d\x35\x9c\xb1\xcf\x20\x2b\xf7\x70\xd4\x83\x5a\xf0\xfa\x4a\xd7\xa3\xa7\x81\xa7\xcf\xb5\x87\x0d\x71\xda\xba\x5e\x37\xef\xe7\xde\xeb\xec\x03\x5f\xaa\x7f\xcb\xe7\xf5\x03\x8e\x7f\xf0\xfd\xe6\x2a\x5e\x04\x68\x6e\xaa\xf5\x0d\x3f\x14\x34\xa7\x34\x01\x61\x9a\xec\x7c\xc8\x70\x73\x9d\x74\x03\xa2\x6f\x9f\x83\x5e\x3c\xd5\x41\x52\x54\x5a\x0a\x98\xe4\x99\x10\x45\x0a\xb5\x9e\x1a\x81\x90\xf3\x34\x96\x62\x72\xc4\x62\x66\xbf\x9e\x0e\xdb\x5b\xa6\xb4\x59\x1f\x01\xde\x3b\x77\x8e\x9a\x48\xcc\xe1\xb8\xc5\x27\x6d\x74\xaa\x4e\x14\xee\x98\x36\xa8\xa6\xe8\x24\x94\x49\x0a\x62\x7f\x0c\xaf\x93\x00\xf6\xa6\x52\x3e\x5a\x70\xa0\xf5\x67\xa9\x7c\x6a\xf7\x46\x60\x2b\x1f\x53\x3b\x0b\xdf\x5e\xd6\x79\x5c\xf8\x59\xee\x98\x78\xfb\xd3\xc8\x01\x2c\x94\x99\x30\xa3\x67\xa0\x50\xaa\x54\x2a\x68\x03\x69\x1f\x8e\x76\xfd\x6a\x88\xba\x0f\x76\x07\x70\xb7\x01\xbc\x7e\xe4\x1d\x82\xde\x1a\xf6\x36\x21\xbc\x07\x7d\x1b\x08\xed\x41\x81\x53\xda\x5d\x1b\xb3\x46\xf6\xf6\x46\x98\x6f\x9f\xf7\x32\xd7\x8e\x49\x5f\x79\x6f\xfe\x63\xc6\x48\x4c\xeb\x57\x54\x7d\x6d\x0c\xa5\x90\x09\x0b\xd7\xa1\x8c\x4e\xd3\x32\x7c\xc0\x39\x59\x3c\x1e\x10\x9d\x3c\xf7\x86\xd3\x4e\xd7\x47\xcb\x68\x7a\xba\xb6\xd6\x73\xf8\xbc\x13\x4f\x75\x41\xb2\x83\x70\xbd\x88\x55\x6d\xc3\x53\xec\x69\x6e\xe1\x70\xb8\x6d\x9d\x47\x26\x54\x0c\x7a\xca\x05\x2d\x6e\x0e\xf4\xe5\x21\x77\x8e\xc6\x73\x34\xae\xb1\x31\x47\xe3\x62\x89\xdb\xc4\xaa\x76\x5a\x35\x79\xe2\x6d\x82\xdc\xe9\xda\xf0\x13\xc7\x72\x4f\x7e\x76\xbb\xf2\x7d\x59\x8d\x94\x1f\xd1\x57\x90\x3b\x22\xe7\x5b\xb8\x77\x34\x96\xda\x49\xf1\xd9\xc5\x77\xe7\xab\xf3\xd5\xf9\x33\xd7\xa3\x61\x62\x2b\xcb\xa6\x4b\xb3\x0e\x46\xdf\xc5\x48\x42\x05\x1b\x02\x29\x3b\x23\x90\x19\x49\x76\x28\x50\x59\x35\xd1\xbc\x5c\xcb\x8c\xeb\xae\xe4\xa4\x9c\x85\x1f\xf7\xb0\x39\x0f\x65\xb2\x74\xf3\x5e\x5d\xbe\xc9\xe9\x3e\xa1\xd2\xc5\xa2\x17\x2f\x68\xc1\x4f\x0a\x26\xae\xfa\x3d\xcb\x2c\xb5\x19\xff\xf2\x4b\x22\xa3\x8c\xe3\xf5\x21\x1d\xcd\xb9\x2e\x12\xd1\x16\x87\xbf\xbb\x49\x84\x09\x23\x89\x89\x91\xe8\xbd\x36\x98\xd0\x2a\xc3\x56\x90\xa0\x41\x55\x36\xa0\x82\x20\xa8\x52\xd5\xd6\x4a\xf4\x10\x62\xdd\xb3\x65\xee\x30\x56\x38\x2b\xcd\x99\x3b\x8c\x2b\xfc\x2b\x63\x0a\xad\x61\x19\x95\x61\xa7\x6a\xe5\xad\x3d\xf7\xb1\xe0\x36\x80\x61\xa6\x98\xd9\x13\xa7\xf6\x33\xb2\x43\x43\x98\x21\x5b\x25\x13\xc2\x6d\xa2\x4e\x94\xcc\x0c\xb6\xb9\x8d\x11\x2c\x14\x75\xf8\xcd\x8d\xe7\x86\xec\xba\xff\xde\x17\xb2\x2c\xab\x05\xf5\x1a\xd8\xf3\xd5\xb3\x7a\xf2\xdf\xda\xce\x5e\x66\x04\x14\x12\x21\x8d\xb5\x9d\x58\x2a\xf6\x4f\x61\x37\x8e\x5c\x87\x31\x26\x30\xe9\x60\xd2\x6a\xd1\x0d\xd1\x7a\x5b\x75\xb9\xa4\x3a\xed\xba\x01\x0f\x6d\x79\x7f\x83\xb2\xd1\xba\xeb\xd0\x75\x5a\x78\x23\x5f\x39\x1a\x32\x7d\xd8\x54\xba\xa1\x90\x66\xed\x91\x75\x2f\x7a\xb5\x70\xe8\xf9\xea\x9b\x01\x85\x6e\xa5\xda\xb0\x28\xb2\x66\x69\x75\x1b\xc3\x27\xab\x5c\x02\x61\x88\x5a\x93\x18\x15\xce\xca\xbd\x4f\xe5\x56\xf2\x9f\xac\xd7\x66\x20\x81\x5d\x0d\x07\x6b\xad\x5f\x9d\x4f\x7b\xbf\x28\xa6\xe4\x35\xc2\xa5\x0d\x68\x4b\x2e\x77\x32\xab\x76\x4c\x77\xd8\x8f\xc5\x21\x97\x1a\xaf\x50\x5b\xa0\x27\xee\x41\x93\xa2\xad\x44\x74\x3e\x7c\x13\x60\x7e\x72\xa8\x78\xb1\x5a\x0d\x38\xd1\xa0\x8b\xfc\x5f\xe1\xd6\x12\xfd\x6f\x59\xbb\x11\xb1\xec\x6f\xd2\xf7\xba\xf1\x8c\xcb\x1d\xba\x19\x97\x67\xe5\xde\x8f\x72\xef\x16\x97\x2d\xec\x8e\x02\xf2\xd2\xe1\xab\x34\xf1\x21\xff\x1c\xc7\xe6\x57\x9c\xbf\xb5\x33\x5a\x18\x0d\x9c\x13\xb9\xb5\xa7\x77\x14\x46\x97\x50\xad\xc9\x26\x33\x15\x7e\xdb\x9c\x73\xc6\xee\x19\xbb\xff\x8b\xee\x3d\x63\xf7\x09\x2b\xf7\x41\xb1\x3b\x01\xc6\x97\xee\x5e\xd6\xb4\xea\x46\x75\x85\x8b\xb8\xbf\x88\x9d\x4f\x98\xb8\xc3\x2a\xc7\x46\x46\xfb\x2e\xc6\xa6\xf9\xed\x8b\x75\x04\x06\xbc\x50\xbb\x05\xae\xf1\x78\x30\xf4\xdf\x88\xf3\xc9\xf7\x41\x31\xba\xe7\xba\xdc\xdd\xe9\xbd\xdd\x84\xa1\x69\xd6\xaf\xf4\xd7\x11\x33\x97\xc5\x84\x3c\x34\x92\xad\x54\x04\x23\x66\x48\xb9\x10\x49\x95\xdc\x32\x7e\x12\x31\x79\xa4\x28\xf6\x08\x2c\xb6\x7d\x51\xec\x71\x18\x6c\xfb\xfa\x4e\x6f\xf8\xb9\xbf\x13\x8d\xef\xa6\xfd\x7c\xac\x79\x22\x91\x6f\x3e\xd6\x9c\xb0\x72\x1f\xf4\x58\x93\xd6\x5a\x8c\x83\x59\x68\x9e\xbb\x12\xa6\x5d\x44\xb3\x81\xa8\x18\x71\x81\xe7\x76\xfd\x9b\xc7\x16\xd6\x1e\x7b\x54\x98\xe1\xb8\x43\x37\xc3\xf1\xac\xdc\xfb\x51\xee\x83\xc2\x71\x79\xeb\x6f\x5a\x8e\xf9\x44\xb3\xc8\xf6\x0f\x05\x7c\xe2\x7b\xc4\xe8\xfb\x55\xcf\xe4\xc7\xda\x56\x79\x5d\x43\xc9\x28\x0b\xc7\x7f\xcc\xeb\xb8\x3e\x90\xc5\xc6\xa4\xd5\xab\xcf\xb0\xdb\x39\xcb\xa4\x17\xe7\x2b\xba\xb8\xfe\x37\x00\x00\xff\xff\x2a\xc5\x99\x87\x3a\x3c\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

