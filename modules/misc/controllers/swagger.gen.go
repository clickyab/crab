// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5b\x8f\xdb\xb8\xf5\x7f\xb6\x3f\x05\xa1\xff\xff\xa1\x05\x06\xf6\x24\x4d\x5b\x74\x81\x00\xcd\xa6\x8b\x22\x68\xb7\x19\xec\x64\xfb\xb2\x1b\x18\xb4\x74\x6c\x33\xa1\x48\x95\xa4\x92\x75\x07\xf9\xee\x85\xa8\x8b\x75\x21\x29\xd9\x23\x5f\x24\x68\x9f\x36\xf2\x21\x75\x78\x2e\xbf\x73\x11\xc9\x79\x9a\xcf\xbc\x35\x96\xf0\x80\xd5\xce\xfb\x0e\x79\x4b\x1c\x11\xef\x6e\x3e\xf3\x7c\xce\x64\x1c\x82\xf4\xbe\x43\xbf\xcc\x67\x33\x0f\x47\x11\x25\x3e\x56\x84\xb3\xe5\x27\xc9\x99\x37\x9f\x7d\x4c\xe8\x02\xd8\x10\x46\x92\xc7\x09\xe9\x93\x26\xc5\x78\xf5\x77\x60\x01\x88\x0f\xfb\x08\xb2\xa7\x33\x4f\xa5\xff\xf0\xa4\x12\x84\x6d\xbd\xf9\x6c\xf6\xed\x2e\x27\xff\x59\x82\x78\xcb\x45\xc4\x85\x7e\x43\x31\x26\x12\x3c\x02\xa1\x08\xe4\x93\x27\xf4\x41\x20\x40\x1e\x1e\x18\xa9\x66\x33\xef\x31\x7d\xcf\xe1\x89\x89\x85\xe4\x3f\xcd\x86\xfe\xfd\xdf\x98\x92\xc0\x38\x62\xcd\x39\x05\xcc\x8a\x21\xf3\xca\xc8\x82\x8c\xaf\x3f\x81\xaf\x52\xaa\xec\x47\xcf\x07\x4a\xa3\x1d\x67\x30\x1c\x8e\x89\xda\xaf\xca\xd3\x5a\xf8\x7d\xc7\xd4\x9f\x5e\x19\x5f\x4e\x98\x82\x2d\x88\x4b\xf1\x2b\x00\x2b\x08\x56\x58\x95\x58\xde\x70\x11\xea\x07\x5e\x80\x15\x7c\x20\x21\x78\xf5\xb9\xca\x42\xcd\xe7\x02\x9f\x33\x1e\x12\x7f\xe5\xf3\x60\x38\x1a\xdb\x10\x21\xd5\x8a\xe1\x70\x38\x2c\x53\x3c\x34\x8e\x07\xc5\xec\xb0\x10\x47\xc0\x96\x48\x05\x62\x58\x5e\x17\x47\x41\x6f\xb8\x13\x4b\x10\x55\xcc\x35\x62\xa9\x66\x2f\x1d\x63\x60\x2d\x0b\xa8\x52\xaa\xd5\x5b\xac\x60\xcb\xc5\xde\x19\x4a\x03\x90\xbe\x20\x51\x39\xe4\xb6\xb0\xd9\x81\x43\xb3\xb7\xb8\x26\x95\x0a\xab\x58\x1a\x88\x2b\xba\xe9\xbc\xf4\x77\x8f\x0f\xce\x55\xf7\x19\x2e\xae\x29\x8f\x3e\xad\xb0\xab\x6c\xdf\x3f\x4e\xa2\xed\x5f\xb4\x3e\x67\x4a\x70\x4a\x41\xac\x7e\x10\x82\x8b\x9f\x40\x46\x9c\x49\x78\x24\x61\x44\xc1\x29\x71\x48\xe8\x5b\x11\x33\xc2\x02\x87\xb2\x82\x7f\x44\x41\xf5\x89\x0d\x44\x0f\x28\x7a\xa0\xc0\x42\xe0\x7d\x13\x65\x15\xfc\xa6\xba\xc0\x72\x17\x8c\x3d\x4e\x6c\xff\x4a\x94\x42\x73\xb9\x59\x24\xd6\x79\x3a\xb9\xf2\xb1\x6a\x4c\x56\x95\x98\x51\xd2\x66\x44\xb5\xc8\xa1\x58\x7f\x25\x32\x59\x72\xe8\x82\xb8\x6a\xec\x6d\x53\xd7\xed\xdd\x16\xf7\xbe\x55\xec\xde\xa0\x90\x9a\xec\x0a\x03\x68\x8a\x8e\xc8\xe8\x24\xd1\x99\xb0\xc3\xe5\x6d\x43\x90\x6a\x3e\xc0\x04\x24\xa7\xac\xad\x3f\x2d\x85\x98\xc5\x1b\xec\xab\x58\x80\x90\x47\xe9\x09\xfb\x8a\x7c\x31\x0a\xcb\xb2\xf8\xb5\xc0\xcc\xa8\x0b\xb3\x70\xaf\x6a\x07\xb7\xa7\x28\x2e\x27\x6f\xba\x49\x25\x05\x21\x5b\xbd\xd1\xbe\xf0\x58\x59\x80\xb5\xd1\x95\x0c\xf8\x1b\x0f\x31\x69\xe9\x6f\xd5\xfc\xcb\x99\xcf\xf4\x99\x70\x99\xab\x81\xdb\x2e\xc1\xce\x92\x24\x5e\x2a\xed\xa3\x3c\x6d\xa8\xae\xde\x12\xe5\x2e\xd4\xce\xb2\xcc\x48\xf0\x2f\x84\xf9\xd0\x53\xd9\x79\x58\x0d\x8f\x99\x6a\xa9\x3c\xfb\x5d\xd0\x31\xdc\x3d\x64\xab\x76\xd7\x31\xe9\x12\xba\x48\xe6\x2c\x86\x78\xcc\x82\x7c\x52\xe6\xbd\x53\x70\x38\x23\x98\x1b\x8d\xca\xfa\x8e\xe7\x21\xf0\x41\x04\x5a\x5d\x37\x20\x85\x9e\xd6\x93\x0b\xf1\xb8\xf5\x98\x8c\xb6\x75\x5d\x37\x27\x04\x2e\xc2\xd5\x8f\xa5\xe4\xf4\xb4\x58\x69\x2c\xe7\x6b\x89\xe8\xc5\x02\x6b\x77\x6c\xb8\x54\xe4\x49\x84\xbc\xc6\xd6\x42\xf9\x14\xe1\x8e\x5b\x60\x4a\x60\x26\x57\xea\x2f\xdf\xb7\x09\xad\xde\x69\x69\xf4\x59\x5a\xf0\xd3\xd0\x61\x29\x5c\xa9\xd2\x5d\x39\x79\x29\xba\xd3\xec\x63\x4a\xbf\xc7\xfe\x67\xe7\x5a\x18\x7c\x5d\x45\x58\xca\xaf\x5c\x74\x75\x1b\xc5\x3f\x43\x6b\x2f\xb9\x33\x93\x3b\xf0\x3f\xa7\x29\xf6\x03\xde\x53\x8e\x03\x77\x2b\x2c\xc4\x84\x76\xe4\x93\xc5\xe1\x1a\x44\x1f\x69\xcf\x81\xd3\x1f\x31\xa1\xbd\xf1\x79\xf4\x9b\x5b\x7a\x5f\x99\x93\xc6\x42\x00\x53\xab\xa0\x52\x86\xb4\xb9\x76\x4a\xed\x34\x6a\x63\x95\x60\xe8\x15\x74\xea\x32\x1a\x6b\x57\x77\x85\xd7\x69\x5e\x73\x73\xce\xca\xbd\xb1\xcc\x71\xbc\xa9\xfc\x2e\x53\xbd\xe3\x28\x79\x0e\x55\x4f\x75\x16\x63\xed\x53\x5d\x54\xed\x1d\x96\x10\x5e\x19\x52\x0b\xe3\x9d\x64\x67\xac\xb9\x4f\xd6\xc9\xbc\x36\xbf\x79\x9d\x4e\x50\xec\xec\x20\x27\x6f\x2b\x71\xa6\x07\x86\x4d\x1d\x4e\xfa\xc6\x96\x0a\x67\x58\xb3\xed\x42\x70\xbd\xc2\xb8\x07\xc0\x35\xc0\xf4\x05\xde\x89\x99\x47\x94\x96\x47\x88\xc6\xf6\xed\xf7\x59\xb0\xb8\xe1\x62\x0b\xea\x72\x30\x4c\xf9\x96\xb0\xbe\x83\x54\xd7\xd8\xdb\x95\xc9\x08\x84\xe4\x0c\x77\x0a\x52\x37\xe5\x0e\x47\x9b\xf6\x56\x6f\x3f\x3b\x93\x1f\x74\x5a\x68\x57\x9d\xe4\xd6\xdf\x45\x27\x3e\x0f\x23\xcc\xf6\xc7\xf0\x7a\x8c\xb9\x9d\x1d\x40\x42\xbe\x26\xb4\xb3\x94\x8f\x4b\x3c\xb5\x30\x33\x82\x9e\x14\x93\xe6\x53\xff\x4c\x3c\xfb\xfd\x3f\x5a\x2a\x25\x5d\x7b\xb7\x76\x4d\x0d\xb1\xc8\x4e\x6d\x72\x42\x17\xb5\x2d\x5d\x71\xe4\x2b\x95\x84\xc5\x9c\xb1\xb8\x52\x96\x52\xce\x52\x4d\x7d\x2c\x59\x4b\x25\xb3\x31\x40\xc6\x98\x56\x57\x07\xb8\x96\xb5\x35\xb6\x52\xce\x5c\xb9\xdc\x95\xd7\x66\x4e\xcf\x5b\x72\x41\xbb\xa2\xca\x73\x5b\x12\x9f\x16\xe9\x0d\xc9\x32\x4c\x28\x3b\xa2\xe5\x19\x62\xc2\x88\x56\x37\xda\x85\x8d\x17\x89\x2d\xe5\xc5\x88\x56\x68\x29\xcd\x7b\xc1\xe3\xc6\xb6\xd4\x99\x33\x2e\x15\xcb\x28\x75\x0e\xcc\x4b\x38\x94\xfe\xb5\x14\xd5\xca\xd8\x61\x84\xe5\x33\xb2\xf5\xd0\x41\x5e\xf7\x4c\x39\xd7\x94\x73\x95\xd8\x98\x72\xae\x6c\x0a\x5b\x46\xd2\x65\x70\xbd\xd2\xee\x3c\xd0\x96\x28\x74\x19\x3b\x5e\x1b\x1e\x38\x96\x1b\xaa\x70\x3b\x9e\xcf\x2b\x83\x8d\x73\x9f\xe5\xb3\x92\x04\x16\xf4\xfc\x55\xc9\xfd\xea\xb9\xfe\xcd\xdb\x71\xa9\x15\xf8\xe2\xe5\x9f\x17\xf7\x8b\xfb\xc5\x0b\x7d\xd0\x92\xb0\x0d\xcf\xa6\xaf\x7d\xa0\xf0\x3e\xec\x00\xf9\x02\xaf\x11\x8e\xc8\x1d\xc2\xb1\xe2\x68\x0b\x0c\x44\x62\x21\x5e\xfa\x59\x92\x28\xdd\x50\x49\x49\x29\xf1\x3f\xef\xf1\x7a\xe1\xf3\x70\xa9\xc7\xbd\x79\x78\x97\xd2\x7d\x01\x21\xb3\x49\xff\xf8\xc2\xcb\xf8\x89\xb0\xda\x15\x87\x36\x97\x58\x4a\x50\x4b\xbf\x7e\x6c\xa4\xd4\x45\x6d\xf0\x97\x13\x23\x01\x2a\x16\x0c\x51\x22\x15\x22\x78\x8d\xb2\x1f\x12\x39\x16\xdd\x1c\x81\x43\x50\xe9\x5e\xd3\x5f\x52\x51\x16\x6d\x91\xda\xb4\x6a\x07\x48\x82\x1f\x0b\xa2\xf6\x48\x6b\xfe\x0e\x6d\x41\x21\xa2\xd0\x46\xf0\x10\xe9\x5e\x2b\x12\x3c\x56\xa5\x1d\x7e\xfa\x6b\x96\xb7\x03\x9c\xa0\x51\xf1\x34\xc3\x97\xcc\x7e\x8a\xc7\x02\xfe\x13\x13\x01\x89\xe2\x95\x88\xa1\xf1\x15\xc2\xb0\x9f\xe1\x63\xd1\xad\x4e\xdb\x42\xe5\xce\xe8\xcb\xfb\xfb\x72\x97\xa7\xb6\x9c\xc3\x6b\xa5\xbf\x83\x10\x57\x5c\xe3\xff\x05\x6c\x12\xa2\xff\x5b\x96\x0e\xd2\x2e\x6d\x3b\xd1\x2d\x9e\xf3\xea\xfe\x85\xe3\xfd\x7b\x1e\x23\x2c\x00\x31\xae\x12\x1b\xda\x71\x41\xfe\x9b\xd9\x8f\x8d\x2b\x5b\x6e\x54\x3b\x6c\xe0\xa2\x35\x1e\x3a\x48\x35\xd5\x38\x78\xe0\x00\x89\x1a\x00\x55\x28\x2b\x87\x10\x1a\x74\x8d\xc3\x08\x2d\x6f\x39\x1a\xb5\x4d\xf0\x98\xbb\x23\xe3\x6a\x65\x90\xb5\x15\x40\x1b\x0a\xfd\x83\x43\xa1\x1b\x2e\xd6\x24\x08\x12\xb7\x48\x74\xbb\xc3\x5f\x12\xe5\x22\xec\xfb\x20\x25\xda\x81\x80\x49\xb9\xe7\x54\x6e\x21\xff\xce\x7a\xad\xc6\x32\xbc\x2d\x81\x60\x79\xaf\x77\x3a\xec\xe3\x3c\x1b\x92\x86\xac\x0c\x98\x89\x8c\x3a\x61\x32\x91\x51\x05\x8e\x31\xa5\x88\x48\xf4\x3b\x58\x6c\x17\x88\x08\xcc\x92\x1a\xe0\x0e\x2d\x16\x8b\xdf\x4f\xd8\xfc\x5c\x6c\x2e\x1f\x75\x99\xb0\x79\x20\xee\x3b\x61\xf3\x88\x95\x7b\x15\x6c\x36\x9f\xa5\x72\xa1\x74\x79\x83\xab\x6c\xe0\x75\xfa\x9d\x14\x55\xa6\xcd\x10\xfc\x4d\x14\x51\xb8\x43\x8f\x38\x94\x31\xdb\x4e\x10\xfe\x6c\x08\xaf\xea\x6e\x02\xf1\x81\xf8\xf9\x04\xe2\x23\x56\xee\x55\x40\x9c\x77\x43\x6e\xde\x84\xeb\x22\xbd\xa6\x84\xc5\xbf\x4d\xb9\x75\x3f\xc0\x5c\x3a\xf7\x3a\xa1\xf2\x40\x1c\x77\x42\xe5\x11\x2b\xf7\xc2\xa8\x9c\x1f\x86\x5b\xa6\xe7\x1b\x97\x4f\xc5\xa1\xb8\x15\x09\xbe\x75\xc2\xea\x53\x40\xb8\x8e\xac\x11\x56\xbb\x26\xae\x96\x79\x19\x0e\xbc\xd6\x8f\x8c\x5a\xdd\xf0\x6c\xb0\x6e\xbc\xde\xc6\xca\xc6\xab\x6b\xb2\xe1\x32\xde\x5c\x90\x6d\x96\xdb\x38\x96\xda\xc5\x5a\x2f\x6c\x0a\x05\x8f\xfd\xaf\xbf\xf0\x92\xe5\xd3\xe1\x6c\xea\xb5\x5d\xb7\x74\x4a\x76\x78\x8e\x7b\x38\x18\x3c\xf9\xee\x59\x7c\x37\x8e\x28\xc7\xc1\xf2\x29\xe4\x41\x4c\xe1\x60\xab\x51\xfa\xed\xd6\x6c\xac\x3f\xeb\x41\x88\x30\xc5\x91\x4e\xe2\xf7\x52\x41\x78\x3e\x13\x4e\x99\x3b\xd5\x7c\xef\xdc\x2c\x0c\xae\x0a\x99\xca\x00\x03\xdd\x54\x06\x4c\xca\x3d\x8f\x72\x2f\x5c\x06\xc4\x12\xc4\xb2\x7a\x8c\x38\x41\x45\x7f\x77\xd6\xd4\x61\xcd\x83\xbd\x21\xeb\x4f\xb7\x0b\xad\x02\xac\xb0\x11\xce\x36\x98\x4a\x38\x3e\xb8\xd9\x0e\xbb\x9b\xe4\x78\xa5\x7e\x4c\xfd\x82\xc5\x29\xfd\x38\x31\xfd\x48\x74\x5d\xb6\xf4\xbb\xf6\xf4\x62\xa0\x06\xdd\xdc\x66\x37\xd9\xf3\xf8\xed\xb9\x86\xdc\xc6\xd3\xf7\xb1\xdd\xd6\x21\x20\xaa\xf4\x87\x20\x10\x91\x28\x96\x10\xa0\x0d\x17\x28\xbb\xbc\x22\x79\x20\x50\xba\x51\x76\x0c\x6d\xf6\x96\x7c\xfc\x06\x3c\xb9\xac\xc4\xab\xfb\xb0\xe9\xcf\x85\x58\xdd\x66\xaa\x0c\x1a\x74\xe3\xad\x0c\x6e\x19\x07\x35\xa8\x74\xeb\x26\xa4\xf8\xa3\x41\x8e\xb0\x1e\x7b\x09\x57\x00\x8e\xca\xad\x18\x57\x47\x0e\xe3\xb1\xfe\x5b\x0f\xfc\x03\x36\x78\x7e\x88\xf3\xee\x63\x04\x94\x4b\x78\x04\x29\x93\x80\xaf\xff\x21\x8b\x58\x2f\xd3\xc7\x63\x88\xf3\x97\x37\xf8\x13\xd2\xdd\x29\x60\x36\xe8\xc6\x1b\x30\xa7\x56\xda\x98\x5a\x69\x9d\x00\x79\xa9\xf1\x95\xab\x5d\xe9\x62\xd5\x56\x6c\x7e\x43\xe9\xfb\x64\x44\x0d\xa3\x31\xa5\x88\x6f\x90\x4f\x09\x30\x25\x73\xa8\x96\x68\x1d\xab\x02\xbf\x39\x1b\x45\x8d\x36\x61\xf7\xe4\xde\x13\x76\x4f\xca\xbd\x12\x76\x87\x98\xd0\xa5\xfe\x40\xd0\xad\x84\x2c\x2e\x85\x45\xfa\xff\x50\x32\x7e\xf0\xc5\x64\xe3\x8e\x5d\x93\x7c\x2f\x5f\x50\x36\x2f\xe0\xed\x4f\xef\xf9\x1d\x78\x4b\x1f\x53\xba\xae\x5c\xd7\xec\xe8\xa1\xa6\x77\x5f\xbe\xcd\x6e\x78\x46\x44\xea\x4d\x09\xb1\xa0\xc8\xe7\x21\x61\xdb\x34\x84\xca\x24\x3c\xeb\xc3\xed\xe8\x57\xf5\xab\xfa\xeb\x4f\x49\x30\x45\x4f\xfa\x1f\x09\xed\x6b\xd4\x7c\xbd\xfe\x31\x04\xb5\xe3\x01\x7a\x8d\xa2\x58\xa1\x4c\xe3\xe8\x35\xca\x6f\x94\xd6\x34\x2f\xef\xef\x93\x47\x45\x0c\x5b\x54\x63\x98\xa6\x79\x55\xa7\x31\x14\xa4\xe8\xdb\x50\x8d\x35\xbf\x5f\xfb\xea\x46\x3a\xb4\x6f\x1e\x7d\xb8\x4b\xfd\xf6\x57\x17\x56\xa6\xb4\x0f\xf9\x6d\x93\xc3\x34\xb7\x6c\xc1\x93\xb1\x5d\xd0\xd8\x6a\x97\x4a\x39\x21\xf9\x87\x80\xa8\x87\x6c\x40\x5a\xb6\xe8\x2f\x5a\x10\x10\x85\xf2\x89\x50\x24\xf8\x86\xd0\x51\xd4\x4b\xb7\xff\x4d\xab\x7e\x17\xf2\xd5\x5d\x67\x90\xdd\xe9\xa9\xe4\x6c\xd0\x4d\x25\xe7\xa4\xdc\xf3\x28\xf7\xa2\x25\x67\x54\xba\x32\xcd\xd9\x21\x4c\xfb\x8a\x49\x95\x91\x44\xb4\x24\x10\x65\x4f\x74\xe0\x79\xde\x76\xe8\x5b\x0b\x6b\xb7\x1e\x15\x26\x38\x6e\xd0\x4d\x70\x3c\x29\xf7\x3c\xca\xbd\x28\x1c\xe7\xb7\x18\x77\xab\x69\x07\x5a\xc5\xd6\xff\x16\x86\x49\x7c\x37\x8c\xbe\x83\xaa\x64\xf3\x3b\x20\x05\x0f\xe2\xf4\x0f\x4d\x26\xd4\x1e\x8e\x22\x4a\xb2\xe3\x7b\x9f\xa4\xde\x5a\x97\x48\x3c\xe5\xfa\x40\xb6\x53\x2a\x2a\x7e\xfa\x8a\xb7\x5b\x6d\x99\xde\xcb\xc5\xbd\x37\xff\xf6\xbf\x00\x00\x00\xff\xff\x6f\x0e\xbc\xcf\x54\x8c\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

