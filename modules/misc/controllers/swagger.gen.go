// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcd\x6e\xdc\x36\x10\x3e\x6b\x9f\x82\x60\x7b\x34\xbc\x8e\x1b\xb4\x68\x6e\x29\x1a\x14\x41\x5b\xd4\x88\xdd\x5e\x0a\x63\xc1\x95\x66\x25\xc6\x12\xa9\x0e\x47\x4e\xb7\x41\xde\xbd\x10\xf5\x2f\x51\xb4\x6a\x6f\xed\x6c\xeb\x5c\x62\x53\x43\x72\x86\x33\xdf\x37\x3f\xf0\xc7\x55\xc0\xb7\xc2\xc0\x85\xa0\x84\xbf\x62\x7c\x2d\x72\xc9\x4f\x56\x01\x0f\xb5\x32\x45\x06\x86\xbf\x62\xbf\xaf\x82\x80\x8b\x3c\x4f\x65\x28\x48\x6a\xb5\x7e\x6f\xb4\xe2\xab\xe0\xba\x94\x8b\x60\x27\x95\x2c\x97\x4b\xd1\x8f\x56\x54\x88\xcd\x0f\xa0\x22\xc0\xab\x7d\x0e\xf5\x6a\xc0\xa9\xfa\x85\x1b\x42\xa9\x62\xbe\x0a\x82\x4f\x27\x8d\xf8\xaf\x06\xf0\x02\xd0\x68\x25\xd2\x76\x43\x8e\x3a\x07\x24\x09\xcd\xc9\xa5\x70\x14\x21\x98\x6e\xc1\x29\x15\x04\xfc\xb2\xba\xa4\x5b\x71\xdd\x5f\xfe\xb3\x3a\xd8\xef\xbf\x89\x54\x46\xce\x1d\x5b\xad\x53\x10\xaa\xdd\xb2\x1a\xec\x6c\xc5\xf4\xf6\x3d\x84\x54\x49\xd5\x1f\x79\x08\x69\x9a\x27\x5a\xc1\xf1\x68\x2c\x69\xbf\xe9\x1f\x3b\xa3\xef\x5b\x45\x5f\xbf\x74\x5e\x2e\x15\x41\x0c\xf8\x58\xfa\x22\x08\x82\x68\x23\xa8\xa7\xf2\x4e\x63\x66\x17\x78\x24\x08\xae\x64\x06\x7c\x7c\x56\xff\x51\x9b\xb3\x76\x12\x0d\x6d\x94\xc8\x8e\xc7\x5d\xb1\x05\x5a\x4f\x5d\x9f\x7d\xa9\x38\x36\xf3\x8e\x0b\x3b\x45\x1e\x1d\x2c\x16\x0b\x03\x38\xc4\xa1\x13\x5f\x56\xbd\x6a\x8f\x43\xb5\x8a\x61\x43\xad\x08\x75\x9a\x02\x6e\xde\x20\x6a\x7c\x07\x26\xd7\xca\xc0\xa5\xcc\xf2\x14\xbc\x7c\x0b\xa5\xfc\x9d\xef\x9f\x0b\x14\x99\x19\xbc\xa6\x24\x18\xae\xcc\xb9\xa4\xf3\x49\x27\x21\x10\xc5\x7e\xea\x33\x82\x3f\x69\x89\x93\x97\x78\x6c\xc1\xb3\x45\x99\xda\xbc\x0e\x49\xde\xc2\x25\x09\x2a\xcc\x9d\x99\xac\xdc\xf0\xbd\xce\x84\x54\xfe\x1c\x66\xcf\x5c\x08\xd9\x43\xd2\x5b\x04\x26\x44\x99\x97\xc9\xfa\x68\x20\xb5\x00\x01\xb5\xe4\x88\xd7\xbc\xd8\x3a\x04\x4e\x17\x44\x10\xa1\x50\x66\x43\xdf\x7e\x27\x8c\x1f\x66\x63\x00\x4d\xe0\xe3\x7e\xfc\xc9\x0b\xf6\x80\xd3\xd8\x3a\x04\xcd\xbd\x4d\xb1\x74\x14\x26\x10\xde\xfc\x2c\x64\x7a\x21\xf6\xa9\x16\x91\x9f\x3a\x32\x21\xd3\x83\xdf\xdc\x70\x97\xf7\xea\xb0\x40\x04\x45\x9b\x68\x00\xc6\xb9\x80\x6c\xe1\x61\xa5\xbd\x5e\x70\x62\x65\x8a\xe8\x65\x6c\xe7\x82\xb6\x3f\x10\x97\x9d\xeb\x84\xf9\xbc\xf6\x4e\xb0\x7b\x6e\xea\xdf\xe5\x42\xbd\x07\xf8\x1d\xf6\x87\xa7\x38\x19\x60\x68\xd4\xe8\x8e\xb9\x62\xb3\xbf\x65\x48\x08\xcb\xde\xce\xc5\x0c\xf7\xf7\xc9\x34\x83\xb9\xec\xf4\xa2\x78\x29\x40\xf2\xba\x7b\x5a\x82\xcc\x69\x13\xe5\xcd\x40\x8e\x16\xc6\x2b\x3f\x69\x20\xbc\xb4\xed\xac\xb9\x7d\xe7\x3f\xb8\xe2\xf5\xc9\x2f\x32\x74\xa9\x4f\x10\x62\x69\x08\xf0\x60\x6c\xd9\x28\x29\x8c\xf9\xa0\xd1\xf5\xc4\xb3\x95\x24\xf5\x5a\xf1\x87\xdb\x55\x71\xf0\x4f\x3a\x96\xea\x97\x1f\x0f\x66\xd7\xf2\xa0\x21\x7d\x03\x2e\x5e\x7f\x54\xf3\xdf\xd5\xee\xfd\x7f\xd8\xbf\xb2\xdf\x78\xa2\x8d\xa5\xc1\x17\xe7\xdf\x9c\x9e\x9d\x9e\x9d\xbe\xb0\xd3\x22\xa9\x76\xba\x19\xff\x0c\xd3\x0f\xbf\x4a\x80\x85\x28\xb6\x4c\xe4\xf2\x84\x89\x82\x34\x8b\x41\x01\x96\x34\xcb\xab\x2a\x49\x92\xed\x42\x2a\xd1\x54\x86\x37\x7b\xb1\x3d\x0d\x75\xb6\xb6\xfb\x5e\x5f\xbc\xad\xe4\x6e\x01\x4d\x7d\xe8\xf9\x39\xaf\xf5\xc9\x05\x25\xed\xe4\x69\x5d\xda\xba\x2e\x5f\x7c\x6d\x0b\x86\xce\x33\x95\xd6\xb5\x4f\x46\x1a\xb6\xb5\x05\xb3\x3f\xb1\x72\x3f\x93\x8a\x99\xbd\x21\xc8\xf8\x49\xaf\x44\x03\x02\x6c\x46\x62\x41\x10\xb4\x75\xc1\xe8\xc4\x36\x37\x70\x5b\x7d\xf0\xad\x8e\xf6\xdd\x5a\x4d\x47\x3c\xaf\x68\x61\x13\x09\x12\xdd\x57\x84\x3f\x0a\x89\x50\x86\xc2\x4e\xa4\x06\xda\x0f\x26\x4c\x20\x13\x83\xba\xe3\x4b\x84\x5d\x79\xd2\x17\xeb\xde\x18\x6e\xed\x2e\xd5\x56\x83\x9c\x54\xfd\x77\x5d\xdb\xd6\x44\x74\x3f\x25\x9c\x9f\x9d\xf5\x2b\x9f\x59\x0b\xef\xa9\x56\x5b\xc7\xb9\xf4\x6a\xc3\x5c\xc4\xbd\xd7\xb6\x91\x5c\xc9\x5f\xaf\x6a\xd9\x0a\x96\x95\xdf\xf3\xc9\x00\xb1\x98\x77\xfa\x9b\x48\x52\x33\x71\x64\xa8\x0b\x02\xb6\xd3\xc8\x20\x92\xc4\x9a\x83\x58\x8e\x7a\x27\x53\xb8\x4f\x08\x50\x02\xcc\x40\x58\xa0\xa4\x3d\xb3\x70\x3d\x61\x31\x10\x93\xc4\x76\xa8\x33\x96\x96\xdc\x59\x5d\x3c\x8e\x96\x04\x44\x99\xe0\x26\xf1\x52\x81\xde\x15\x28\x84\x05\x4c\x6a\x0c\x67\xa7\xf0\x19\x47\xec\xb8\x82\x79\xf2\x80\x9d\x0c\xa6\x47\x1a\x35\x65\xdb\xcb\x43\x5f\x7c\xc7\xbc\x66\x56\x8d\x17\x1e\x35\xf6\xba\x60\x02\x81\x29\x4d\x25\x09\x27\x1a\xe5\x5f\x35\x01\xcf\x29\x37\xd3\x2e\x8c\x67\x42\x3e\x59\xe7\x6c\x28\x70\xb5\x56\xbe\xe0\x0d\x06\x86\x8e\x24\x07\xb3\xa2\x89\xdc\x64\x66\x74\xc7\x2d\x5d\x7b\x32\xec\x72\x66\x1a\x94\x4e\xbe\x3f\xc5\x6a\xf2\x99\xd2\xb4\x71\xbc\xf5\xdc\x69\x53\x87\x7e\xe5\x71\xe8\x4e\xe3\x56\x46\x51\xc9\x2b\xa5\x6f\x13\x71\x5b\x3a\x97\x89\x30\x04\x63\x58\x02\x08\xcf\xce\xfd\x37\x9d\xdb\xbe\xff\x62\xbf\x3e\x24\xb5\xf5\xda\x73\x1e\xc3\x7c\x5a\x4b\x75\xac\x0b\x62\xd2\xd8\x6c\x56\x26\xa1\x7a\xc5\x26\x1d\x9b\x94\xee\x5d\xd5\x7c\x6e\x29\xed\x89\x4a\x98\x71\xf7\xf3\x4c\xc7\x47\x82\xd8\x67\x3a\xfe\x0f\x3b\xf7\x51\xe9\x18\x27\x9d\xbf\xaf\xbf\x3c\xd2\x0e\x72\x3c\xbd\x72\x3d\xdf\xd3\xb1\x6f\x3b\x7c\x99\x45\xeb\x93\x16\xe5\xff\x34\xb8\x9a\x69\x06\xea\xa8\x08\xef\xfe\xab\x1b\xab\x75\x27\x96\x10\xe5\xed\xa7\x0f\x22\x8e\x6d\x68\xf2\xf3\xd3\x33\xbe\xfa\xf4\x77\x00\x00\x00\xff\xff\xb5\xe2\x62\x40\xe3\x23\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

