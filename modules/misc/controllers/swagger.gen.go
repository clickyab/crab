// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x82\x60\x7b\x34\x6c\x27\x58\xb4\xe8\xde\xb6\x68\x0f\x3d\xb4\x08\x92\x45\x2f\x45\x60\x8c\xa5\xb1\xc5\x8d\x44\xaa\xc3\x51\x52\x63\x91\xff\x5e\x90\xfa\xb0\x64\x53\xb2\x76\xeb\x2d\xba\xbd\x45\xe4\x23\x39\x1f\xef\xcd\x4c\xfc\x31\x8e\xe4\x16\x2c\xde\x01\x67\xf2\xad\x90\x2b\x28\x95\x5c\xc4\x91\x4c\x8c\xb6\x55\x81\x56\xbe\x15\x7f\xc4\x51\x24\xa1\x2c\x73\x95\x00\x2b\xa3\x57\x1f\xac\xd1\x32\x8e\x1e\x1d\x2e\xc5\x9d\xd2\xca\x2d\x3b\xe8\x47\x07\x4d\x8c\x66\x32\x79\x8e\xb4\xf9\x99\xc8\xd0\x3d\xda\xd2\x68\x8b\x0f\xaa\x28\x73\x6c\x50\x91\x2c\xc9\x94\x48\xac\xb0\x3d\x18\x45\x12\x1d\xbe\xfb\x0c\x62\xdc\x2a\x10\x14\xfd\x95\x48\x2a\xc6\xe1\x4a\x24\xf9\x50\xba\xc7\xa4\x65\x52\x7a\x2f\xdb\x8d\xd7\x45\x7c\x8a\x00\x22\x38\xb4\x80\x6e\x5f\x32\xfe\xc5\x83\x47\xc2\x37\xbe\xc6\x83\x73\x1d\xca\x6c\x3f\x60\xc2\x35\xca\x63\x6a\x44\x60\xdf\x6f\xf4\xc3\xf6\x9b\xa1\x02\xf2\x36\x6e\x23\x11\xbb\x70\x5d\x5a\xe8\xcd\xbb\x84\xd5\x33\x3e\x30\x70\xd5\x05\x27\xe0\xc5\xf1\xc0\x4f\xa6\x00\xa5\x27\x53\x04\xfe\xce\x5e\x8e\x42\x51\x69\x82\x21\x13\x42\x60\x4c\x37\xd0\x0b\xa4\xdc\x39\xef\xdc\x82\x4c\x81\xf1\xbd\x2a\x50\x9e\xc6\x2e\x74\x57\x8a\x36\x21\x55\x3a\xaa\x5d\x64\xc8\x43\x7d\x7e\x46\xf2\xba\x6c\xff\x0e\xb9\x4a\x83\x27\xb6\xc6\xe4\x08\xfa\x93\xf2\xdd\xd8\xdc\xbf\xb1\x03\x2a\xcd\xb8\x47\x1a\x22\x35\x14\x73\x83\x5a\x95\xe9\x3f\x0f\xea\x0c\x42\x32\x81\xb6\x1b\xfe\xe1\x47\x18\xe5\x60\x1c\xd4\xe3\x99\x1a\xc3\xc1\x3f\x8b\x60\x4f\x87\xad\xaf\x43\x0d\x7e\xb6\x2b\x95\x45\xda\x24\x19\x26\x4f\xbf\x82\xca\xef\xe0\x90\x1b\x48\xa7\x2b\x51\x01\x2a\xbf\xfa\xcb\x17\x24\xdd\x88\xa6\x22\x42\xcd\x9b\x74\x20\xc6\x31\x42\x76\xf2\xf0\xe8\xc9\x2c\x04\xb5\x72\xae\xe8\x79\xc5\x33\x24\xed\x69\x22\xce\xbb\x37\x28\xf3\x71\xeb\x83\x62\x9f\x78\xa9\xff\x56\x48\xf5\x13\xc2\x3f\x6a\x7f\x78\x4b\xb0\x02\x0c\x9d\x3a\x79\x23\x5c\x0a\x86\x47\x86\x05\x61\x5e\xec\x42\x95\xe1\xf3\x73\x72\xde\x10\x43\x7e\x4e\xaa\x78\xae\x40\x08\xf7\xca\x32\xd2\xd5\x94\xb9\x68\x2b\x93\xb5\x2f\x86\x42\x55\x38\x58\x59\x9d\x2d\x0d\xe0\x2a\xc2\xa7\x46\xef\xf7\x8d\x7f\x57\x73\x6c\x7e\x63\x61\xf3\x84\xa1\x22\xf2\x05\xfd\x8f\xfd\x9e\xcc\x8c\xf5\x9c\xbb\xb9\xfd\x7e\xb9\x5e\xae\x97\x37\x7e\xb0\x54\x7a\x67\xda\x49\x71\xa8\x75\xf9\x3e\x43\x91\x10\x6c\x05\x94\x6a\x21\xa0\x62\x23\xf6\xa8\x91\x1c\xa7\x65\xdd\x92\x14\xfb\x09\xb2\x86\xe6\x2a\x79\x3a\xc0\x76\x99\x98\x62\xe5\xcf\xbd\xbb\xfb\xa5\xc6\x3d\x23\xd9\xe6\xd2\x9b\xef\x64\x63\x4f\x09\x9c\x75\x43\xea\xca\xf9\xba\x4a\xab\xa2\x38\x74\x49\xd9\xe3\x51\x37\xa7\xb6\x79\xa4\x20\x53\x31\x2e\xc5\x3d\x16\xe6\x19\x85\x62\xf1\x92\xa1\x16\x9c\xa1\x20\x84\xbc\xde\xb6\x02\xc8\x7f\xa7\x87\x46\x65\xb2\xa5\x41\xbf\x3a\xdf\xae\xd7\xfd\xda\x7c\xf2\x5c\xa7\x4f\x69\x93\x0c\x0b\x18\x14\xec\x6f\x09\x77\x0e\xf4\xcd\xaa\x37\x7d\xaf\xc6\xe7\xc7\x91\xc1\xe5\xcd\x17\xb4\x20\x34\xf8\x9f\x98\x31\x64\x29\xec\xdb\x7f\x35\x5a\x22\xd6\xf8\xc7\xb8\xc1\xd6\xaa\xaa\xd3\xe6\x84\xb2\xf2\x4d\xf5\x28\xa8\x9a\x6c\xe1\xe4\x75\xfd\x57\xf8\xbf\x84\x3b\x2f\x94\x16\xf6\x60\x19\x0b\xb9\xe8\x8d\x31\xc8\x48\x3d\x4b\x2e\x47\xc7\x77\x68\xb9\x35\x5d\xb6\x8f\xb5\x5b\x96\x75\x39\xdb\xa4\xc0\x70\xdc\x25\xfc\xb3\x52\x84\x4e\xc1\x3b\xc8\x2d\x7e\x7a\xa0\xc3\xe3\x4c\x28\xbe\x8f\xff\x26\x03\x47\x66\x9d\x51\xfa\xbd\xf9\x4a\xe9\x47\x67\xd5\x7c\x8a\x7c\x5f\x29\xbd\x4e\x5b\xf2\x7f\x83\x5d\x67\x0d\xf5\xff\x51\xdb\xda\x0e\x45\x26\xad\x92\xcb\x3f\xba\x78\xab\x8f\xb0\x8c\xb9\xec\xb6\x5e\x60\xbf\xf7\xd4\x94\xb7\xcb\xb5\x8c\x5f\xff\x0e\x00\x00\xff\xff\x5a\x4c\xac\x30\xe2\x11\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

