// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x4d\x6f\xdb\x38\x10\x3d\x4b\xbf\x82\xe0\xee\x31\xb0\x9c\x6c\x80\x45\x73\x6b\xd1\x1e\x7a\x68\x11\x24\x41\x2f\x45\x60\x8c\xa5\xb1\xc5\x44\x24\xd5\x21\x95\xd4\x08\xf2\xdf\x0b\x52\x1f\x96\x6c\x4a\x76\xd2\x0f\xa0\x37\x8b\x7c\x24\x87\x6f\xe6\x3d\x8e\x9f\xe2\x88\x2f\xc1\xe0\x25\xd8\x9c\x5f\x30\x9e\x40\x29\xf8\x49\x1c\xf1\x54\x2b\x53\x49\x34\xfc\x82\x7d\x8d\xa3\x88\x43\x59\x16\x22\x05\x2b\xb4\x4a\xee\x8c\x56\x3c\x8e\x6e\x1d\x2e\xc3\x95\x50\xc2\x0d\x3b\xe8\x93\x83\xa6\x5a\x59\xd2\x45\x81\xb4\xf8\x40\xa4\xe9\x0a\x4d\xa9\x95\xc1\x6b\x21\xcb\x02\x1b\x54\xc4\x4b\xd2\x25\x92\x15\xd8\x2e\x8c\x22\x8e\x0e\xdf\x7d\x06\x31\x6e\x14\x08\x64\x7f\x24\xe2\xc2\xe2\x70\x24\xe2\x76\x53\xba\xc3\xb8\xb1\x24\xd4\x9a\xb7\x13\xcf\x27\xf1\x2e\x02\x88\x60\xd3\x02\xba\x79\x6e\xf1\xbb\x1d\x1c\x12\xde\xf1\x39\x1e\xac\xeb\x50\x7a\x79\x87\xa9\xad\x51\x1e\x53\x23\x02\xf3\x7e\xa2\x4f\xdb\x67\x4d\x12\x8a\x96\xb7\x11\xc6\x0e\x6c\x97\x49\xb5\x78\xaf\x25\x08\x35\xc9\x38\xa4\x56\x3c\x60\x8f\xf2\x76\x3f\xa1\x2c\xae\x91\x9a\xf8\xeb\xcb\xf1\x94\x10\x2c\x66\x0b\xe8\x11\xc3\x57\x2e\x5a\x37\xc0\x33\xb0\x78\x23\x24\xf2\x5d\x2e\xfa\x8c\xb5\x7b\x65\x68\x52\x12\xa5\x2b\x9d\x83\x19\xbf\xae\xd7\x1f\x91\x8c\x2e\x7b\x5f\xa0\x10\x59\x70\xc5\x52\xeb\x02\x41\xbd\x28\x7f\x4d\xcc\xfd\x1d\xa7\x99\x52\x20\x43\xac\x86\x88\xa8\xca\xec\xe7\x49\x3d\xa2\xc0\x2c\x81\x32\x0b\xfb\xe6\x1d\x8c\xd6\x54\x1c\xd4\xd7\x9e\xba\xc2\xe4\xef\x31\xd8\xd3\x55\x7b\xd7\xa1\xa6\x5e\x7d\x95\xca\x20\x2d\xd2\x1c\xd3\xfb\x4f\x20\x8a\x4b\xd8\x14\x1a\xb2\x69\x67\x91\x20\x8a\x5f\x7e\xf2\x01\x89\x36\xa2\xa9\x88\x50\xd9\x45\x36\x50\xe3\x58\x41\x76\xf2\xf0\xe8\xc9\x2c\x04\xb5\xb2\x2f\xe9\xd1\x5a\x1d\xba\x61\x48\xdb\xd3\x95\x78\x9c\xcb\x06\x75\x3e\x1e\x7e\x50\xed\x13\x27\xf5\xcf\x0a\xc9\x7e\x42\xf9\x5b\xf1\x0f\x77\x09\x5a\xc0\xf0\x52\x3b\x67\x1c\xc3\xef\xd0\x11\x8e\xe3\x2e\x64\x0d\xaf\xcf\xc9\xfe\x0b\x17\xba\xe7\xa4\x8c\xa7\x15\x12\xfb\x39\x9e\x6b\xe3\x63\x3b\x3d\xfb\x7f\x36\x9f\xcd\x67\xa7\xbe\xa3\x10\x6a\xa5\xdb\x16\x61\x58\x13\xfc\x26\x47\x96\x12\x2c\x19\x94\xe2\x84\x41\x65\x35\x5b\xa3\x42\x72\x77\xe7\xb5\x77\x09\xeb\x5b\x87\x1a\x5a\x88\xf4\x7e\x03\xcb\x59\xaa\x65\xe2\xd7\xbd\xbd\xfc\x58\xe3\x1e\x90\x4c\xb3\xe9\xe9\x7f\xbc\x89\xa7\x04\x9b\x77\xdd\x49\xe2\x14\x9c\x64\x95\x94\x9b\x4e\xb5\x6b\xdc\xf2\xbb\x1b\x9b\x47\x32\xd2\x95\xc5\x19\xbb\x42\xa9\x1f\x90\x09\xcb\x1e\x73\x54\xcc\xe6\xc8\x08\xa1\xa8\xa7\x0d\x03\xf2\xdf\xd9\xa6\xc9\x06\xa7\xc6\x1f\xfa\x32\x3e\x9b\xcf\xfb\x22\xde\x39\xae\xcb\x23\x37\x69\x8e\x12\x06\xca\xfe\x97\x70\xe5\x40\xff\x24\xbd\xb6\x2b\x19\x6f\x1c\x46\x5e\xb8\xf3\xdf\x18\x41\xa8\xe3\xdb\x09\x63\xf8\x20\xc0\xba\xed\x31\xa3\xc6\x5e\x6b\xfc\x6d\xdc\x60\x6b\xdf\xad\xd3\xe6\x4c\x3c\xf1\xee\xbb\x75\xdc\xba\xd8\xc2\xc9\xeb\x8c\x9a\xf9\x5f\xcc\xad\x67\x42\x31\xb3\x31\x16\x65\x9b\x25\xff\xde\xa1\x45\xea\x45\x72\x98\x1d\x6f\xe5\x7c\xa9\xbb\x6c\x6f\x35\xce\xcb\xfa\x45\x5a\x64\x60\x61\x3b\x4b\xf8\xad\x12\x84\xce\x3a\x56\x50\x18\x7c\x39\xd1\xe1\x77\x2f\xc4\xef\xed\x9f\xac\xc0\x91\x47\x71\xb4\xfc\xce\xff\xa6\xf2\x6b\x4d\x84\x74\x56\xa5\x87\xff\x10\xf9\xa8\xb7\xb0\xdc\xda\xb2\x9b\x7a\x84\xb5\x7b\x1c\x2e\x18\x3f\x9b\xcd\x79\xfc\xfc\x23\x00\x00\xff\xff\x71\xa5\xfb\xc1\x7e\x0d\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

