// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6f\xdb\x36\x10\x7f\x96\xff\x0a\x42\xdb\x63\x10\xbb\x69\xb0\x61\x05\x0a\xac\xed\x8a\xa1\xd8\x47\x83\xa6\xdb\xcb\x5a\x08\x34\x75\xb6\xd8\x50\xa4\x46\x52\xe9\xbc\x20\xff\xfb\x40\xea\xc3\xfa\xa0\x64\x39\x71\xec\x38\x53\x9f\x6a\xe9\x48\x1d\xef\x8e\xbf\xdf\x1d\x3f\x72\x33\xf1\xfc\x39\x56\x70\x81\x75\xe4\xbf\x40\xfe\x14\x27\xd4\x3f\x99\x78\x3e\x11\x5c\xa5\x31\x28\xff\x05\xfa\x6b\xe2\x79\x3e\x4e\x12\x46\x09\xd6\x54\xf0\xe9\x17\x25\xb8\x3f\xf1\x3e\x1b\xb9\x10\x16\x94\x53\xf3\xd8\x88\xde\x58\x51\x8c\x83\x9f\x81\x87\x20\x3f\xae\x12\xc8\x9f\x7a\xbe\xce\x7e\xf8\x4a\x4b\xca\x97\xfe\xc4\xf3\x6e\x4f\x8c\x38\x11\x5c\x4b\xc1\x18\xc8\xe0\xad\x94\x42\x7e\x00\x95\x08\xae\xe0\x92\xc6\x09\x5b\x37\x4f\xa4\x48\x40\x6a\x0a\xc5\x77\x3c\xcf\x07\x23\x5f\xfe\x74\xca\x98\xa7\x58\xe2\xb8\xfa\xc4\xf3\xa9\x86\xfa\x13\x97\x7a\xf6\x9f\xd5\xb1\x2e\x81\xa5\xc4\xab\x42\xa0\x7c\xef\x6b\xf8\x47\xd7\x3e\xe2\xee\xf1\x76\x52\x6b\x57\x4a\x89\xf9\x17\x20\x3a\x93\xb2\x32\x99\x84\xe3\x7d\xcb\x6c\xbf\x0b\x19\x63\x56\xd8\xad\xc3\x62\x1b\xba\x0b\x63\x1e\xbc\x22\x9a\x5e\xc3\xa5\xc6\x3a\x55\x1b\xdd\x66\x1a\xfc\x24\x62\x4c\x79\xaf\x8b\xb0\xed\xb3\xe2\x23\x97\x55\x72\x63\xf8\x44\x02\xd6\x10\x06\xb8\x62\x48\x7f\x61\x46\x67\x1e\xf8\x21\xd6\xf0\x91\xc6\xe0\x37\x6d\xe7\xea\x2b\x04\x45\x24\x4d\x4c\x64\x6e\x8c\x90\xcb\xac\xfd\x00\xe7\x95\xde\xfe\x13\x33\x1a\x3a\x5b\xcc\x85\x60\x80\xf9\x56\xfe\xce\x75\xae\xf6\x58\x0a\x52\xae\x61\x09\xb2\x2e\xc9\x71\x3c\xd4\xa8\x69\x12\xde\xdf\xa8\x03\x02\x92\x89\x0c\x1e\x82\x37\x22\xe5\x5a\xae\x7a\xc3\x62\xb7\x23\xdd\x46\xbb\x0b\x29\xae\x29\x27\xfd\xc0\x42\xb2\x21\x04\xc3\xd5\x3c\xdc\x80\x32\x5d\x2b\xea\x37\xd0\xcd\x19\xf3\x35\x7d\x3b\x14\x5e\xc7\x6c\x5d\xe5\x8e\xc9\x71\x5b\x1b\xa5\x23\xcc\x1b\x03\x2a\x61\xb4\x31\x9e\x24\x77\xd0\x76\xe3\x71\x79\x6c\xe3\xb8\x1e\x9d\x11\xb4\xc4\x5c\x05\xfa\x87\xd7\xb8\x13\xc7\x73\x1b\x34\x38\xad\xc5\x68\x1d\xea\x35\x27\x79\x85\xcb\x4a\xa5\x6b\x3c\x76\xe7\xf8\x4c\x15\xc8\x80\x60\xc6\x5e\x63\x72\xd5\x3b\x16\x0e\x5f\x83\x04\x2b\xf5\x55\x48\xd7\x24\x72\x61\x9a\x16\x57\xc0\x77\xa6\x64\x04\xe4\xea\x37\x4c\xd9\x05\x5e\x31\x81\xc3\xfe\x94\x23\xc6\x94\xed\xfc\xcb\x1b\xb8\x3b\x07\xa5\x54\x4a\xe0\x3a\x08\x6b\xac\xdb\xc5\x3c\x25\x0f\x5a\xe9\xde\x50\x71\x92\x62\x9b\xba\x87\x65\x49\x2e\x0e\xef\x67\x9c\x61\xfd\x3a\xf9\xbc\x5b\x7b\x27\xab\xf7\x7c\xa9\xfa\x2d\x17\xbd\xf7\x30\xfc\x9a\xe4\xeb\xbd\x38\xa9\xbe\x3e\xa8\xc6\x37\x3a\x20\xa8\xd6\xa4\x01\x43\x83\x6c\xe7\x4a\x01\xee\xee\x93\x49\xa3\x7f\xf7\x38\x7b\xa1\x66\xe8\x04\x59\x08\xb9\x04\xbd\xbf\x09\xc9\xc4\x92\xf2\x9d\xc1\xc0\x49\x81\xd5\xc3\xb0\x6d\xa8\x92\x09\x48\x25\x38\x1e\x04\x57\x38\x0c\x25\x28\x35\x34\xff\x06\xc6\x92\x48\xf0\xc1\xf9\x3a\xd5\xdb\xe4\x48\x0b\x2a\x95\x0e\xb6\x48\x5d\x97\xb6\x8a\x1c\x28\xcc\xf0\x76\x9d\x0f\x1a\xe8\x50\x9f\x48\x58\x52\xa5\x41\x0e\xf1\x09\x11\x71\x82\xf9\x6a\x1b\x5d\xb7\x09\xb7\xad\xad\xbc\xad\xe1\x62\x31\xa7\x6c\xb0\x95\xb7\x23\x76\x6b\x4c\x5d\x59\x36\xb8\xbf\x63\x32\x66\xfd\xd5\xcc\xec\xf7\xbf\x6c\xa8\x55\x6d\x16\xb9\xb1\x5c\x24\x42\x26\x42\xe2\x26\x15\x75\x31\x51\x7b\x12\xf6\x49\x77\x11\x57\x0f\x73\xd5\xa8\xcb\xcd\x5d\x7d\xe4\x55\x61\xaf\x3a\x09\x76\xf0\x57\x8d\xe3\x1c\x90\xf1\x94\x46\xd7\x04\xb8\x0d\x63\x7b\xc7\xf5\x77\xe7\x9d\xca\x35\x59\xfd\xc0\x63\x73\x27\x6a\x1b\xb2\x82\x6e\x47\x55\xfb\x06\x22\xb8\x88\x29\x09\x88\x08\x9f\x66\x64\xb8\x50\x76\xb0\x79\x1c\x88\x3b\xb8\xed\x1d\x9b\x3d\xdd\x39\x5a\x50\xef\xd3\x8d\xb5\x8e\xf4\x7d\x27\x33\xd5\x92\x64\x0b\xe1\x3a\x11\xab\x1c\x86\x63\x5d\xbc\x3e\x84\x75\x79\xd0\x48\x5e\x06\x2c\xae\x76\xac\xac\x36\xb4\x59\xcb\x17\x19\xf1\xc8\xc6\x23\x1b\x57\xd4\x18\xd9\x38\xef\xe2\x3e\x5c\xd5\xac\xc1\x06\x37\xbc\x0f\xc9\x3d\xdd\x18\x3e\x72\x2c\x77\xd4\x67\xf7\xdb\xe9\xdc\xdd\x82\xee\xc4\xbe\xf3\x23\xa1\xac\x15\x9f\x9d\x7d\x7f\x3a\x3b\x9d\x9d\x3e\xb3\xdb\xd9\x94\x2f\x44\xde\x7d\x63\x25\xd1\xff\x18\x01\x22\x12\xcf\x11\x4e\xe8\x09\xc2\xa9\x16\x68\x09\x1c\xa4\x71\x93\x9f\xad\xca\x53\x6d\xeb\xdd\x4c\x94\x51\x72\xb5\xc2\xf3\x53\x22\xe2\xa9\x6d\xf7\xea\xe2\x5d\x26\x77\x0d\x52\xe5\x9d\x3e\x3f\xf7\x73\x7d\x12\xac\xa3\x72\x6b\x7c\x5a\xec\x72\x4c\x09\x35\x91\x3c\xbd\x29\x77\x3b\x02\x1a\xde\x96\xd5\x69\x65\xd1\xab\xa5\xaf\x5f\x56\xd6\x12\xc7\xa0\x41\x16\x7b\xf4\x9e\xe7\x95\x25\xaa\xbb\x8d\xa1\x56\xfb\xdb\x28\xb5\x7e\x96\x4f\x52\xbf\xaa\xcb\xfa\xad\x84\xbf\x53\x2a\xc1\x84\x95\x96\x29\xb4\x56\xfd\x1c\xfb\x1f\x9f\x73\x15\x8b\xe2\xbb\xba\xfe\x74\x36\x9b\x55\x6b\xe9\x4e\x45\x15\x89\x20\xc6\xb5\x30\xfb\x56\xc2\xc2\x08\x7d\x33\xad\x9c\x3a\x98\x3a\x36\x8e\x3a\x02\xf0\x7c\xd7\x9f\xde\x70\x74\xa1\x53\x8d\xf3\x43\xaa\x51\x9f\x77\x78\x59\x09\x9f\x72\x13\x2e\x6b\xf3\x79\x92\xcb\x67\xeb\x29\x95\xe0\x6d\x6d\x39\x0e\x09\xd8\xfd\x46\xc3\x5a\xc7\xdd\x8f\xbf\x8c\xb4\xe9\xcd\x7a\xdf\xf1\xd0\xb3\xb7\xb2\x03\x3a\xce\xdd\x71\xee\x36\x62\x37\x4d\x98\xc0\xe1\xf4\x26\x16\x61\xca\x60\x1d\xab\x49\x46\x97\xee\x60\xfd\xc3\x36\x42\x94\x6b\x81\x74\x04\x48\xad\x94\x86\xf8\xe1\x42\x38\x53\xee\xae\xe1\x7b\xd2\xaf\x82\x1d\x00\x90\x54\x52\xbd\x42\x36\xdf\x38\x41\x4b\xd0\x88\x6a\xb4\x90\x22\x46\x76\xef\x07\x49\x91\x6a\x68\x6a\x1b\x01\x36\x39\x70\x4b\xdf\x2c\x6b\x79\xa8\xd9\x76\x3e\x7b\xd6\x13\x6b\x2b\x91\x22\x2c\x01\x71\xa1\x4d\xd2\x12\x09\x49\xff\x85\xb0\x37\x02\xbb\x2a\xe2\xc6\x31\xba\x3e\x59\xe7\x71\xba\xcc\x52\xad\x23\x75\xdd\x63\xf7\x6a\x0e\x6b\x48\xd6\x8e\xd7\xb5\xe4\x5a\xc7\xec\x36\x7c\x65\xeb\x5c\x7d\xd2\x92\x5e\xe7\x7f\x5c\xe8\xc0\x61\xeb\xce\xb4\xb9\x05\x1e\xcf\x7b\x1c\xba\x10\x72\x4e\xc3\xd0\x84\xa5\xf1\x6d\x84\xaf\x8d\x73\x11\x26\x04\x94\x42\x11\x48\x18\x9d\xfb\x90\xce\x2d\xed\x3f\xd8\xaf\x7d\x68\xbc\xc6\x75\xd5\x01\xc8\x0a\xe4\xd4\x62\xce\x30\x2c\xce\xe0\xc9\xb4\x42\x94\xef\x10\x89\xe7\x22\x5c\x39\x4a\x81\x6c\x1f\x33\x08\xb1\xc6\x4e\x80\x5b\x60\xa6\x60\x7b\xba\x6b\xef\xb2\xbb\x6c\xba\xd7\x1c\xc4\xb9\x4d\xf8\xd8\xb3\x90\x3e\x20\x39\x68\x16\x62\xac\xd9\x1f\xf0\x22\xd5\x83\x32\x65\xc2\x84\x82\x4b\x50\xa6\xa4\x46\xf6\x87\x42\xf9\x11\x28\xa4\xb2\xc7\x77\x89\xff\xa3\x4b\x03\x76\x1e\xf0\xdd\x27\xc7\x3b\xc3\x6d\x4c\x44\x5a\x72\x63\x22\x32\x3a\xf7\x61\x9c\xbb\xdb\x44\x64\x10\x20\x4f\x2d\xbe\x0a\x1d\xad\x57\xfa\x37\x63\xf3\x2b\xc6\xde\x9b\x16\x0d\x8c\xc6\x8c\x21\xb1\x40\x84\x51\xe0\x5a\x15\x50\xad\xd0\x3c\xd5\x25\x7e\x0b\x0e\x23\x76\x8f\xd8\xfd\xbf\x9c\xde\x23\x76\x3f\x61\xe7\xee\x15\xbb\x63\x4c\xd9\xd4\xde\x21\x18\x56\x42\x96\xd7\x0d\x90\xfd\x1f\x32\xed\x8f\xbe\x98\x6c\xdd\xde\x70\xd9\x77\xff\x05\x65\xfb\x6a\xc7\xee\xfc\x5e\x9c\xa9\x9d\x12\xcc\xd8\xbc\x76\xbd\x26\xed\xf6\x7e\x76\x96\xfe\x4d\x7e\x23\x07\x51\x65\x97\x74\x53\xc9\x10\x11\x31\xe5\xcb\x8c\x42\x95\xa1\x67\x7b\x62\x07\x7d\xd2\x9f\xf4\x8f\x1f\x0c\x99\xa2\x1b\xfb\xc3\xc8\xbe\x44\xed\xcf\xdb\x97\x31\xe8\x48\x84\xe8\x25\x4a\x52\x8d\x72\x8f\xa3\x97\xa8\xb8\x01\x64\x65\xce\x66\x33\xf3\xa8\xe4\xb0\xd3\x3a\x87\x59\x99\xf3\xa6\x8c\xa3\x20\x45\xb7\xc7\x1a\xac\xc5\x7d\xa8\x83\x07\xe9\x1d\x12\x89\x83\x2e\x7d\xec\x62\xba\x34\x6f\x93\xf4\x61\x65\x26\x7b\x51\x9c\x5e\x3f\xce\x70\xcb\x07\x3c\x06\xdb\x1e\x83\xad\x71\x14\xb1\x17\x92\xdf\x86\x54\x5f\xe4\x0d\xb2\xb2\x05\x2d\x84\x44\x10\x52\x8d\x8a\x8e\x50\x22\xc5\x82\xb2\x27\x51\x2f\x6d\xd8\xa1\x7b\x04\x33\xa6\x79\xb7\xea\xe0\x53\xe7\x28\x57\xa7\xc7\x92\xb3\x25\x37\x96\x9c\xa3\x73\x1f\xc6\xb9\x7b\x2d\x39\x93\xca\x41\xdb\xde\x15\xc2\x6c\x5d\xd1\x54\x19\x86\xd1\x0c\x11\xe5\x4f\x2c\xf1\xdc\xef\x30\xc9\x63\xa3\xb5\xc7\xce\x0a\x23\x1c\xb7\xe4\x46\x38\x1e\x9d\xfb\x30\xce\xdd\x2b\x1c\x17\x77\xdf\x86\xd5\xb4\x47\x5a\xc5\x36\xef\xd6\xbb\xcc\xf7\x88\xd1\xf7\xa8\x2a\xd9\xe2\xd2\x82\x14\x61\x4a\x36\xff\xf5\x3f\xab\xf5\x5a\x2c\xd2\x3a\x29\x5f\x7d\xc5\xcb\xa5\x8d\x4c\xff\xec\x74\xe6\x4f\x6e\xff\x0b\x00\x00\xff\xff\xc8\xd1\x8c\x22\x6b\x50\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

