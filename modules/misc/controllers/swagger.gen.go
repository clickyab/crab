// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdb\x36\x10\x7f\x96\x3f\x05\xc1\xed\x31\x88\xdd\xac\xdb\xb0\xbe\x75\x58\x31\x14\xdb\xb0\xa0\x49\xf7\x32\x04\x06\x2d\x9d\x25\x36\x12\xa9\x91\xa7\x74\x5e\x90\xef\x3e\x90\xfa\x63\xfd\xa1\x68\x25\x71\x93\x78\xf3\x5e\xd6\xd2\xc7\xe3\x1d\xef\x7e\xbf\xbb\xa3\x7a\x3b\x0b\xe8\x8a\x69\x38\x67\x98\xd0\x37\x84\xce\x59\xce\xe9\xc9\x2c\xa0\xa1\x14\xba\xc8\x40\xd3\x37\xe4\xcf\x59\x10\x50\x96\xe7\x29\x0f\x19\x72\x29\xe6\x9f\xb4\x14\x74\x16\x5c\x19\xb9\x08\xd6\x5c\x70\xb3\x6c\x44\x6f\xad\x28\x63\xcb\x9f\x41\x44\xa0\x2e\x37\x39\x54\xab\x01\xc5\xf2\x2f\x54\xa3\xe2\x22\xa6\xb3\x20\xb8\x3b\xa9\xc5\x3f\x6a\x50\xe7\xa0\xb4\x14\x2c\x6d\x36\xe4\x4a\xe6\xa0\x90\x43\xad\xd9\x08\x47\x91\x02\xbd\x5d\x70\x4a\x05\x01\xbd\x28\x0f\xd9\xae\xb8\xce\x37\xff\x59\x1b\xec\xef\x7f\xb0\x94\x47\xce\x1d\x2b\x29\x53\x60\xa2\xd9\x32\xeb\xec\x6c\xc4\xe4\xea\x13\x84\x58\x4a\x55\x3f\xd2\x10\xd2\x34\x4f\xa4\x80\xc3\xb1\x98\xe3\x66\xd9\x56\x3b\x62\xef\x7b\x81\xdf\xbd\x76\x1e\xce\x05\x42\x0c\xea\xa9\xec\x55\xc0\x10\xa2\x25\xc3\x96\xc9\x6b\xa9\x32\xbb\x40\x23\x86\x70\xc9\x33\xa0\x7d\x5d\xed\x4b\xad\x75\xad\xb9\xd2\xb8\x14\x2c\x3b\x9c\x70\xc5\x16\x68\x2d\x73\x7d\xfe\xa5\xec\xd0\xdc\x3b\x2c\xec\x14\x79\xb4\xb7\x5c\x2c\x34\xa8\x2e\x0e\x9d\xf8\xb2\xe6\x95\x7b\x1c\xa6\x95\x0c\x1b\x4a\x81\x4a\xa6\x29\xa8\xe5\x3b\xa5\xa4\xfa\x00\x3a\x97\x42\xc3\x05\xcf\xf2\x14\xbc\x7c\x0b\x46\x7e\xe7\xfd\xe7\x4c\xb1\x4c\x77\x6e\x93\x23\x74\x57\xc6\x42\xb2\x8d\xc9\x56\x82\x29\xc5\x36\xc3\x98\x21\xfc\x8d\x53\x82\x3c\x25\x62\x13\xae\x2d\xca\xc4\xf2\x6d\x88\xfc\x06\x2e\x90\x61\xa1\x77\x56\x32\xb3\xe1\x27\x99\x31\x2e\xfc\x35\xcc\xea\x9c\x08\xd9\x7d\xd2\x5b\x04\x3a\x54\x3c\x37\xc5\xfa\x60\x20\x35\x01\x01\x95\x64\x8f\xd7\xbc\xd8\xda\x07\x4e\x27\x64\x10\x2a\x26\xf4\x12\x7f\xf8\x91\x69\x3f\xcc\xfa\x00\x1a\xc0\xc7\x7d\xf9\x83\x1b\x6c\x01\xa7\xf6\xb5\x0b\x9a\x07\xbb\x62\xe9\x28\x4c\x20\xbc\xfe\x8d\xf1\xf4\x9c\x6d\x52\xc9\x22\x3f\x75\x64\x8c\xa7\x7b\x3f\xb9\xe6\x2e\xef\xd1\x61\xa1\x14\x08\x5c\x46\x1d\x30\x8e\x25\x64\x03\x0f\x2b\xed\x8d\x82\x13\x2b\x43\x44\x4f\x63\x3b\x17\xb4\xfd\x89\x38\x4d\xaf\x13\xe6\xe3\xd6\x3b\xc1\xee\x39\xa9\x7d\x96\x0b\xf5\x1e\xe0\x6f\xb1\xdf\xd5\xe2\x64\x80\xae\x53\xbd\x33\xc6\x9a\xcd\xf6\x96\x2e\x21\x4c\xbb\x3b\x17\x33\x3c\x3c\x26\xc3\x0a\xe6\xf2\xd3\x8b\xe2\xa9\x00\xc9\xab\xe9\x69\x0a\x32\x87\x43\x94\xb7\x02\x39\x46\x18\xaf\xfc\x60\x80\xf0\xd2\xb6\xb3\xe7\xf6\xe9\x7f\x74\xc7\xeb\x93\x9f\xe4\xe8\xd4\x98\x28\x88\xb9\x46\x50\x7b\x63\xcb\xda\x48\xa6\xf5\x67\xa9\x5c\x57\x3c\xda\x49\x62\x6b\x14\x7f\xbc\x5f\x25\x07\xff\x2a\x63\x2e\x7e\xff\x65\x6f\x7e\x4d\x4f\x1a\x94\xd7\xe0\xe2\xf5\x27\x75\xff\x43\x15\xde\xff\x87\xff\x33\xfb\x1b\x4d\xa4\xb6\x34\xf8\xea\xec\xfb\xd3\xc5\xe9\xe2\xf4\x95\x7d\x2d\xe2\x62\x2d\xeb\xe7\x9f\x6e\xf9\xa1\x97\x09\x90\x50\xb1\x15\x61\x39\x3f\x21\xac\x40\x49\x62\x10\xa0\x0c\xcd\xd2\xb2\x4b\xe2\x68\xa7\x90\x52\x34\xe5\xe1\xf5\x86\xad\x4e\x43\x99\xcd\xed\xbe\xb7\xe7\xef\x4b\xb9\x1b\x50\xba\x52\x7a\xf6\x2d\xad\xec\xc9\x19\x26\xcd\xcb\xd3\xbc\xc8\x0d\xd0\xe6\xb7\x99\x8c\x8a\x14\xee\xb6\x91\x29\xad\xae\x62\xd2\xb3\xf0\xa3\xdd\x44\xb8\x40\x49\x30\x01\xa2\x37\x1a\x21\xa3\x27\xad\xd6\x0c\x10\x54\xfd\x14\x16\x04\x41\xd3\x0f\xf4\x34\x35\x35\x81\xda\xae\xc3\x1a\xb7\x5d\xab\x68\x88\x96\xc6\x6d\xd7\x15\xfc\x55\x70\x05\x26\xf8\xa8\x0a\x18\x14\x0b\x67\xcb\x37\x66\x82\x75\x00\xc2\x42\x71\xdc\x10\x9b\x26\x27\x24\x06\x24\x1c\xc9\x5a\xc9\x8c\xa4\x06\xb3\x44\xc9\x02\xa1\x6f\x6d\x02\xcc\x10\xeb\xc0\xde\x32\xd9\x1e\x68\xae\xfd\xdf\x55\x75\x97\x35\x72\xda\xa5\xe7\xf5\xe2\x55\xbb\xc3\xea\xb9\xb3\x91\x05\x61\x0a\x88\x90\x68\x72\x27\x91\x8a\xff\x53\xe5\x8d\x15\xd7\x61\x02\x19\xeb\x34\x63\x23\x5d\x4e\x7f\x94\xf5\xc9\x3a\x47\xda\xc0\xd5\x11\xfa\x7c\x0f\x3a\x01\xeb\x49\x76\x46\xdc\x81\xdc\x60\xd4\xdd\x71\xca\xdd\x48\x73\x36\xd2\x57\x6d\xe5\xdb\xc3\x77\x0d\x43\x21\x71\xe9\xb8\xeb\x31\x6d\xfd\x69\xee\xf5\xe2\x1b\x4f\x40\xd7\x52\xad\x78\x14\x99\xb4\x34\xb1\x4d\xd8\x8d\x09\x2e\x61\x61\x08\x5a\x93\x04\x14\x1c\x83\xfb\x25\x83\xdb\xdc\xff\xe4\xb8\x76\x0b\x0f\x8b\x5b\x3c\xd8\x7a\x59\xd2\xe5\xb6\xab\x59\xb5\xa5\xac\x97\x73\x53\x7c\xe6\xa6\x04\xce\xed\x04\x37\x8d\x90\x9b\x61\x8f\xd8\x3f\x11\xb3\x9f\x70\xb1\x47\x62\x5e\xc9\x68\x33\x24\xba\xbc\xec\xd3\x96\x11\x43\xe6\xe4\xbb\x35\x4b\x35\xf8\xd2\xf3\x6b\x05\x6b\xa3\xe9\xab\x79\xeb\xbb\xc8\xdc\x3d\x3b\xbb\xae\xd9\x47\x94\x67\x8b\x85\x07\x57\x5e\xd4\x4c\x31\xab\x19\xac\xef\x11\x7e\xa3\xc1\x13\xf7\x7c\xf0\x45\xa7\x18\x0f\xfa\xbb\x88\x63\xfd\x09\xa8\xac\x4f\x64\x2d\x15\x81\x88\x23\xa9\x15\x91\x5c\xc9\x35\x6f\x6a\xe7\xbd\x52\xe0\xa5\x15\xc6\x1d\x75\xfc\x05\x64\x6c\x7f\xa4\x7c\xf6\x84\x1d\x7c\x29\x1c\xad\x40\x7b\x3e\x78\xc7\x03\xfa\xa8\x19\xc7\xce\x66\x20\x77\xec\x6c\x8e\xc1\xfd\x32\xc1\xdd\x6f\x67\xb3\xab\xb4\xb5\xde\x4b\x69\x0c\xe3\x65\x2d\x95\xb1\x2c\x90\x70\x6d\xab\x99\x29\x42\xd5\x8a\x2d\x3a\x8f\x1b\x37\x5f\x5a\x49\x7b\xa6\x16\xa6\xff\x1c\x75\xa4\xe3\x03\x41\xec\x91\x8e\xff\xc3\xc1\x7d\x52\x3a\x56\x83\xa7\x58\xdf\x7c\x79\xa0\x13\x64\xff\x73\x82\xeb\xfa\x9e\x8f\x7d\x9b\xd7\xf0\x51\xb4\x3e\x6b\x53\x7e\xdf\xe4\xaa\x9f\x97\x95\x8c\x8a\x70\xf7\x3f\x83\xb4\x56\x6f\xc5\x12\xc4\xbc\xf9\xe9\x33\x8b\x63\x9b\x9a\xf4\xec\x74\x41\x67\x77\xff\x06\x00\x00\xff\xff\x7d\x76\x05\x11\x74\x29\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

