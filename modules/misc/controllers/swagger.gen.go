// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5f\x8f\xdb\xb8\x11\x7f\x96\x3f\x05\xa1\xf6\x71\xb1\xde\xe4\x16\x57\xf4\x80\x00\xcd\xa5\x87\xe2\xd0\x3f\xb7\xb8\xe4\xfa\xd2\x0b\x0c\x5a\x1a\xdb\xbc\x50\xa4\x4a\x52\x49\xdd\xc5\x7e\xf7\x03\xa9\xff\x12\x49\xc9\x1b\xaf\x6d\x19\xca\x53\x2c\x0d\xa9\x21\x67\xf8\xfb\xcd\x0c\xc9\xe4\x71\x11\x84\x6b\x2c\xe1\x01\xab\x5d\xf8\x1d\x0a\x97\x38\x25\xe1\xcd\x22\x08\x23\xce\x64\x96\x80\x0c\xbf\x43\xff\x59\x04\x41\x88\xd3\x94\x92\x08\x2b\xc2\xd9\xf2\x37\xc9\x59\xb8\x08\x3e\x6a\xb9\x18\x36\x84\x11\xfd\x58\x8b\x3e\x1a\x51\x8c\x57\x7f\x03\x16\x83\xf8\xb0\x4f\xa1\x78\x1a\x84\x2a\xff\x11\x4a\x25\x08\xdb\x86\x8b\x20\x78\xba\x29\xc5\x7f\x91\x20\xde\x71\x91\x72\x61\xbe\x50\xb5\x49\x05\x4f\x41\x28\x02\x65\xe7\x5a\x3e\x8e\x05\xc8\xfa\x81\x55\x2a\x08\xc2\xf7\xf9\x77\xea\x27\x36\x15\xf4\x1f\xa3\x86\x79\xff\x6f\x4c\x49\x6c\x6d\xb1\xe6\x9c\x02\x66\x55\x93\x45\xab\x65\x25\xc6\xd7\xbf\x41\xa4\x72\xa9\xe2\x65\x18\x01\xa5\xe9\x8e\x33\x98\x8e\xc6\x44\xed\x57\xcd\x6e\x1d\xfa\xfe\xc8\xd4\xb7\xf7\xd6\x8f\x13\xa6\x60\x0b\xe2\x54\xfa\x0a\xc0\x0a\xe2\x15\x56\x0d\x95\x37\x5c\x24\xe6\x41\x18\x63\x05\x1f\x48\x02\x61\xb7\xaf\xe6\xa4\x96\x7d\x41\xc4\x19\x4f\x48\xb4\x8a\x78\x3c\x1d\x8b\x6d\x88\x90\x6a\xc5\x70\x32\x1d\x95\x29\x9e\x9a\xc6\x93\x52\x76\x5a\x88\x23\x60\x4b\xa4\x02\x31\xad\x55\x97\xa5\xf1\xd1\x70\x27\x93\x20\xda\x98\x6b\xc5\x52\xa3\x5e\xde\xc6\xa2\x5a\x4e\xa8\x11\x67\x4a\x70\x4a\x41\xac\x7e\x10\x82\x8b\x9f\x41\xa6\x9c\x49\x78\x4f\x92\x94\x82\x97\x5b\x41\xcb\x0f\xce\x7f\x8a\x05\x4e\x64\x6b\x36\x89\x82\xf6\x13\x97\x49\x6a\x9b\xd4\x12\x58\x08\xbc\xef\xdb\x4c\xc1\xff\xd4\x18\x23\x8f\xb1\xd8\x61\xd3\xf6\x2f\x6d\x43\x5a\xce\x9b\x63\xc6\x06\xba\x8b\x13\xb6\x7a\x1b\x29\xf2\x19\xde\x2b\xac\x32\x39\x18\x07\xe9\x06\x7f\xe5\x09\x26\x03\xe1\x8f\xe9\xd3\xe2\x27\x36\xaf\x3a\x26\x33\xc6\x20\x23\x41\xd2\x66\x7c\x76\xf1\x2b\x74\xc4\x82\xb2\x83\xbb\x77\xa9\x1e\x63\xd9\x8f\x70\x48\xca\xf3\x78\x7b\xf5\x8e\x67\x4c\x89\xbd\xd7\x2d\x8e\x3b\xd2\x43\xb4\x7b\x10\xfc\x33\x61\x91\x1f\x58\xa2\x7c\x08\x63\x10\xee\x45\x4c\x77\xc8\x80\x72\x5d\x1b\xea\x77\xd0\xcd\xea\xf3\x2d\x7d\x5d\x81\x70\xe5\xb3\x6d\x95\x1d\x8b\xe3\xa9\x35\x4a\x8b\x9b\x77\x06\x54\xc1\x68\x67\x3c\x69\x61\xa0\xc3\xc6\x63\xb3\xd8\xe0\xb8\x2e\x6e\x12\x94\xc0\x4c\xae\xd4\x9f\xbf\xc7\x4e\x1c\x2f\xe6\xa0\xc3\x69\x3d\x46\x73\xa8\xd7\x5d\xe4\x0d\x2e\xab\x94\x6e\xf1\xd8\xb3\xfd\xd3\x44\x08\x11\xa6\xf4\x7b\x1c\x7d\xf2\x8e\x85\xc1\x97\x55\x8a\xa5\xfc\xc2\x85\x6d\x11\xd9\x30\x4d\xf1\x4f\xc0\x8e\xa6\xe4\x0e\xa2\x4f\xff\xc4\x84\x3e\xe0\x3d\xe5\x38\xf6\x87\x1c\x09\x26\xf4\xe8\x5f\x1e\xe0\xee\x02\x94\x32\x21\x80\xa9\x55\xdc\x62\x5d\x17\xf3\x54\x3c\x68\xa4\xbd\xae\x62\x25\xc5\x3e\x75\x8f\x8b\x92\x6c\x1c\xee\x67\x9c\x71\xfd\x5a\xf9\xdc\xad\xbd\x95\xd5\x3d\x5f\x6a\x7e\xcb\x46\xef\x1e\x86\xaf\x49\xbe\xdd\x8b\x95\xea\xdb\x83\xea\x7c\xc3\x55\x90\x68\x36\xe9\xc0\xd0\xa8\xb9\xb3\x85\x00\xcf\xb7\xc9\xa2\xd3\xbf\x7d\x9c\x5e\xa8\x19\xbd\x40\x9e\x5d\x64\xf3\x86\x99\x96\x12\x97\x57\xbe\x57\x60\xf2\x12\xbc\xab\x26\xe3\xfb\x84\xb5\x22\xe2\x6b\x60\xab\x47\xf8\xe4\x0f\x10\x3d\x64\x6a\x5c\x99\xf0\x57\xc1\xe2\x86\x8b\x2d\xa8\xd3\xc1\x30\xe5\x5b\xc2\x8e\x06\xfe\xe5\x2c\x8e\x64\xb4\xb1\x4a\xa6\x20\x24\x67\x78\x14\x49\x5d\xd4\x72\x38\xd8\xb5\xb7\xa6\x18\xff\x42\xeb\x60\xd4\x40\xc7\xda\xa4\xf4\xfe\x31\x36\x89\x78\x92\x62\xb6\x3f\x44\xd7\x43\xdc\xed\xc5\x01\x24\xe1\x6b\x42\x47\xcf\xf2\x61\xe1\x9c\x99\x4c\xd5\xd8\x7d\xf9\x7a\xc3\xe4\xf1\xd4\x3f\xf4\xca\xfe\xe9\xef\x03\x15\x0a\x93\x3b\x0c\x16\x09\x2c\x5c\xe4\x96\xb6\x2d\x42\x9f\xb4\x2b\x5c\xf1\xc4\x2b\xad\x80\xc5\x1e\xb1\xf8\x42\x96\x46\xcc\xd2\x0e\x7d\x1c\x51\x4b\x2b\xb2\xb1\x40\xc6\x35\x8d\xae\x0b\x70\x03\x63\xeb\x6d\x2c\x05\xbe\x58\xee\xcc\x63\xb3\x87\xe7\x03\xb1\xa0\xdb\x50\xcd\xbe\x1d\x81\xcf\xc0\xec\x4d\xc9\x33\x6c\x28\x7b\x45\xc3\xb3\x70\xc2\x15\x8d\xee\x6a\x07\x76\xbd\x48\xec\x48\x2f\xae\x68\x84\x8e\xd4\xfc\x28\x78\xdc\xdb\xa4\x0b\xbc\xbc\x54\x0d\xc3\xb2\xe7\xd5\x1e\x42\x9d\xfa\x77\x42\xd4\x11\x1b\x27\x8e\x5d\x13\xe7\x11\x8c\x32\xef\x99\x63\xae\x39\xe6\x6a\xa8\x31\xc7\x5c\x45\x17\xae\x88\x64\x4c\xe3\x6e\xa6\x3d\xba\xa1\x2b\x50\x18\xd3\xf6\x7a\x7d\x78\xe2\x58\x6e\xc9\xc2\xdd\x78\xbe\x68\x35\xf6\xee\x6a\x1f\x61\xb3\x66\x61\xde\x85\x3b\x2e\xcd\x2c\xbe\x7a\xfd\xa7\xdb\xbb\xdb\xbb\xdb\x57\xe6\xec\x27\x61\x1b\x5e\x74\xdf\xd9\x25\x08\x3f\xec\x00\x45\x02\xaf\x11\x4e\xc9\x0d\xc2\x99\xe2\x68\x0b\x0c\x84\x36\x53\x98\xef\xb8\x11\x65\xaa\x1a\xb9\x28\x25\xd1\xa7\x3d\x5e\xdf\x46\x3c\x59\x9a\x76\x6f\x1f\x7e\xcc\xe5\x3e\x83\x90\x45\xa7\xdf\x7c\x1b\x16\xfa\xa4\x58\xed\xaa\x73\xa4\xcb\x72\x07\x73\x19\x11\xed\xc9\xcb\xc7\x6a\x27\x73\x45\xe2\xa7\xaa\x06\xd1\x28\x6d\xf6\xf4\x0d\xab\xfa\x89\xc0\x09\x28\x10\xe5\x81\xd6\x20\x08\xaa\x42\x84\xbd\x8d\xa6\x56\xf3\x5b\x2b\x55\x3f\x2b\x16\x69\xd8\xd4\xa5\x7e\x2b\xe0\xbf\x19\x11\xa0\xdd\x4a\x89\x0c\x7a\x15\x7d\xcb\xde\xe6\xc7\xaa\xf2\x9b\x97\x58\x9a\x55\xc6\xd7\x77\x77\xcd\x8a\x89\x53\x51\x19\xed\x20\xc1\x2d\x37\xfb\xa3\x80\x8d\x16\xfa\xc3\xb2\x71\x44\x77\x69\xd9\x14\x76\x38\xe0\xfd\xb1\x3f\x3d\x70\x2c\xc9\xa9\xc6\xfd\x39\xd5\x68\xaf\x3b\xbc\x6d\xb8\x4f\xb5\xc1\x9e\xb7\xf9\xb8\x28\xe4\xf3\xaa\x59\xc3\x79\x7b\xc7\x09\xc6\x38\xec\x69\xbd\xa1\xd6\xf1\xf8\xe3\xaf\x3c\x6d\xf9\x58\x9f\x29\x38\xf7\xea\x6d\x9c\x6e\x98\xd7\xee\xbc\x76\x3b\xbe\x9b\xa5\x94\xe3\x78\xf9\x98\xf0\x38\xa3\x50\xfb\x6a\x9a\xd3\xa5\xdd\x59\x7f\x31\x8d\x10\x61\x8a\x23\xb5\x03\x24\xf7\x52\x41\xf2\x72\x2e\x9c\x2b\xf7\x5c\xf7\xbd\xf1\xab\x60\x06\x00\x51\x26\x88\xda\x23\x13\x6f\xdc\xa0\x2d\x28\x44\x14\xda\x08\x9e\x20\xb3\xc3\x87\x04\xcf\x14\x74\xb5\xdd\x01\xd6\x31\x70\x4f\xdf\x3c\x6a\x79\xa9\xd5\x76\x7f\xf7\xca\xe3\x6b\x7b\x9e\x21\x2c\x00\x31\xae\x74\xd0\xb2\xe3\x82\xfc\x1f\x62\xaf\x07\xba\x32\xe2\xce\x11\x59\x9f\xac\xf5\xa8\x6c\x3e\x53\xbd\xe3\xb2\xee\xb1\x07\x2d\x83\x75\x24\x5b\x47\x67\x7b\x72\xbd\x23\xb4\x03\x5f\x39\x38\x56\x5f\xf4\xa4\xeb\xf8\x8f\x71\xb5\xb2\xcc\xb5\x33\x6c\xee\x81\xc7\x37\x1e\x83\x6e\xb8\x58\x93\x38\xd6\x6e\xa9\x6d\xbb\xc3\x9f\xb5\x71\x11\x8e\x22\x90\x12\xed\x40\xc0\x6c\xdc\x97\x34\x6e\x35\xff\xa3\xed\xea\x43\xe3\x1a\xd7\xa5\x03\x90\x25\x88\xa5\xf5\xec\x4a\xe6\x06\x64\x88\x89\x6a\x5c\x2a\x43\x44\xa2\x4c\x42\x8c\x36\x5c\xa0\xe2\xe8\x97\x7e\x20\x50\x9e\x66\x3e\x07\xa9\x2f\x0d\x26\x07\x50\xbd\xab\xc3\x9a\xc7\x7b\x4b\x66\x93\x6f\xbe\xaf\x62\xac\xb0\x55\x91\x0d\xa6\x12\x0e\x67\xef\xde\x01\x24\x9b\x87\x9c\x34\xa2\xb2\x5d\x3d\x74\xc2\xd1\xcc\x2f\x3d\xb9\xeb\xe5\x97\xb3\x06\xa7\x7a\xa1\x78\x70\xd0\x80\xca\xb8\x98\x34\xc7\x1f\x03\x72\x84\x1d\x31\x22\x3d\x03\x70\xb4\xce\x94\x9d\x1d\x39\xac\x87\x62\x9c\x9e\x76\x21\xd9\xd8\x84\x1d\x9e\xd7\x3c\xef\xad\x18\x44\x94\x4b\x78\x0f\x52\x6a\xc2\x37\x3f\x64\xc5\xf5\x32\x7f\x7c\x0d\x3c\x7f\x7a\x87\x77\xdf\x8e\x9b\x09\x73\x26\xcc\x39\x21\x3b\xb7\x71\x8f\x9b\x90\x8d\x02\xe4\xa5\xc1\x57\xae\x76\xf5\x8e\xe7\x30\x36\xbf\xa5\xf4\x27\xdd\xa2\x83\xd1\x98\x52\xc4\x37\x28\xa2\x04\x98\x92\x25\x54\x4b\xb4\xce\x54\x85\xdf\x9c\x5d\x45\x8e\x36\x63\xf7\xbc\xbc\x67\xec\x9e\x8d\x7b\x26\xec\x4e\x30\xa1\x4b\x73\x4f\x72\x5c\x0a\x59\x5d\xa9\x44\xe6\x6f\x48\xb7\x9f\x7c\x32\xd9\xbb\xa1\x6a\x9b\xdf\xd3\x27\x94\xfd\xeb\xab\xc7\xb3\x7b\x79\x83\x64\x19\x61\x4a\xd7\xad\x2b\xc4\x9e\x1a\x6a\x7e\x73\xec\x5d\x71\xeb\x18\x11\x69\xb6\xb6\x32\x41\x51\xc4\x13\xc2\xb6\x39\x85\x4a\x4d\xcf\xe6\xe4\x22\xfa\x55\xfd\xaa\xfe\xf2\xb3\x26\x53\xf4\x68\x7e\x68\xd9\x37\xa8\xff\x79\xf3\x32\x01\xb5\xe3\x31\x7a\x83\xd2\x4c\xa1\xc2\xe2\xe8\x0d\x2a\x6f\x39\x1b\x99\xd7\x77\x77\xfa\x51\xc5\x61\xb7\x6d\x0e\x33\x32\xf7\x5d\x19\x4b\x42\x8a\x9e\xa6\xea\xac\xe5\x9d\xef\xb3\x3b\xe9\x33\x02\x89\xb3\x96\x3e\x8e\xb1\x5c\xba\x77\x27\x7d\x58\x99\xcb\x3e\x94\x77\xb5\xa6\xe9\x6e\xc5\x80\x67\x67\x3b\xa1\xb3\x75\x8e\x64\x7b\x21\xf9\x87\x98\xa8\x87\xa2\x41\x9e\xb6\x98\x1d\x2d\x88\x89\x42\x65\x47\x28\x15\x7c\x43\xe8\x55\xe4\x4b\x97\xbf\xa7\xd5\xbd\x49\x7c\xf6\xa5\x33\xc9\xea\xf4\x9c\x72\xf6\xe4\xe6\x94\x73\x36\xee\xcb\x18\xf7\xa4\x29\x67\xda\xb8\x70\xe0\xad\x10\xe6\x75\x45\x9d\x65\x68\x46\xd3\x44\x54\x3c\x31\xc4\xf3\x75\x87\xea\x2e\x8d\xd6\x2e\x9d\x15\x66\x38\xee\xc9\xcd\x70\x3c\x1b\xf7\x65\x8c\x7b\x52\x38\x2e\xef\x00\x8f\xcb\x69\x27\x9a\xc5\x76\xff\x25\x19\xdb\xf4\x5d\x30\xfa\x4e\x2a\x93\x2d\x2f\x6f\x09\x1e\x67\xd1\xf0\x7f\x19\x60\xb4\xae\xc5\x76\x4a\xa5\xd5\xab\x2f\x78\xbb\x35\x9e\x19\xbe\xbe\xbd\x0b\x17\x4f\xbf\x07\x00\x00\xff\xff\xa4\x30\x62\xd3\xa0\x60\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

