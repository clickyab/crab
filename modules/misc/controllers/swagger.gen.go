// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x4b\x6f\xdc\xb6\x16\x5e\x6b\x7e\x05\xa1\x7b\x97\x86\x65\x27\xc6\xbd\x68\x76\x69\x1b\x14\x41\x1f\x31\xea\xb4\x9b\x22\x10\x38\xd2\x99\x11\x13\x8a\x54\x49\xca\xe9\xd4\xf0\x7f\x2f\x48\xbd\x25\x4a\xe2\xd8\x63\x8f\xed\x2a\xab\x0c\x75\x48\x9d\xf7\x77\x0e\x49\xf9\x66\xe5\xf9\x6b\x2c\xe1\x12\xab\xc4\x7f\x83\xfc\x00\x67\xc4\x3f\x59\x79\x7e\xc4\x99\xcc\x53\x90\xfe\x1b\xf4\xc7\xca\xf3\x7c\x9c\x65\x94\x44\x58\x11\xce\x82\xcf\x92\x33\x7f\xe5\x7d\xd2\x74\x31\x6c\x08\x23\x7a\x58\x93\xde\x18\x52\x8c\xc3\x1f\x80\xc5\x20\x3e\xee\x32\x28\x47\x3d\x5f\x15\x3f\x7c\xa9\x04\x61\x5b\x7f\xe5\x79\xb7\x27\x9a\x3c\xe2\x4c\x09\x4e\x29\x88\xf0\x9d\x10\x5c\xfc\x0a\x32\xe3\x4c\xc2\x15\x49\x33\xda\x4c\xcf\x04\xcf\x40\x28\x02\xd5\x7b\x3c\xcf\x07\x4d\x5f\xff\xb4\xd2\xe8\x51\x2c\x70\xda\x1e\xf1\x7c\xa2\xa0\x3b\x62\x63\xcf\xfc\x33\x3c\x76\x29\xb0\x10\x78\x57\x11\xd4\xcf\x7d\x05\x7f\xa9\xce\x4b\xec\x2b\xde\xae\x3a\xf3\x6a\x2a\xbe\xfe\x0c\x91\x2a\xa8\x0c\x4d\x41\x61\x79\x3e\x50\xdb\x2f\x5c\xa4\x98\x56\x7a\x1b\xd1\xd8\xcc\x72\x71\xca\xc2\xb7\x91\x22\xd7\x70\xa5\xb0\xca\xe5\xac\xd9\xf4\x84\xef\x79\x8a\x09\x9b\x34\x11\x36\x6b\xb6\x6c\x64\xd3\x4a\xa9\x0c\x3f\x12\x80\x15\xc4\x21\x6e\x29\xd2\xdf\x68\xe9\xf4\x80\x1f\x63\x05\x1f\x49\x0a\x7e\x5f\x77\xb6\xb5\x62\x90\x91\x20\x99\xf6\xcc\x59\x0f\xb9\x2a\xe6\x3b\x18\xaf\xb6\xf6\xef\x98\x92\xd8\x3a\x63\xcd\x39\x05\xcc\xf6\xb2\x77\xc9\x73\x7b\xc5\x9a\x90\x30\x05\x5b\x10\x5d\x4a\x86\x53\x57\xa5\xe6\x59\x7c\x7f\xa5\x3a\x38\x24\xe5\x45\x7a\x08\xbf\xe3\x39\x53\x62\x37\xe9\x16\x87\x95\x74\x1f\xee\x2e\x05\xbf\x26\x2c\x9a\x4e\x2c\x51\x21\x42\xe8\xce\xe6\xf1\x04\x2a\x78\x6d\xb1\xdf\xcb\x6e\x56\x9f\xef\xf0\x3b\xc2\x70\xe3\xb3\x5d\x96\x47\x82\xe3\xb6\x23\xa5\xc5\xcd\x7b\x02\xd5\x69\xb4\x27\x4f\x56\x1a\x68\x3f\x79\x6c\x16\x9b\x95\xeb\xc9\x29\x41\x09\xcc\x64\xa8\xbe\xf9\x16\x8f\xe6\xf1\x52\x07\x3d\x4c\x1b\x20\xda\x08\x7b\xfd\x20\x6f\x61\x59\xcd\x74\x07\xc7\xee\xec\x9f\xb9\x04\x11\x46\x09\x44\x5f\x7e\xc6\x84\x5e\xe2\x1d\xe5\x38\x9e\x46\xf3\x14\x13\x7a\xf0\x37\xcf\xc0\x62\x19\xef\xb9\x10\xc0\x54\x18\x77\x00\x6d\x2c\xa9\xd7\x10\x63\xa8\x27\xad\x60\xc5\x9b\x21\x2a\xba\x15\x20\x36\x78\x9c\x4e\xe6\x6e\xeb\x5a\xa1\x72\x9c\x7b\x2b\x60\x4e\xbc\xa9\xfd\x2e\x1b\x72\x4e\x80\x67\x83\x9f\xdd\x55\xac\x28\xda\x15\xaa\xf7\x8e\x91\xe8\xee\x4c\xe9\x45\xb8\x93\xee\x6c\xe8\x7a\x77\x9b\x0c\xca\x0c\xab\x9c\x93\x51\xec\x1a\x20\x1b\x2e\xb6\xa0\x1e\x2f\x20\x29\xdf\x12\x76\xb0\x34\x70\x52\xa5\x41\x29\xbf\x72\x61\xc3\xde\x3b\x31\x99\x81\x90\x9c\x61\xa7\x74\x85\xe3\x58\x80\x94\xae\xa5\x2d\x50\x9a\x25\x9c\x39\x97\xc2\x44\xed\x53\x7e\x6c\x88\x90\x2a\xdc\xa3\x2a\xdc\x9a\x06\xcd\x91\x98\xe2\xfd\x16\x77\x12\xd4\xd5\x26\x02\xb6\x44\x2a\x10\x2e\x36\x89\x78\x9a\x61\xb6\xdb\x87\xd7\x7d\xdc\x6d\x6f\x2d\xef\xab\xb8\x94\xaf\x09\x75\xd6\xb2\xa3\xf3\x57\x7d\x80\x56\xa6\x6a\x75\xe4\xf7\x37\x4c\x81\xac\x3f\xe9\xc8\xfe\xf0\xe3\x4c\x1b\x68\x0a\xb4\xd9\x4e\x2c\xe2\x22\xe3\x02\xf7\xa1\x68\x0c\x89\x86\x41\x38\x45\x3d\x06\x5c\x13\xc8\xd5\x81\x2e\x3b\x76\x4d\x81\x57\x0b\xbd\xba\x20\x38\x82\x5f\x1d\x8c\xb3\xa4\x8c\x97\x24\x5d\x3f\xc1\xcd\xc8\xf6\x9e\xa9\xff\x5d\x8c\x32\xd7\x47\xf5\x23\xcb\x66\x2f\xd4\x66\xaa\x82\x71\x43\xb5\xd7\x86\x88\x33\x9e\x92\x28\x8c\x78\xfc\x32\x3d\xc3\x96\x65\x9d\xd5\x63\xc9\xb8\xce\x73\xef\x38\xed\xe5\xc6\x68\x05\xbd\x2f\xd7\xd7\x46\xca\xf7\x83\x44\xaa\x01\xc9\x41\x86\x1b\xcd\x58\xb5\x18\x96\x2d\xe7\xae\x08\x4d\x7b\xd0\x2b\x5e\x1c\xf6\x2d\x47\x36\x2d\x7b\xdc\x34\xf4\x55\x45\xbc\xa0\xf1\x82\xc6\x2d\x36\x16\x34\x2e\x97\xb8\x0f\x56\xf5\x7b\x30\xe7\x89\xf7\x01\xb9\x97\xeb\xc3\xcf\x3c\x97\x5b\xfa\xb3\xfb\x1d\x22\x56\xfb\xb9\xfc\x0b\xd8\xb6\x34\xf7\xe8\xf9\x56\xe6\x99\x9f\x70\x69\xb4\x78\xfe\xea\xff\xa7\x67\xa7\x67\xa7\xe7\xe6\xa4\x98\xb0\x0d\x2f\x97\xef\xed\x24\xfa\x1f\x13\x40\x91\xc0\x6b\x84\x33\x72\x82\x70\xae\x38\xda\x02\x03\xa1\xcd\xe4\x17\x1b\xde\x44\x99\x7e\xb7\x20\xa5\x24\xfa\xb2\xc3\xeb\xd3\x88\xa7\x81\x99\xf7\xf6\xf2\x7d\x41\x77\x0d\x42\x96\x8b\xbe\x3e\xf7\x4b\x7e\x32\xac\x92\xfa\xd4\x39\xa8\x0e\x10\x82\x88\x68\x4f\x0e\x6e\xea\x83\x84\x90\xc4\xb7\x75\x77\xda\xda\xf4\x1a\xf0\xeb\xd7\x9d\xb5\xc0\x29\x28\x10\xd5\xf1\xb7\xe7\x79\x75\x8b\x6a\x9f\xa3\xa1\xd5\xfc\xd6\x4c\x35\x63\x65\x90\xfa\x6d\x5e\x9a\xa7\x02\xfe\xcc\x89\x00\xed\x56\x4a\xe4\x30\xd8\xf5\xb3\x1c\x2d\x7c\x2a\x59\xac\x9a\xef\xf6\xfe\xd3\xab\xb3\xb3\x76\x2f\x3d\xca\xa8\x8c\x12\x48\x71\xc7\xcd\xfe\x2b\x60\xa3\x89\xfe\x13\xb4\x0e\xf4\x03\xcb\x99\xcc\x88\x03\x5e\x1c\xfa\xd5\x33\xb7\x02\x46\xd9\xb8\x38\x26\x1b\xdd\xb8\xc3\xdb\x96\xfb\xd4\xe7\x5b\xc5\x9c\x4f\xab\x92\xbe\xd8\x4f\x69\x39\xef\xe0\x34\xcf\xc5\x61\x1f\xd7\x1b\x1a\x1e\x0f\x2f\x7f\xed\x69\xc1\x4d\x73\xa4\x77\xec\xe8\x6d\x1d\x2e\x2e\xb1\xbb\xc4\x6e\xcf\x77\xf3\x8c\x72\x1c\x07\x37\x29\x8f\x73\x0a\x8d\xaf\x66\x05\x5c\xda\x9d\xf5\x37\x33\x09\x11\xa6\x38\x52\x09\x20\xb9\x93\x0a\xd2\x87\x73\xe1\x82\xb9\xbb\xba\xef\xc9\x34\x0b\x46\x00\x88\x72\x41\xd4\x0e\x99\x7a\xe3\x04\x6d\x41\x21\xa2\xd0\x46\xf0\x14\x99\xb3\x1f\x24\x78\xae\xa0\xcf\x6d\x02\x58\xd7\xc0\x03\x7e\x8b\xaa\xe5\xa1\xa2\xed\xe2\xec\x7c\xc2\xd7\x76\x3c\x47\x58\x00\x62\x5c\xe9\xa2\x25\xe1\x82\xfc\x0d\xf1\xa4\x07\x8e\x75\xc4\xbd\x1b\x6a\x53\xb4\xd6\x9b\x6a\x85\xa6\x06\xb7\xd5\xc6\x65\xf7\x3a\x06\xeb\x51\x76\x6e\xae\x0d\xe8\x06\x37\xd8\x66\xde\xb2\x77\xad\xbe\x1a\x50\x37\xf5\x1f\xe3\x2a\xb4\xe8\x7a\xb4\x6c\x1e\x24\x8f\xd7\x13\x06\xdd\x70\xb1\x26\x71\xac\xdd\x52\xdb\x36\xc1\xd7\xda\xb8\x08\x47\x11\x48\x89\x12\x10\xb0\x18\xf7\x21\x8d\x5b\xeb\xdf\xd9\xae\x53\xd9\xb8\xc9\xeb\x72\x24\x21\x4b\x10\x81\xc9\x39\x6e\xb9\xb8\x48\x4f\x7a\x16\x22\xec\x80\x99\x78\xcd\xe3\x9d\xa5\x15\x28\xce\x31\xc3\x18\x2b\x6c\x4d\x70\x1b\x4c\x25\xec\x0f\x77\xc3\x53\x76\x9b\x4e\x1f\xb5\x06\xb1\x1e\x13\x3e\xf5\x2a\x64\x2a\x91\x1c\xb5\x0a\xd1\xda\x9c\x76\x78\x9e\x2b\xa7\x4a\x39\xa2\x5c\xc2\x15\x48\xdd\x52\x23\xf3\x43\xa2\xf2\x0a\x14\x92\xc5\xf0\x5d\xfc\xff\xd9\x95\x01\x07\x77\xf8\xf1\x4b\xd9\xa3\xee\xb6\x14\x22\x03\xba\xa5\x10\x59\x8c\xfb\x30\xc6\x3d\x6c\x21\xe2\x94\x90\x03\x93\x5f\xb9\x4a\x9a\x9d\xfe\xf9\xdc\xfc\x96\xd2\x0f\x7a\x46\x2f\x47\x63\x4a\x11\xdf\xa0\x88\x12\x60\x4a\x56\xa9\x5a\xa2\x75\xae\xea\xfc\xcd\x19\x2c\xb9\x7b\xc9\xdd\xff\xca\xf0\x5e\x72\xf7\x0b\x36\xee\xa3\xe6\xee\x14\x13\x1a\x98\x6f\x08\xdc\x5a\xc8\xfa\x73\x03\x64\xfe\x87\xf4\xfc\x67\xdf\x4c\x0e\xbe\xde\xb0\xe9\xf7\xf1\x1b\xca\xe1\xa7\x1d\x87\xb3\x7b\x75\xa7\x36\xe8\x5f\x8f\x9f\x32\x7e\x41\x7b\x59\x5d\xc7\x7d\x9e\xc6\x2e\x05\x3e\xba\x89\xef\x00\xc3\x47\xdd\x38\xb8\x8f\xb3\xf5\xee\x56\xf9\x59\x3e\xee\x64\xef\x62\xa2\x2e\xcb\x09\x45\x1d\x86\x36\x5c\x20\x88\x89\x42\xd5\x42\x28\x13\x7c\x43\xe8\x8b\x28\x00\x67\x8e\x1c\x9e\x40\xc4\xf4\x3f\x16\x39\x7a\xe8\x3c\xcb\xed\xb6\xa5\x86\x1e\xd0\x2d\x35\xf4\x62\xdc\x87\x31\xee\xa3\xd6\xd0\x59\xeb\xe6\xe0\xe4\x96\x47\xb1\x51\x82\x88\x34\x88\xa6\x81\xa8\x1c\x31\xc0\x73\xbf\xd3\xf1\xa7\x06\x6b\x4f\x1d\x15\x96\x74\x3c\xa0\x5b\xd2\xf1\x62\xdc\x87\x31\xee\xa3\xa6\xe3\xea\x63\x1e\xb7\x9e\xf6\x99\x76\xb1\xfd\x8f\x85\x6d\xea\x7b\xc2\xd9\xf7\x59\x75\xb2\xd5\x2d\x6c\xc1\xe3\x3c\x9a\xff\x4b\x61\x86\xeb\x86\x2c\x51\x2a\xab\x1f\x7d\xc5\xdb\xad\xf1\x4c\xff\xd5\xe9\x99\xbf\xba\xfd\x27\x00\x00\xff\xff\x3e\xfd\xfb\x07\x97\x4c\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

