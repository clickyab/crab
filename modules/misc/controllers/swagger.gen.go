// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x6f\xe3\xb6\x13\x3f\xcb\x9f\x82\xe0\xff\x7f\x34\x62\x27\x2d\x50\xec\xde\xb6\x68\x0f\x45\x5b\x34\xd8\x2c\x7a\x29\x02\x63\x2c\x8d\x25\x6e\x24\x52\x1d\x8e\xb2\x75\x83\x7c\xf7\x82\xd4\xc3\x7a\x50\x8a\x9b\xa4\x2f\xb4\xa7\xc4\xe4\x8f\x33\x9c\xc7\x6f\x66\xa8\x87\x55\x24\xf7\x60\xf1\x1a\x38\x93\x6f\x85\xdc\x40\xa9\xe4\x7a\x15\xc9\xd8\x68\x5b\x15\x68\xe5\x5b\xf1\xd3\x2a\x8a\x24\x94\x65\xae\x62\x60\x65\xf4\xe6\xa3\x35\x5a\xae\xa2\x5b\x87\x4b\xf0\xa0\xb4\x72\xcb\x0e\xfa\xe0\xa0\xb1\xd1\x4c\x26\xcf\x91\x76\x5f\x13\x19\x7a\x8f\xb6\x34\xda\xe2\x8d\x2a\xca\x1c\x1b\x54\x24\x4b\x32\x25\x12\x2b\x6c\x0f\x46\x91\x44\x87\xef\x7e\x06\x31\x6e\x15\x08\x8a\xfe\x4a\x24\x15\xe3\x70\x25\x92\x7c\x2c\x9d\x32\x69\x99\x94\x4e\x65\xbb\xf1\xb8\x5e\x8d\x11\x40\x04\xc7\x16\xd0\xed\x4b\xc6\x5f\x78\xa0\x24\x2c\xf1\x71\x35\x38\xd7\xa1\xcc\xfe\x23\xc6\x5c\xa3\x3c\xa6\x46\x04\xf6\xfd\x86\x4c\x0a\xbd\x7b\x17\xb3\xba\xc7\x1b\x06\xae\x3a\x6b\x02\x6a\x4f\x07\xbe\x32\x05\x28\xbd\xe8\x53\xf0\x32\x7b\x4e\x0d\x99\xd1\xdc\x5e\xc6\x84\xc0\x98\xec\xa0\x67\xb9\x3c\x18\x2a\xfc\x82\x4c\x80\xf1\x83\x2a\x50\x8e\x8d\x0d\xc9\x4a\xd0\xc6\xa4\x4a\x97\x1b\x4f\x86\xf4\xa6\x3e\x7f\x86\xb7\xbb\xf0\xfc\x08\xb9\x4a\x82\x27\xf6\xc6\xe4\x08\xfa\x77\x05\xa8\xb9\x73\x5f\x62\x07\x54\x9a\x31\x45\x1a\x22\x35\x14\xe7\x3a\xb5\x2a\x93\x97\x3b\xf5\x8c\x0c\x62\x02\x6d\x77\xfc\xe6\x4b\xb0\xcb\x34\x1b\x13\x68\x42\x9f\xb0\xf3\x27\x1e\xec\x11\xa7\xb5\x75\x48\x9a\x67\x9b\x52\x59\xa4\x5d\x9c\x61\x7c\xf7\x3d\xa8\xfc\x1a\x8e\xb9\x81\x64\xb9\x74\x14\xa0\xf2\x57\xd7\xdc\xd6\xae\x45\xd5\x71\x45\x84\x9a\x77\xc9\x80\x8c\x73\x09\xd9\xd1\xc3\xa3\x17\xa3\x10\xe4\xca\x94\xd1\xe7\x55\xbb\x10\xb5\x97\x13\xf1\x3c\xb9\x41\x9a\xcf\xdf\x3e\x48\xf6\x05\x4d\x7d\x5d\x21\xd6\x2f\x10\xff\xc4\xfd\xa1\x94\x60\x05\x18\x1a\x35\xd2\x11\x2e\x05\xc3\x23\xc3\x82\x70\x9e\xef\x42\x95\xe1\xf9\x31\x99\x76\xb0\x90\x9d\x8b\x2c\x3e\x97\x20\x84\xa9\xb2\x8c\xf4\x6a\xcc\x5c\xb7\x95\xc9\xda\x4f\x86\x42\x55\x38\x58\x59\xdd\x5d\x1a\xc0\xab\x10\x9f\x1a\xbe\x7f\x67\x52\xa5\x7f\xf8\xf6\xd5\xec\x3a\xbf\xaf\xb0\xb9\xc3\x50\x0d\xf9\x53\xcd\x7f\xdf\x84\xf7\xdf\x61\xff\xca\xef\xc9\xcc\x58\x4f\xb9\xcb\xab\x2f\x2e\xb6\x17\xdb\x8b\x4b\x3f\x08\x2b\x7d\x30\xed\x64\x3b\x2c\x75\xf2\x43\x86\x22\x26\xd8\x0b\x28\xd5\x5a\x40\xc5\x46\xa4\xa8\x91\x1c\xa5\x65\xdd\x91\x15\xfb\x89\xb7\x86\xe6\x2a\xbe\x3b\xc2\xfe\x22\x36\xc5\xc6\x9f\x7b\x77\xfd\x4d\x8d\xbb\x47\xb2\x8d\xd0\xcb\x37\xb2\xb9\x4f\x09\x9c\x75\x43\xf5\xc6\xd9\xba\x71\x1e\xdf\xf8\xe6\x74\x8a\x4c\x7d\xeb\x87\xd0\xcc\x25\xbb\x3e\x26\xfc\x7f\xc2\x9d\x17\x4a\x0b\x7b\xb4\x8c\x85\x5c\xf7\xc6\x01\x64\xa4\x76\xda\x8f\xa2\xa8\xeb\x41\x23\x89\x5d\x1d\x92\xbe\xd3\xc9\xbd\x49\x8e\xa7\xb5\xa6\x06\xca\xb2\x2e\x0b\xbb\x04\x18\x4e\xbb\x84\x3f\x57\x8a\xd0\xa5\xc2\x01\x72\x8b\xdd\x86\x8d\x33\x2c\x60\xd0\xe3\xfe\x4f\x78\x70\x92\xfe\xb7\xe9\xbd\x30\x36\xe1\xb1\x60\x34\xe7\xf9\x3f\xb7\x8d\x6d\x6d\x46\xf7\xfb\xec\xd5\x76\xdb\xef\xb2\xb3\x16\x3e\xf3\x5a\xdd\xcc\x10\xba\x57\x97\xe6\x90\xf6\xbc\xed\x33\xb9\xc6\xdf\xae\x1a\x6c\x4d\xcb\x3a\xee\x65\xaf\x5f\xca\x14\xe7\x03\x9e\x9b\xd4\x54\x2c\x94\x15\x07\x43\x82\x33\x14\xcd\xca\x81\x4c\xe1\x7f\x3f\x3f\xf4\xfe\x34\xc6\x15\x29\x3e\x0a\x4f\xd3\xb5\x48\x91\x85\x6a\xa4\xe7\xae\x66\x0a\x32\x15\xe3\x38\x4b\x32\x84\x04\x69\x9a\x27\x35\xd9\x43\x09\xc2\x54\xe1\xa4\x8f\x0d\xa7\xd1\xbf\x28\xce\xe3\x16\x31\x8a\x72\xdb\x5d\x3f\xdf\x5e\x2e\x28\x3f\x9a\x4a\x00\xa1\xd0\x86\x5d\xe1\xc8\x0c\xa9\x5f\x9b\xa2\x31\x77\xa5\x99\x71\x6a\xfc\x66\x5e\xc2\x06\xdf\xce\x51\x68\xf4\x5c\x72\x7c\x34\x30\x74\x84\x1c\xbc\xa5\x27\xb8\xc9\x9b\xfa\x09\x2d\x8f\x33\x53\xe0\xcc\x00\x77\xc2\xf7\x5f\xf9\x6d\x0d\xd6\x86\x77\x01\x5f\xcf\x49\x9b\x06\xf4\xb3\x85\x80\x1e\x0c\xed\x55\x92\x38\x4e\xb8\xd8\x66\x70\xef\x82\x2b\x20\x8e\xd1\x5a\x91\x21\xe1\x7f\xc1\xfd\x23\x83\xdb\xf9\xff\xec\xb8\xbe\xa0\x1c\xd3\x64\x3c\x5a\x6a\xc2\xff\xd0\x36\x3b\x1e\xf1\xff\x1e\x5d\x76\x32\xa1\xce\xb2\xf5\x95\xb5\x3f\xf1\x55\xf3\x85\xc9\xd5\x8e\x7c\x64\x92\x2a\x7e\xfa\xab\xab\xbf\xf5\x09\x96\x31\x97\xdd\xd6\x27\x48\x53\x9f\x9a\xf2\xea\x62\x2b\x57\x8f\xbf\x05\x00\x00\xff\xff\xf4\xc1\x81\x48\xe3\x15\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

