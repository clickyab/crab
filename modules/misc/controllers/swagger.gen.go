// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\x36\x10\x7f\x96\xff\x0a\x82\xdb\x63\x10\xbb\x59\xd1\x61\x7d\xeb\xb0\x62\x28\xf6\x15\x34\xed\x5e\x86\xc0\xa0\xa5\xb3\xc4\x46\x22\xb5\x23\x95\xce\x0b\xf2\xbf\x0f\xa4\x3e\xac\x0f\x8a\x56\x12\x27\xa9\x3b\xf7\xa5\x09\x75\x24\x8f\x77\xf7\xfb\xdd\x1d\x99\x9b\x59\x40\x57\x4c\xc1\x39\xd3\x09\x7d\x4d\xe8\x9c\xe5\x9c\x9e\xcc\x02\x1a\x4a\xa1\x8a\x0c\x14\x7d\x4d\xfe\x9a\x05\x01\x65\x79\x9e\xf2\x90\x69\x2e\xc5\xfc\x93\x92\x82\xce\x82\x4b\x23\x17\xc1\x9a\x0b\x6e\x86\x8d\xe8\x8d\x15\x65\x6c\xf9\x33\x88\x08\xf0\xc3\x26\x87\x6a\x34\xa0\xba\xfc\x85\x2a\x8d\x5c\xc4\x74\x16\x04\xb7\x27\xb5\xf8\x47\x05\x78\x0e\xa8\xa4\x60\x69\x33\x21\x47\x99\x03\x6a\x0e\xf5\xca\x46\x38\x8a\x10\xd4\x76\xc0\x29\x15\x04\xf4\xa2\xdc\x64\x3b\xe2\xda\xdf\xfc\xb3\x3a\xd8\xef\x7f\xb2\x94\x47\xce\x19\x2b\x29\x53\x60\xa2\x99\x32\xeb\xcc\x6c\xc4\xe4\xea\x13\x84\xba\x94\xaa\x3e\xd2\x10\xd2\x34\x4f\xa4\x80\xc3\xd1\x98\xeb\xcd\xb2\xbd\xec\x88\xbe\xef\x84\x7e\xf5\xd2\xb9\x39\x17\x1a\x62\xc0\xa7\xd2\x17\x81\x69\x88\x96\x4c\xb7\x54\x5e\x4b\xcc\xec\x00\x8d\x98\x86\x0f\x3c\x03\xda\x5f\xab\x6d\xd4\x7a\xad\x35\x47\xa5\x97\x82\x65\x87\xe3\xae\xd8\x02\xad\xa5\xae\xef\x7c\x29\x3b\xb4\xe3\x1d\x16\x76\x8a\x3c\xda\x5b\x2c\x16\x0a\xb0\x8b\x43\x27\xbe\xac\x7a\xe5\x1c\x87\x6a\x25\xc3\x86\x52\x68\x94\x69\x0a\xb8\x7c\x8b\x28\xf1\x3d\xa8\x5c\x0a\x05\x17\x3c\xcb\x53\xf0\xf2\x2d\x18\xf9\x9d\xf6\xcf\x19\xb2\x4c\x75\xac\xc9\x35\x74\x47\xc6\x5c\xb2\xf5\xc9\x56\x82\x21\xb2\xcd\xd0\x67\x1a\xfe\xd1\x53\x9c\x3c\xc5\x63\x77\x33\xdb\xef\xc6\x87\x69\x6d\xb7\x11\x8b\xed\x58\x2e\xca\xc4\xf2\x4d\xa8\xf9\x35\x5c\x68\xa6\x0b\xb5\x33\x31\x9a\x09\x3f\xc9\x8c\x71\xe1\x4f\x89\x76\xcd\x89\x0c\xb0\x4f\xb6\x8c\x40\x85\xc8\x73\x93\xfb\x0f\x06\xa1\x13\x00\x55\x49\xf6\x68\xd2\x0b\xd5\x7d\xc0\x7e\x42\x40\x6a\x64\x42\x2d\xf5\x0f\x3f\xb2\xd1\x18\x9c\x39\xf1\x38\x40\xa3\xdb\xf8\x03\x0b\xb6\x70\x58\x9f\xb5\x8b\xc1\x7b\x1f\xc5\xb2\x5b\x98\x40\x78\xf5\x1b\xe3\xe9\x39\xdb\xa4\x92\x45\x7e\x26\xca\x18\x4f\xf7\xbe\xf3\x0e\x48\x57\xa0\x29\x10\x41\xe8\x65\xd4\x01\xe3\x58\x40\x36\xf0\xb0\xd2\x5e\x2f\x38\xb1\x32\x44\xf4\x34\xf2\x74\x41\xdb\x1f\x88\xd3\xd6\x75\xc2\x7c\x5c\x7b\x27\xd8\x3d\x3b\xb5\xf7\x72\xa1\xde\x03\xfc\x2d\xf6\xbb\xab\x38\x19\xa0\x7b\xa8\xde\x1e\x63\xb5\x6b\x7b\x4a\x97\x10\xa6\xd9\xce\xc5\x0c\xf7\xf7\xc9\x30\x21\xba\xce\xe9\x45\xf1\x54\x80\xe4\x55\x33\x36\x05\x99\xc3\x9e\xcc\x9b\x81\x1c\x1d\x91\x57\x7e\xd0\x8f\x78\x69\xdb\x59\xc2\xfb\xd6\x7f\x70\x01\xed\x93\x9f\x74\xd0\xa9\x3e\x41\x88\xb9\xd2\x80\x7b\x63\xcb\x5a\x49\xa6\xd4\x67\x89\x2e\x13\x8f\x16\xa6\xba\xd5\xd9\x3f\xfc\x5c\x25\x07\xff\x2a\x63\x2e\xfe\xf8\x65\x6f\xe7\x9a\x1e\x34\x5a\x5e\x81\x8b\xd7\x9f\xf4\xf8\xef\x2b\xf7\xfe\x3f\xce\x3f\xb3\xdf\x68\x22\x95\xa5\xc1\x17\x67\xdf\x9f\x2e\x4e\x17\xa7\x2f\xec\xe5\x13\x17\x6b\x59\xdf\x26\x75\xd3\x0f\xfd\x90\x00\x09\x91\xad\x08\xcb\xf9\x09\x61\x85\x96\x24\x06\x01\x68\x68\x96\x96\x55\x12\xd7\xb6\xa9\x29\x45\x53\x1e\x5e\x6d\xd8\xea\x34\x94\xd9\xdc\xce\x7b\x73\xfe\xae\x94\xbb\x06\x54\xd5\xa2\x67\xaf\x68\xa5\x4f\xce\x74\xd2\x5c\x64\xcd\x8b\xdc\x00\x6d\x7e\x93\xc9\xa8\x48\xe1\x76\xeb\x99\x52\xeb\xca\x27\x3d\x0d\x3f\xda\x49\x84\x0b\x2d\x89\x4e\x80\xa8\x8d\xd2\x90\xd1\x93\x56\x69\x06\x1a\xb0\xbe\x59\x0b\x82\xa0\xa9\x07\x7a\x2b\x35\x39\x81\xda\xaa\xc3\x2a\xb7\x1d\xab\x68\x88\x96\xca\x6d\xc7\x11\xfe\x2e\x38\x82\x71\xbe\xc6\x02\x06\xc9\xc2\x59\xf2\x8d\xa9\x60\x0f\x00\x61\x81\x5c\x6f\x88\x0d\x93\x13\x12\x83\x26\x5c\x93\x35\xca\x8c\xa4\x06\xb3\x04\x65\xa1\xa1\xaf\x6d\x02\xcc\x10\xeb\x40\xdf\x32\xd8\xee\xa9\xae\xfd\xef\xb2\xb2\x65\x8d\x9c\x76\xea\x79\xb9\x78\xd1\xae\xb0\x7a\xc7\xd9\xc8\x82\x30\x04\x22\xa4\x36\xb1\x93\x48\xe4\xff\x56\x71\x63\xc5\x55\x98\x40\xc6\x3a\xc5\xd8\x48\x95\xd3\xef\x8c\x7d\xb2\xce\x0e\x39\x70\x55\x84\xbe\xb3\x07\x1d\x87\xf5\x24\x3b\x1d\xf3\x40\x6e\xd0\x39\xef\xd8\xe5\x76\xa4\x38\x1b\xa9\xab\xb6\xf2\xed\x5e\xbe\x86\xa1\x90\x7a\xe9\xb0\xf5\xd8\x6a\xfd\x6e\xee\xe5\xe2\x3b\x8f\x43\xd7\x12\x57\x3c\x8a\x4c\x58\x1a\xdf\x26\xec\xda\x38\x97\xb0\x30\x04\xa5\x48\x02\x08\x47\xe7\x3e\xa6\x73\x1b\xfb\x4f\xf6\x6b\x37\xf1\xb0\xb8\xc5\x83\xad\x1b\x17\x55\x4e\xbb\x9c\x55\x53\xca\x7c\x39\x37\xc9\x67\x9e\xca\x58\x16\xcd\x89\x69\x0c\xe3\x5c\x1c\xa6\x52\xc1\x05\x28\x43\xf4\xc4\xfe\xa2\x48\xd5\xcd\x11\x55\x0e\xdf\x87\x98\x0f\x8e\x15\xcf\x16\x0b\x0f\x88\xbc\x10\xf9\x16\x61\x6d\x84\xbe\x99\xb7\x9e\x7a\xe6\xe3\x77\x63\xa3\x30\x3e\xf2\xf2\x40\xee\xc8\xcb\x47\xe7\x3e\x8e\x73\xf7\xcb\xcb\x86\x76\x3d\x84\x6c\x7a\x92\xb9\xbd\x52\x9b\x56\x21\x37\xb7\x6f\xc4\xfe\x44\xcc\x7c\xc2\xc5\x1e\x2b\xe5\x95\x8c\x36\x43\x8e\xcd\xcb\xc6\x79\x19\x31\xcd\x9c\x54\xbb\x66\xa9\x82\xbb\x93\xa1\xfb\x32\xd3\x65\xdf\x27\xe5\xe8\x91\x9b\xce\xfd\xf9\x3d\x1f\xbc\xd8\x17\xe3\x4e\x7f\x1b\x71\x5d\x3f\xf1\x97\xa9\x91\xac\x25\x12\x88\xb8\x26\xf5\x42\x24\x47\xb9\xe6\x4d\x33\x73\xd0\x39\x79\x47\x63\xf5\x05\x44\x6c\xff\x8e\xef\xd9\x03\x76\xf0\x97\x20\xa3\xa9\xe7\xf1\xaa\x19\xd7\x03\xe9\xb1\xa4\x39\x90\xac\x77\x2c\x69\xbe\x62\xe7\x3e\x69\x49\x93\xb7\x1e\xb0\xbc\x1d\x66\xd9\x8c\x12\xae\x6c\x36\x33\x49\xa8\x1a\xb1\x49\xe7\x61\xf7\x7f\x5f\x5a\x4a\x7b\xa6\x12\xa6\xff\x3e\x70\xa4\xe3\x03\x41\xec\x91\x8e\xbf\x62\xe7\x3e\x29\x1d\xe3\xe0\x6d\xcc\xd7\x5f\x1e\x68\x07\xd9\x7f\xdf\x75\x99\xef\xf9\xd8\xb7\x79\x9e\x1c\x45\xeb\xb3\x16\xe5\x77\x0d\xae\xfa\xbd\x0f\x65\x54\x84\xbb\xff\xcc\xdd\x6a\xbd\x15\x4b\xb4\xce\x9b\x4f\x9f\x59\x1c\xdb\xd0\xa4\x67\xa7\x0b\x3a\xbb\xfd\x2f\x00\x00\xff\xff\xb6\x53\x03\xc5\x54\x2f\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

