// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x4d\x6f\xdb\x38\x10\x3d\x4b\xbf\x42\x98\xdd\xa3\x61\x39\xc1\x02\xc1\xe6\x96\xa2\x3d\xf4\x50\x20\x48\x82\x5e\x8a\xc0\x18\x4b\x63\x9b\x89\x44\xaa\x43\x2a\xa9\x11\xe4\xbf\x17\xa2\x24\x5a\x92\x19\x45\x4d\x5c\xa0\x3d\x25\x26\x1f\x39\x9f\xef\x0d\xf5\x14\x06\xb0\x42\x4d\x97\x68\xb6\x70\x1e\x41\x8c\x85\x80\x59\x18\x40\xa2\xa4\x2e\x73\xd2\x70\x1e\x7d\x0b\x83\x00\xb0\x28\x32\x91\xa0\x11\x4a\xc6\x77\x5a\x49\x08\x83\xdb\x0a\x97\xd2\x5a\x48\x51\x2d\x57\xd0\xa7\x0a\x9a\x28\x69\x58\x65\x19\xf1\xf2\x13\xb3\xe2\x2b\xd2\x85\x92\x9a\xae\x45\x5e\x64\xd4\xa0\x02\x28\x58\x15\xc4\x46\x50\x7b\x30\x08\x80\x2a\xbc\xfb\xe9\xc5\x54\xab\xc8\x98\x77\x57\x02\x10\x86\xfa\x2b\x01\x98\x5d\x51\x19\x03\x6d\x58\xc8\x0d\xb4\x1b\xcf\xb3\x70\x88\x40\x66\xdc\xb5\x00\xb7\x0f\x86\x7e\x98\x9e\x11\xff\x8d\xcf\x61\xef\x9c\x43\xa9\xd5\x1d\x25\xa6\x46\x59\x4c\x8d\xf0\xec\xdb\x0d\x48\x73\xb9\xbc\x48\x8c\x78\xa0\x6b\x83\xa6\x74\xd1\x78\xcc\xee\x0f\x7c\x54\x39\x0a\x39\x9a\x53\xb4\x77\x76\x92\xea\x0b\xa3\xf1\x1e\x12\x26\x34\x94\x2e\xb1\x13\x39\xac\x15\xe7\x76\x01\x52\x34\x74\x23\x72\x82\x61\xb0\xbe\xbb\x52\xd2\x09\x8b\xa2\xea\x8d\x57\x4b\x7a\x5d\x9f\x9f\x90\x6d\x57\x9e\xaf\x98\x89\xd4\x7b\x62\xa5\x54\x46\x28\x7f\xa9\x40\x8d\xcf\xdd\x1b\x1d\x50\x48\x43\x1b\xe2\x3e\x52\x62\x3e\x35\xa9\x65\x91\xbe\x3f\xa9\x13\x3a\xc8\x30\x4a\xbd\x34\xff\x7f\x40\x3d\x4e\xb3\x21\x81\x0e\xe8\xe3\x4f\xfe\x41\x06\x3b\xc4\x69\x63\xed\x93\xe6\xcd\xa1\x94\x9a\x78\x99\x6c\x29\xb9\xff\x82\x22\xbb\xc4\x5d\xa6\x30\x1d\x97\x8e\x1c\x45\x76\x74\xcb\xad\x76\x8d\x9a\x4e\x4a\x66\x92\x66\x99\xf6\xc8\xf8\x52\x43\x3a\x7a\x58\xf4\x68\x15\xbc\x5c\x39\x64\xf4\x34\xb5\xf3\x51\x7b\xbc\x11\xa7\xdd\xeb\xa5\xf9\xcb\xde\x7b\xc9\x3e\x62\xa9\x6b\xcb\xc7\xfa\x11\xe2\xef\xb9\xdf\xbf\xc5\xab\x00\xfd\xa0\x06\x36\xfc\x52\xd0\x3f\xd2\x17\x84\x69\xb9\xf3\x29\xc3\xdb\x6b\x72\x38\xc1\x7c\x71\x8e\xb2\x78\x2a\x41\x98\x36\x42\x1b\xe2\xa3\x31\x73\xd6\x2a\x93\xd6\x8f\x8a\x7d\x2a\xec\x55\xd6\xca\x97\x06\x70\x14\xe2\x73\xc3\xf7\xab\x26\xbe\xa3\x05\x36\x7d\xb0\x18\x75\x4f\x3e\x11\xf9\x8d\xf1\x87\x76\x0f\xb6\x4a\xdb\x9e\x3b\x39\x3d\x9b\x2f\xe6\x8b\xf9\x89\x7d\x09\x0a\xb9\x56\xed\xd3\xae\xcf\x75\xb8\xd9\x52\x94\x30\xae\x22\x2c\xc4\x2c\xc2\xd2\xa8\x68\x43\x92\xb8\xea\x69\xa8\x47\x92\x30\xf6\xc9\x57\x43\x33\x91\xdc\xef\x70\x35\x4f\x54\x1e\xdb\x73\x17\x97\x9f\x6b\xdc\x03\xb1\x6e\x2e\x3d\x39\x83\xc6\x9f\x02\xcd\xd6\xbd\x2a\xe3\x2a\xd6\xb8\xca\x78\x6c\xd5\x79\x5f\x99\xda\xeb\x27\xdf\xa3\x03\x9c\x90\x47\xf6\xbf\xa8\x3a\x1f\x09\x19\xe9\x9d\x36\x94\xc3\xac\x33\x0f\xc9\x10\xb7\xcf\xdd\x20\x08\x9c\x08\x0f\x6e\x74\x44\x04\x2b\xf5\xb0\x52\xe9\x6e\xbf\xd6\x88\x00\x14\x35\x2f\x96\x29\x1a\xdc\xef\x32\x7d\x2f\x05\x53\xd5\x0a\x6b\xcc\x34\xb9\x0d\x9d\x6c\x29\xc7\x9e\xc8\xff\xcb\xb4\xae\x6e\xfa\x27\xee\x3c\xb1\x63\xff\x5c\x1c\x3c\x74\xec\x9f\xdb\x26\xb6\xb6\xa3\xbb\x83\xe6\x74\xb1\xe8\x8e\x99\x17\x23\x7c\xa3\x5b\x6e\x68\xfa\xfc\x72\x6d\x8e\x9b\x4e\xb6\x6d\x27\xd7\xf8\xdb\xb0\xc1\xd6\xb4\xac\xeb\xce\x07\x7c\x1c\xab\xfa\x5f\x5a\xd7\xa1\xa8\xfe\x19\x65\x3d\x90\xc4\x81\x5b\xed\x38\xf9\xef\xd8\xd6\x5f\xf9\x8e\x7c\x67\x73\xb5\x1a\xc3\x2a\x2d\x93\xd7\xbf\x73\xad\xd7\x7b\xd8\xd6\x98\xc2\x6d\x3d\xe2\x66\x63\x5b\x13\x4e\xe7\x0b\x08\x9f\x7f\x06\x00\x00\xff\xff\x52\x5a\xce\x1f\x55\x0f\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

