// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5b\x8f\xdb\xb8\x15\x7e\xb6\x7f\x05\xa1\xf6\xa1\x05\x06\xb6\x93\xa6\x2d\xba\x40\x80\x66\xd3\x45\x11\xb4\xdb\x0c\x76\xb2\x7d\xc9\x06\x06\x2d\x1d\xdb\x4c\x28\x52\x25\xa9\x64\xdd\xc1\xfc\xf7\x85\xa8\x8b\x75\x21\x29\xd9\x23\x5f\x64\x68\x9f\x76\xe4\x43\xea\x5c\xbf\x73\x0e\x45\x32\x8f\xd3\x89\xb7\xc2\x12\xee\xb1\xda\x7a\xdf\x21\x6f\x8e\x23\xe2\xdd\x4d\x27\x9e\xcf\x99\x8c\x43\x90\xde\x77\xe8\xe3\x74\x32\xf1\x70\x14\x51\xe2\x63\x45\x38\x9b\x7f\x96\x9c\x79\xd3\xc9\xa7\x84\x2e\x80\x35\x61\x24\x79\x9c\x90\x3e\x6a\x52\x8c\x97\xff\x04\x16\x80\xf8\xb0\x8b\x20\x7b\x3a\xf1\x54\xfa\x87\x27\x95\x20\x6c\xe3\x4d\x27\x93\xa7\xbb\x9c\xfc\x67\x09\xe2\x2d\x17\x11\x17\xfa\x0d\xc5\x98\x48\xf0\x08\x84\x22\x90\x4f\x9e\xd0\x07\x81\x00\xb9\x7f\x60\xa4\x9a\x4c\xbc\x87\xf4\x3d\xfb\x27\x26\x16\x92\xff\x34\x1b\xfa\xf7\xff\x62\x4a\x02\xe3\x88\x15\xe7\x14\x30\x2b\x86\x4c\x2b\x23\x0b\x32\xbe\xfa\x0c\xbe\x4a\xa9\xb2\x1f\x3d\x1f\x28\x8d\xb6\x9c\xc1\x70\x38\x26\x6a\xb7\x2c\x4f\x6b\xe1\xf7\x1d\x53\x7f\x79\x65\x7c\x39\x61\x0a\x36\x20\xce\xc5\xaf\x00\xac\x20\x58\x62\x55\x62\x79\xcd\x45\xa8\x1f\x78\x01\x56\xf0\x81\x84\xe0\xd5\xe7\x2a\x2b\x35\x9f\x0b\x7c\xce\x78\x48\xfc\xa5\xcf\x83\xe1\x58\x6c\x4d\x84\x54\x4b\x86\xc3\xe1\xb0\x4c\xf1\xd0\x38\x1e\x14\xb3\xc3\x42\x1c\x01\x1b\x22\x15\x88\x61\x45\x5d\x1c\x05\xbd\xe1\x4e\x2c\x41\x54\x31\xd7\x88\xa5\x9a\xbd\x74\x8c\x81\xb5\x2c\xa1\x4a\xa9\x96\x6f\xb1\x82\x0d\x17\x3b\x67\x2a\x0d\x40\xfa\x82\x44\xe5\x94\xdb\xc2\x66\x07\x0e\xcd\xd1\xe2\x9a\x54\x2a\xac\x62\x69\x20\xae\xd8\xa6\xb3\xe8\xef\x1e\xee\x9d\x52\xf7\x99\x2e\x2e\xa9\x8f\x3e\xbd\xb0\xab\x6e\xdf\x3f\x8c\xaa\xed\x5f\xb5\x3e\x67\x4a\x70\x4a\x41\x2c\x7f\x10\x82\x8b\x9f\x40\x46\x9c\x49\x78\x20\x61\x44\xc1\xa9\x71\x48\xe8\x5b\x11\x33\xc2\x02\x87\xb2\x82\x7f\x44\x41\xf5\x89\x0d\x44\xf7\x28\xba\xa7\xc0\x42\xe0\x5d\x13\x65\x15\xfc\xaa\xba\xc0\x72\x17\x8c\x3d\x4c\x6d\xff\x49\x8c\x42\x73\xbd\x59\x34\xd6\x79\x3a\xb9\xf4\xb1\x6a\x4c\x56\xd5\x98\x51\xd3\x66\x44\xb5\xe8\xa1\x90\xbf\x92\x99\x2c\x35\x74\x41\x5c\x75\xf6\xb6\xa9\xeb\xfe\x6e\xcb\x7b\x4f\x15\xbf\x37\x18\xa4\xa6\xbb\xc2\x01\x9a\xaa\x23\x32\x3a\x4a\x75\x26\xec\x70\x45\xdb\x10\xb4\x9a\x0f\x30\x01\xc9\x31\xb2\xf5\x67\xa5\x10\xb3\x78\x8d\x7d\x15\x0b\x10\xf2\x20\x3b\x61\x5f\x91\xaf\x46\x65\x59\x84\x5f\x09\xcc\x8c\xb6\x30\x2b\xf7\xa2\x7e\x70\x7d\x86\xe2\x72\x8c\xa6\xab\x34\x52\x10\xb2\xe5\x1b\x1d\x0b\x0f\x15\x01\xac\x0b\x5d\xc9\x80\x7f\xf0\x10\x93\x96\xf5\xad\x5a\x7c\x39\xeb\x99\x3e\x0b\x2e\x73\x37\x70\xdd\x2d\xd8\x49\x8a\xc4\x73\x95\x7d\x94\xa7\x0b\xaa\xcb\xb7\x44\xb9\x1b\xb5\x93\x88\x19\x09\xfe\x95\x30\x1f\x7a\x6a\x3b\xf7\xd2\xf0\x98\xa9\x96\xce\xb3\x5f\x81\x0e\xe1\xee\x3e\x93\xda\xdd\xc7\xa4\x22\x74\xd1\xcc\x49\x1c\xf1\x10\x81\x7c\x52\xe6\xbd\x53\x72\x38\x21\x98\x1b\x9d\xca\xfa\x8e\xe7\x21\xf0\x5e\x05\xda\x5c\x57\xa0\x85\x9e\xe4\xc9\x95\x78\x98\x3c\x26\xa7\x6d\x95\xeb\xea\x94\xc0\x45\xb8\xfc\xb1\x54\x9c\x1e\x97\x2b\x8d\xed\x7c\xad\x10\x3d\x5b\x62\xed\x8e\x0d\xe7\xca\x3c\x89\x92\x57\xd8\xda\x28\x1f\xa3\xdc\xdb\x56\x98\x12\x98\xc9\xa5\xfa\xdb\xf7\x6d\x4a\xab\xaf\xb4\x34\xd6\x59\x5a\xf0\xd3\xb0\xc2\x52\x84\x52\x65\x75\xe5\x68\x51\xf4\x4a\xb3\x8f\x29\xfd\x1e\xfb\x5f\x9c\xb2\x30\xf8\xb6\x8c\xb0\x94\xdf\xb8\xe8\x1a\x36\x8a\x7f\x81\xd6\xb5\xe4\xce\x4c\x6e\xc1\xff\xf2\x23\x26\xf4\x1e\xef\x28\xc7\x81\x7b\x21\x2c\xc4\x84\xf6\xfe\xe6\x96\x15\xa5\xcc\xf5\x63\x21\x80\xa9\x65\x50\x29\xee\xdb\x02\x26\xa5\x76\xba\x8a\xb1\xf6\x36\x74\xe0\x9d\xd6\xee\x8c\x1d\xa1\xbb\x6f\xea\x34\xaf\x79\xc9\xcb\xca\xbd\xb1\x79\x70\xbc\xa9\xfc\x2e\x53\x17\xe1\x68\x24\xf6\xbd\x44\x75\x16\x63\x47\x51\x15\xaa\xf6\x0e\x4b\x62\xac\x0c\xa9\x25\xc7\x4e\xba\x33\x76\xb2\x47\xdb\x64\x5a\x9b\xdf\x2c\xa7\x13\x6a\x3a\x07\xc8\xd1\x9b\x35\x9c\x49\xd7\xb0\x55\xc2\x49\xdf\xd8\xa8\xe0\x4c\x16\xb6\x6f\xfb\xae\x57\x18\xbf\xac\xbb\x06\x98\xbe\x6b\xbb\xe8\x0f\x69\xd8\x0e\x50\x8d\xed\x8b\xea\xb3\x60\x71\xcd\xc5\x06\xd4\xf9\x60\x98\xf2\x0d\x61\xbd\x81\x7f\xae\xc5\x8e\x19\xad\x2b\x93\x11\x08\xc9\x19\xee\x94\xa4\xae\x2a\x1c\x0e\x76\xed\x8d\xde\xd4\x75\xa2\x38\xe8\x24\x68\x57\x9b\xe4\xde\xdf\xc5\x26\x3e\x0f\x23\xcc\x76\x87\xf0\x7a\x88\xbb\x9d\x1c\x40\x42\xbe\x22\xb4\xb3\x96\x0f\x2b\xe7\xb4\x32\x33\x82\x9e\x0c\x93\xd6\x53\xff\x4e\x22\xfb\xfd\xbf\x5a\xfa\x0f\xdd\xd1\xb6\xae\x45\x1a\x72\x91\x9d\xda\x14\x84\x2e\x6a\x5b\xb9\xe2\xa8\x57\x2a\x05\x8b\xb9\x62\x71\x95\x2c\xa5\x9a\xa5\x5a\xfa\x58\xaa\x96\x4a\x65\x63\x80\x8c\x5b\x92\xae\x0e\x70\x2d\xb2\x35\x36\x28\x4e\x5c\xb5\xdc\x85\x65\x33\x97\xe7\x2d\xb5\xa0\xdd\x50\xe5\xb9\x2d\x85\x4f\x8b\xf6\x86\xe4\x19\x26\x94\xbd\x21\xf1\x0c\x39\xe1\x86\xa4\xbb\x59\xc1\x6e\x17\x89\x2d\xed\xc5\x0d\x49\x68\x69\xcd\x7b\xc1\xe3\xc6\x66\xcf\x89\x33\x2f\x15\x62\x94\x56\x0e\xcc\x22\xec\x5b\xff\x5a\x89\x6a\x65\x6c\x3f\xc2\xf2\x71\xd6\xba\x95\x3f\xef\x7b\xc6\x9a\x6b\xac\xb9\x4a\x6c\x8c\x35\x57\x36\x85\xad\x22\xe9\x32\xb8\xde\x69\x77\x1e\x68\x2b\x14\xba\x8c\xbd\x5d\x1f\x1e\x38\x96\x1b\xba\x70\x3b\x9e\x4f\x2b\x83\x8d\x73\xf7\xf8\xb1\x66\xaa\x7f\xf3\xb6\x5c\x6a\x2d\xbe\x78\xf9\xd7\xd9\x62\xb6\x98\xbd\xd0\x67\x08\x09\x5b\xf3\x6c\xfa\xda\x57\x02\xef\xc3\x16\x90\x2f\xf0\x0a\xe1\x88\xdc\x21\x1c\x2b\x8e\x36\xc0\x40\x24\x66\xf2\xd2\x2f\x6e\x44\xe9\x55\x8d\x94\x94\x12\xff\xcb\x0e\xaf\x66\x3e\x0f\xe7\x7a\xdc\x9b\xfb\x77\x29\xdd\x57\x10\x32\x9b\xf4\xcf\x2f\xbc\x8c\x9f\x08\xab\x6d\x71\x1e\x71\x8e\xa5\x04\x35\xf7\xeb\x27\x22\x4a\x4b\x99\x0d\xfe\x72\x62\x24\x40\xc5\x82\x21\x4a\xa4\x42\x04\xaf\x50\xf6\x43\x12\x10\xc5\x92\x8a\xc0\x21\xa8\x74\x1b\xe5\xc7\x54\x95\xc5\xda\x44\x6d\x5a\xb5\x05\x24\xc1\x8f\x05\x51\x3b\xa4\xd5\x7f\x87\x36\xa0\x10\x51\x68\x2d\x78\x88\xf4\x82\x27\x12\x3c\x56\xa5\xcd\x6b\xfa\x93\x92\xb7\x05\x9c\x40\x42\xf1\x34\x0b\xf2\xcc\x88\xc5\x63\x01\xff\x8b\x89\x80\xc4\x1f\x95\x88\xa1\xf1\x29\xc0\xf0\xa9\xfe\x53\xb1\x64\x9c\xae\xcd\x94\x97\x27\x5f\x2e\x16\xe5\xa5\x96\x9a\x38\xfb\xd7\x4a\x7f\x0b\x21\xae\xf8\xe7\xef\x05\xac\x13\xa2\xdf\xcd\x4b\x67\x44\xe7\xb6\x4d\xd6\x16\xf7\x7d\xb5\x78\xe1\x78\xff\x8e\xc7\x08\x0b\x40\x8c\xab\xc4\x87\xb6\x5c\x90\xff\x67\xfe\x63\xe3\xca\x56\xa0\xd4\xf6\xd1\xbb\x68\x8d\xfb\xe9\x53\x4b\x35\xf6\xd4\x3b\x22\xb5\x86\x02\x15\xca\xca\xfe\xfa\x06\x5d\x63\x9f\x7d\xcb\x5b\x0e\x86\x4e\x13\x46\xe5\xe1\xc8\xb8\x5a\x1a\x74\x6d\x45\xb1\x86\x41\xff\xe4\x30\xe8\x9a\x8b\x15\x09\x82\x24\x2c\x12\xdb\x6e\xf1\xd7\xc4\xb8\x08\xfb\x3e\x48\x89\xb6\x20\x60\x34\xee\x29\x8d\x5b\xe8\xbf\xb3\x5d\xab\x09\x05\x6f\x4a\x20\x58\xde\xc6\x9c\x0e\xfb\x34\xcd\x86\xa4\x2b\xc2\x19\x30\x13\x19\x75\xc2\x64\x22\xa3\x0a\x1c\x63\x4a\x11\x91\xe8\x0f\x30\xdb\xcc\x10\x11\x98\x25\x85\xf8\x1d\x9a\xcd\x66\x7f\x1c\xb1\xf9\xb9\xd8\x5c\x3e\xc5\x31\x62\xf3\x40\xc2\x77\xc4\xe6\x1b\x36\xee\x45\xb0\xd9\x7c\x4c\xc8\x85\xd2\xe5\xbd\x9b\xb2\x81\xd7\xe9\xc7\x4a\x54\x99\x36\x43\xf0\x37\x51\x44\xe1\x0e\x3d\xe0\x50\xc6\x6c\x33\x42\xf8\xb3\x21\xbc\x6a\xbb\x11\xc4\x07\x12\xe7\x23\x88\xdf\xb0\x71\x2f\x02\xe2\xbc\x1b\x72\xf3\x26\x5c\x17\xe5\x35\x25\x2c\xfe\x75\xac\xad\xfb\x01\xe6\xd2\x91\xce\x11\x95\x07\x12\xb8\x23\x2a\xdf\xb0\x71\xcf\x8c\xca\xf9\x39\xaf\x79\x7a\x74\x6f\xfe\x58\x9c\xf7\x5a\x92\xe0\xa9\x13\x56\x1f\x03\xc2\x75\x64\x8d\xb0\xda\x36\x71\xb5\xcc\xcb\x70\xe0\xb5\x7e\x1a\xd2\x1a\x86\x27\x83\x75\xe3\xcd\x2d\x56\x36\x5e\x5d\x92\x0d\x97\xf3\xe6\x8a\x6c\xf3\xdc\xc6\x89\xcb\x2e\xde\x7a\x66\x57\x28\x78\xec\x5f\xfe\x22\x4a\xe6\x8f\xfb\x63\x97\x97\x0e\xdd\xd2\x01\xd0\xe1\x05\xee\xfe\xcc\xeb\x18\xbb\x27\x89\xdd\x38\xa2\x1c\x07\xf3\xc7\x90\x07\x31\x85\xbd\xaf\x46\xe9\xb7\x5b\xb3\xb3\xfe\xac\x07\x21\xc2\x14\x47\xba\x88\xdf\x49\x05\xe1\xe9\x5c\x38\x65\xee\x58\xf7\xbd\x73\xb3\x30\xb8\x2e\x64\x6c\x03\x0c\x74\x63\x1b\x30\x1a\xf7\x34\xc6\x3d\x73\x1b\x10\x4b\x10\x73\xe3\x41\xca\xd8\x0e\xc8\x10\x10\x55\xba\x29\x1b\x11\x89\x62\x09\x01\x5a\x73\x81\xb2\x73\xc8\xc9\x03\x81\xd2\x3d\x4f\xb7\xb0\x58\xd3\x82\xea\x75\x1e\x56\x3c\xd8\x19\xda\x9a\xf4\x24\xd8\x32\xc0\x0a\x1b\x19\x59\x63\x2a\xe1\xf0\xec\xdd\x38\x0d\x6b\xf2\x90\xb3\x56\x54\xa6\xfb\xd4\xad\x70\x34\xe6\x97\x06\xdd\xed\xe6\x97\x8b\x16\xa7\x49\xa0\x38\x70\x50\x83\x4a\xb7\x9a\x34\xc5\x1f\x0d\x72\x84\xf5\x58\x91\x5e\x00\x38\x2a\x07\x9c\x2f\x8e\x1c\xc6\x13\x9a\x56\x4f\xbb\x92\x6e\x6c\xc0\x0e\xcf\xf7\x79\xde\xbd\x19\x95\x72\x09\x0f\x20\x65\x92\xf0\xf5\x1f\xb2\xc8\xf5\x32\x7d\x7c\x0b\x79\xfe\xfc\x0e\x6f\xbf\x40\x78\x4c\x98\x63\xc2\x1c\x1b\xb2\x4b\x1b\xb7\xdf\x86\xac\x13\x20\xcf\x35\xbe\x72\xb5\x2d\xdd\x3c\xd7\x8a\xcd\x6f\x28\x7d\x9f\x8c\xa8\x61\x34\xa6\x14\xf1\x35\xf2\x29\x01\xa6\x64\x0e\xd5\x12\xad\x62\x55\xe0\x37\x67\x37\xd1\xa3\x8d\xd8\x3d\x86\xf7\x88\xdd\xa3\x71\x2f\x84\xdd\x21\x26\x74\xae\x2f\xed\xeb\xd6\x42\x16\xf7\xfb\x21\xfd\x7f\x28\x19\x3f\xf8\x66\xb2\x71\x5d\xa2\x49\xbf\xe7\x6f\x28\x9b\x77\x29\xf6\x67\xf7\xfc\x3a\xa3\xb9\x8f\x29\x5d\x55\xee\xb3\x74\xac\xa1\xa6\xd7\x98\xbd\xcd\xae\xc0\x44\x44\xea\x4f\x5b\xb1\xa0\xc8\xe7\x21\x61\x9b\x34\x85\xca\x24\x3d\xeb\x63\xf4\xe8\x17\xf5\x8b\xfa\xfb\x4f\x49\x32\x45\x8f\xfa\x8f\x84\xf6\x35\x6a\xbe\x5e\xff\x18\x82\xda\xf2\x00\xbd\x46\x51\xac\x50\x66\x71\xf4\x1a\xe5\x57\x6e\x6a\x9a\x97\x8b\x45\xf2\xa8\xc8\x61\xb3\x6a\x0e\xd3\x34\xaf\xea\x34\x86\x86\x14\x3d\x0d\xd5\x59\xf3\x0b\x48\x2f\xee\xa4\x47\x14\x12\x17\x5d\xfa\xe8\x23\x5c\xea\x17\xf9\xb9\xb0\x32\xa5\xbd\xcf\x2f\x0e\x1b\xa6\xbb\x65\x02\x8f\xce\x76\x46\x67\xab\xdd\x0f\xe2\x84\xe4\x1f\x02\xa2\xee\xb3\x01\x69\xdb\xa2\xbf\x68\x41\x40\x14\xca\x27\x42\x91\xe0\x6b\x42\x6f\xa2\x5f\xba\xfe\x6f\x5a\xf5\x6b\x2d\x2f\x1e\x3a\x83\x5c\x9d\x1e\x5b\xce\x06\xdd\xd8\x72\x8e\xc6\x3d\x8d\x71\xcf\xda\x72\x46\xa5\xdb\x6f\x9c\x2b\x84\xe9\xba\x62\xd2\x65\x24\x19\x2d\x49\x44\xd9\x13\x9d\x78\x9e\xb7\xa9\xee\xda\xd2\xda\xb5\x67\x85\x11\x8e\x1b\x74\x23\x1c\x8f\xc6\x3d\x8d\x71\xcf\x0a\xc7\xf9\x85\x94\xdd\x7a\xda\x81\x76\xb1\xf5\x6b\xcd\x4d\xea\xbb\x62\xf4\x1d\x54\x27\x9b\xdf\x24\x26\x78\x10\xa7\xff\x12\xd7\x47\xfd\xaf\x60\x47\x11\x25\xd9\x21\x90\xcf\x52\x6f\xad\x4b\x34\x9e\x72\xbd\x27\xdb\x2a\x15\x15\x3f\x7d\xc3\x9b\x8d\xf6\x4c\xef\xe5\x6c\xe1\x4d\x9f\x7e\x0b\x00\x00\xff\xff\x72\x61\x9f\x64\x75\x85\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

