// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5b\x8f\xdb\xb8\xf5\x7f\xb6\x3f\x05\xa1\xff\xff\xa1\x05\x06\xf6\x24\x4d\x5b\x74\x81\x00\xcd\xa6\x8b\x22\x68\xb7\x19\xec\x64\xfb\xb2\x1b\x18\xb4\x74\x6c\x33\xa1\x48\x95\xa4\x92\x75\x07\xf9\xee\x85\xa8\x8b\x75\x21\x69\xd9\x23\x5f\x64\x70\x9f\x76\xe4\x43\xea\x5c\x7f\xe7\xf0\x88\x64\x9e\xa6\x93\x60\x89\x25\x3c\x60\xb5\x09\xbe\x43\xc1\x1c\x27\x24\xb8\x9b\x4e\x82\x90\x33\x99\xc6\x20\x83\xef\xd0\x2f\xd3\xc9\x24\xc0\x49\x42\x49\x88\x15\xe1\x6c\xfe\x49\x72\x16\x4c\x27\x1f\x33\xba\x08\x56\x84\x91\xec\x71\x46\xfa\xa4\x49\x31\x5e\xfc\x1d\x58\x04\xe2\xc3\x36\x81\xe2\xe9\x24\x50\xf9\x1f\x81\x54\x82\xb0\x75\x30\x9d\x4c\xbe\xdd\x95\xe4\x3f\x4b\x10\x6f\xb9\x48\xb8\xd0\x6f\xa8\xc6\x24\x82\x27\x20\x14\x81\x72\xf2\x8c\x3e\x8a\x04\xc8\xdd\x03\x23\xd5\x64\x12\x3c\xe6\xef\xd9\x3d\x31\xb1\x90\xfd\xa7\xd9\xd0\xbf\xff\x1b\x53\x12\x19\x47\x2c\x39\xa7\x80\x59\x35\x64\xda\x18\x59\x91\xf1\xe5\x27\x08\x55\x4e\x55\xfc\x18\x84\x40\x69\xb2\xe1\x0c\xc6\xc3\x31\x51\xdb\x45\x7d\x5a\x0b\xbf\xef\x98\xfa\xd3\x2b\xe3\xcb\x09\x53\xb0\x06\x71\x2e\x7e\x05\x60\x05\xd1\x02\xab\x1a\xcb\x2b\x2e\x62\xfd\x20\x88\xb0\x82\x0f\x24\x86\xa0\x3d\x57\x5d\xa9\xe5\x5c\x10\x72\xc6\x63\x12\x2e\x42\x1e\x8d\xc7\x62\x2b\x22\xa4\x5a\x30\x1c\x8f\x87\x65\x8a\xc7\xc6\xf1\xa8\x98\x1d\x17\xe2\x08\x58\x13\xa9\x40\x8c\x2b\xea\xd2\x24\x1a\x0c\x77\x52\x09\xa2\x89\xb9\x46\x2c\xd5\xec\xe5\x63\x0c\xac\xe5\x09\x35\xe4\x4c\x09\x4e\x29\x88\xc5\x0f\x42\x70\xf1\x13\xc8\x84\x33\x09\x8f\x24\x4e\x28\x38\x73\x2b\x64\xf4\x7b\xf5\x9f\x60\x81\x63\xd9\xd0\x26\x51\xd0\x7c\x62\x33\xc9\xce\x26\x3b\x0a\x2c\x04\xde\x76\x6d\xa6\xe0\x37\xd5\xc7\xc8\x7d\x2c\x76\x98\xda\xfe\x95\xd9\x90\x96\x7a\xb3\x68\xac\xf7\x74\x72\x11\x62\xd5\x99\xac\xa9\x31\xa3\xa6\x83\x08\x64\x28\x48\x52\x2f\x89\xac\x7a\xa8\xe4\x6f\xf8\xb9\x25\x23\x57\xc4\x4d\x4c\xdb\x37\xb5\x54\x58\xa5\xd2\x44\xdf\x8c\xa2\x6f\x0d\xd7\x36\x18\xa4\xa5\xbb\xca\x01\xba\xaa\x23\x32\x39\x4a\x75\xa6\x9a\xc0\x15\x9c\x63\xd0\x6a\x39\xc0\x84\x3b\xc7\xc8\x36\x9c\x95\x62\xcc\xd2\x15\x0e\x55\x2a\x40\xc8\x83\xec\x84\x43\x45\xbe\x18\x95\x65\x11\x7e\x29\x30\x33\xda\xc2\xac\xdc\x8b\xfa\xc1\xf5\x19\x8a\x4b\x1f\x4d\x57\x69\xa4\x28\x66\x8b\x37\x3a\x16\x1e\x1b\x02\x58\x97\xcd\xd9\x80\xbf\xf1\x18\x93\x3d\xab\xe5\x56\x7c\x39\x8b\x90\x21\x17\x52\xc6\xdc\x75\xe5\x05\x5d\x8f\xfa\xcb\xbc\x16\x70\x56\x76\x43\x54\x89\x3d\xea\x17\xca\xf3\xf6\xcc\xe2\x2d\x51\x5b\xa7\x4f\x9c\x44\xcc\x44\xf0\x2f\x84\x85\x30\x50\x11\xbb\x93\x86\xa7\x4c\x89\x73\x0a\x74\x08\x77\x0f\x85\xd4\x4e\xf6\xc2\x5c\x84\x3e\x9a\x39\x89\x23\x1e\x22\x50\x48\xea\xbc\xf7\x4a\x0e\x27\x04\x73\xa3\x53\x59\xdf\xf1\x3c\x04\xde\xa9\x40\x9b\xeb\x0a\xb4\x30\x90\x3c\xa5\x12\x0f\x93\xc7\xe4\xb4\x7b\xe5\xba\x3a\x25\x70\x11\x2f\xde\x62\x05\x6b\xbe\x07\x42\xcc\xe9\xca\x05\x78\x27\x41\xd1\x76\xf5\x62\xce\x6a\x7d\x22\x3a\x93\xfc\xdd\xe3\x83\x1b\x98\x06\xcc\xf7\x97\x54\xc7\x99\x33\x6d\xa6\xda\x1f\x6b\x2b\x9e\xe3\x0a\x30\xa3\x08\xad\xd5\xcd\xd9\xaa\xb5\xfe\xd6\x3b\xa7\x92\xdf\x3f\x7a\xf7\x3d\x8d\x66\x97\xd8\xda\xd7\x3a\xc6\x6d\x6f\xdb\x15\x95\xc0\x4c\x2e\xd4\x5f\xbe\xdf\xa7\xb4\x76\x63\xb4\xd3\x16\xdd\x53\xee\x18\x1a\xa2\x55\xe6\x6b\x34\x43\x8f\x16\x45\xb7\x99\x43\x4c\xe9\xf7\x38\xfc\xec\x94\x85\xc1\xd7\x45\x82\xa5\xfc\xca\x45\x5f\x40\x52\xfc\x33\xec\xcd\x9e\xbd\x99\xdc\x60\xb6\x86\x87\x16\x07\x66\x1c\x48\x85\x00\xa6\x0e\x65\xf7\x10\x09\xfb\x73\x0d\xe1\xe7\x1f\x31\xa1\x0f\x78\x4b\x39\x76\xf3\x0d\x31\x26\x74\xf0\x37\xef\x69\x5b\x37\x55\x16\x35\x3a\x08\xfb\xc2\x3c\xa7\x76\x3a\xb8\x71\x81\x6f\x68\xf3\xf5\xfa\x40\x60\x6c\x3b\xb9\x9b\x33\xbd\xe6\x35\xf7\xd5\xad\xdc\x1b\x3b\x14\x8e\x37\xd5\xdf\x65\x6a\x55\x58\xf5\x3c\x99\xec\x1a\x16\xcd\x59\x8c\x6d\x8b\xa6\x50\xad\x77\x58\xaa\xef\xc6\x90\x56\x05\xde\x4b\x77\xc6\x76\xd9\xd1\x36\x99\xb6\xe6\x37\xcb\xe9\x04\xc8\xde\x01\x72\xf4\xfe\x12\x67\x11\x66\xd8\xdd\xe1\xa4\xef\xec\xad\x70\xa6\x38\xdb\x76\x04\xd7\x2b\x8c\x9b\x01\x5c\x03\x4c\x9f\xe2\x9d\xc0\x79\x40\x57\xe8\x00\xd5\xd8\x3e\x02\x3f\x0b\x16\x57\x5c\xac\x41\x9d\x0f\x86\x29\x5f\x13\x36\x18\xf8\x97\x5a\x1c\x38\x4b\x25\x20\x24\x67\xb8\x57\x92\xba\xaa\x70\x38\xd8\xb5\xd7\x7a\x1f\xda\x89\xe2\xa0\x97\xa0\x7d\x6d\x52\x7a\x7f\x1f\x9b\x84\x3c\x4e\x30\xdb\x1e\xc2\xeb\x21\xee\x76\x72\x00\x89\xf9\x92\xd0\xde\x5a\x3e\xac\xaa\xd3\xca\x2c\x08\x06\x32\x4c\x5e\x4f\xfd\x33\x8b\xec\xf7\xff\xd8\xb3\x6a\xd2\x6d\xb3\xda\xab\xcd\x1f\x3c\x0c\xb9\xc8\x4e\x6d\x0a\x42\x17\xb5\xad\x5c\x71\xd4\x2b\x8d\x82\xc5\x5c\xb1\xb8\x4a\x96\x5a\xcd\xd2\x2c\x7d\x2c\x55\x4b\xa3\xb2\x31\x40\xc6\x2d\x49\xd7\x06\xb8\x3d\xb2\x75\xf6\x54\x4e\x5c\xb5\xdc\x85\x65\x33\x97\xe7\x7b\x6a\x41\xbb\xa1\xea\x73\x5b\x0a\x9f\x3d\xda\x1b\x93\x67\x98\x50\xf6\x86\xc4\x33\xe4\x84\x1b\x92\xee\x66\x05\xbb\x5d\x24\xb6\x2c\x2f\x6e\x48\x42\xcb\xd2\x7c\x10\x3c\xee\xec\x4f\x9d\x38\xf3\x52\x25\x46\xad\x73\x60\x16\x61\xb7\xf4\x6f\x95\xa8\x56\xc6\x76\x23\x2c\x3b\x40\xac\xa7\x0f\xca\x75\x8f\xaf\xb9\x7c\xcd\x55\x63\xc3\xd7\x5c\xc5\x14\xb6\x8a\xa4\xcf\xe0\xf6\x4a\xbb\xf7\x40\x5b\xa1\xd0\x67\xec\xed\xfa\xf0\xc8\xb1\xdc\xb0\x0a\xb7\xe3\xf9\xb4\x31\xd8\x38\xf7\x80\x9f\x98\xa6\xfa\xb7\x60\xc3\xa5\xd6\xe2\x8b\x97\x7f\x9e\xdd\xcf\xee\x67\x2f\xf4\xb1\x47\xc2\x56\xbc\x98\xbe\xf5\x95\x20\xf8\xb0\x01\x14\x0a\xbc\x44\x38\x21\x77\x08\xa7\x8a\xa3\x35\x30\x10\x99\x99\x82\xfc\x3b\x21\x51\xba\xab\x91\x93\x52\x12\x7e\xde\xe2\xe5\x2c\xe4\xf1\x5c\x8f\x7b\xf3\xf0\x2e\xa7\xfb\x02\x42\x16\x93\xfe\xf1\x55\x50\xf0\x93\x60\xb5\xa9\x8e\x50\xce\xb1\x94\xa0\xe6\x61\x7b\xe7\x4a\xad\x95\xd9\xe1\xaf\x24\x46\x02\x54\x2a\x18\xa2\x44\x2a\x44\xf0\x12\x15\x3f\x64\x01\x51\xb5\x54\x04\x8e\x41\xe5\x7b\xb5\x7f\xc9\x55\x59\xf5\x26\x5a\xd3\xaa\x0d\x20\x09\x61\x2a\x88\xda\x22\xad\xfe\x3b\xb4\x06\x85\x88\x42\x2b\xc1\x63\xa4\x1b\x9e\x48\xf0\x54\xd5\x76\xc8\xea\x4f\x4a\xc1\x06\x70\x06\x09\xd5\xd3\x22\xc8\x0b\x23\x56\x8f\x05\xfc\x27\x25\x02\x32\x7f\x54\x22\x85\xce\xa7\x00\xc3\x7e\xa0\x8f\x55\xcb\x38\xef\xcd\xd4\xdb\x93\x2f\xef\xef\xeb\xad\x96\x96\x38\xbb\xd7\xca\x70\x03\x31\x6e\xf8\xe7\xff\x0b\x58\x65\x44\xff\x37\xaf\x1d\x6b\x9d\xdb\x4e\x72\x58\xdc\xf7\xd5\xfd\x0b\xc7\xfb\xb7\x3c\x45\x58\x00\x62\x5c\x65\x3e\xb4\xe1\x82\xfc\xb7\xf0\x1f\x1b\x57\xb6\x02\xa5\x75\x58\xc7\x45\x6b\x3c\xb4\x93\x5b\xaa\x73\x70\xc7\x11\xa9\x2d\x14\x68\x50\x36\x0e\xf1\x74\xe8\x3a\x87\x79\xf6\xbc\xe5\x60\xe8\x34\x61\x54\x19\x8e\x8c\xab\x85\x41\xd7\x56\x14\xeb\x18\xf4\x0f\x0e\x83\xae\xb8\x58\x92\x28\xca\xc2\x22\xb3\xed\x06\x7f\xc9\x8c\x8b\x70\x18\x82\x94\x68\x03\x02\xbc\x71\x4f\x69\xdc\x4a\xff\xbd\xed\xda\x4c\x28\x78\x5d\x03\xc1\xfa\x59\x89\x7c\xd8\xc7\x69\x31\x24\xef\x08\x17\xc0\x4c\x64\xd2\x0b\x93\x89\x4c\x1a\x70\x8c\x29\x45\x44\xa2\xdf\xc1\x6c\x3d\x43\x44\x60\x96\x15\xe2\x77\x68\x36\x9b\xfd\xde\x63\xf3\x73\xb1\xb9\x7e\x54\xcc\x63\xf3\x48\xc2\xd7\x63\xf3\x0d\x1b\xf7\x22\xd8\x6c\x3e\x8b\xe8\x42\xe9\xfa\x5e\x5e\xd9\xc1\xeb\xfc\x63\x25\x6a\x4c\x5b\x20\xf8\x9b\x24\xa1\x70\x87\x1e\x71\x2c\x53\xb6\xf6\x10\xfe\x6c\x08\x6f\xda\xce\x83\xf8\x48\xe2\xdc\x83\xf8\x0d\x1b\xf7\x22\x20\xce\xfb\x21\x37\xef\xc2\x75\x55\x5e\x53\xc2\xd2\xdf\x7c\x6d\x3d\x0c\x30\xd7\xce\x8d\x7b\x54\x1e\x49\xe0\x7a\x54\xbe\x61\xe3\x9e\x19\x95\xcb\xc3\xa4\xf3\xfc\x7c\xf0\xfc\xa9\x3a\x54\xba\x20\xd1\xb7\x5e\x58\x7d\x0c\x08\xb7\x91\x35\xc1\x6a\xd3\xc5\xd5\x3a\x2f\xe3\x81\xd7\xf6\x91\x6b\x6b\x18\x9e\x0c\xd6\x8d\xd7\x43\x59\xd9\x78\x75\x49\x36\x5c\xce\x5b\x2a\x72\x9f\xe7\x76\x8e\x75\xf7\xf1\xd6\x33\xbb\x42\xc5\xe3\xf0\xf2\x57\x51\x32\x7f\xda\x9d\xed\xbe\x74\xe8\xd6\x4e\x99\x8f\x2f\x70\x77\x07\xeb\x7d\xec\x9e\x24\x76\xd3\x84\x72\x1c\xcd\x9f\x62\x1e\xa5\x14\x76\xbe\x9a\xe4\xdf\x6e\xcd\xce\xfa\xb3\x1e\x84\x08\x53\x1c\xe9\x22\x7e\x2b\x15\xc4\xa7\x73\xe1\x9c\xb9\x63\xdd\xf7\xce\xcd\xc2\xe8\x56\x21\x7e\x19\x60\xa0\xf3\xcb\x00\x6f\xdc\xd3\x18\xf7\xcc\xcb\x80\x54\x82\x98\x1b\x0f\x52\xa6\x76\x40\x86\x88\xa8\xda\xe5\xde\x88\x48\x94\x4a\x88\xd0\x8a\x0b\x54\x9c\x43\xce\x1e\x08\x94\xef\x79\xba\x85\x66\xcd\x1e\x54\x6f\xf3\xb0\xe4\xd1\xd6\xb0\xac\xc9\x4f\x82\x2d\x22\xac\xb0\x91\x91\x15\xa6\x12\x0e\xcf\xde\x9d\xd3\xb0\x26\x0f\x39\x6b\x45\x65\xba\x02\xde\x0a\x47\x3e\xbf\x74\xe8\x6e\x37\xbf\x5c\xb4\x38\xcd\x02\xc5\x81\x83\x1a\x54\xfa\xd5\xa4\x39\xfe\x68\x90\x23\x6c\xc0\x8a\xf4\x02\xc0\xd1\x38\xe0\x7c\x71\xe4\x30\x9e\xd0\xb4\x7a\xda\x95\xac\xc6\x46\xec\xf0\x7c\x97\xe7\xdd\x9b\x51\x29\x97\xf0\x08\x52\x66\x09\x5f\xff\x21\xab\x5c\x2f\xf3\xc7\xb7\x90\xe7\xcf\xef\xf0\xf6\x5b\xca\x7d\xc2\xf4\x09\xd3\x2f\xc8\x2e\x6d\xdc\x61\x17\x64\xbd\x00\x79\xae\xf1\x95\xab\x4d\xed\x26\xc2\xbd\xd8\xfc\x86\xd2\xf7\xd9\x88\x16\x46\x63\x4a\x11\x5f\xa1\x90\x12\x60\x4a\x96\x50\x2d\xd1\x32\x55\x15\x7e\x73\x76\x13\x6b\x34\x8f\xdd\x3e\xbc\x3d\x76\x7b\xe3\x5e\x08\xbb\x63\x4c\xe8\x5c\x5f\xda\xd7\x6f\x09\x59\xdd\xef\x87\xf4\xff\xa1\x6c\xfc\xe8\x17\x93\x9d\xeb\x12\x4d\xfa\x3d\xff\x82\xb2\x7b\x97\xe2\x70\x76\x2f\xaf\x33\x9a\x87\x98\xd2\x65\xe3\x16\x4e\x47\x0f\x35\xbf\xc6\xec\x6d\x71\x71\x27\x22\x52\x7f\xda\x4a\x05\x45\x21\x8f\x09\x5b\xe7\x29\x54\x66\xe9\x59\x1f\xa3\x47\xbf\xaa\x5f\xd5\x5f\x7f\xca\x92\x29\x7a\xd2\x7f\x64\xb4\xaf\x51\xf7\xf5\xfa\xc7\x18\xd4\x86\x47\xe8\x35\x4a\x52\x85\x0a\x8b\xa3\xd7\xa8\xbc\x28\x54\xd3\xbc\xbc\xbf\xcf\x1e\x55\x39\x6c\xd6\xcc\x61\x9a\xe6\x55\x9b\xc6\xb0\x20\x45\xdf\xc6\xea\xac\xe5\xb5\xa9\x17\x77\xd2\x23\x0a\x89\x8b\xb6\x3e\x06\x09\x17\x7d\x1f\x6c\xaf\x60\x69\x5d\x1d\x7b\x03\xb5\xea\x08\xbe\x27\x34\x75\xee\x43\xe4\xe8\xee\xa0\x2f\xf9\x3b\x74\xbe\xe4\xf7\xc6\x3d\x8d\x71\xcf\x5a\xf2\x57\xb9\xac\x7d\x29\xad\xab\xee\xcf\x69\x9f\x93\xcc\xae\x20\x3b\x14\x02\xfb\xac\x70\xc6\xc2\xa9\x75\xd7\x95\xb3\x62\xfa\x21\x22\xea\xa1\x18\x90\x97\x35\x7a\x77\x06\x44\x44\xa1\x72\x22\x94\x08\xbe\x22\xf4\x26\x7a\x7f\xd7\x5f\x4f\xb5\xaf\x68\xbe\x78\xe8\x8c\xf2\x4b\xab\xaf\xa5\x3a\x74\xbe\x96\xf2\xc6\x3d\x8d\x71\xcf\x5b\x4b\xd5\x6e\x72\x73\x7e\xed\xca\xbf\x91\x21\x22\x75\x46\xcb\x12\x51\xf1\x44\x27\x9e\xe7\x6d\x10\xbf\xb6\xb4\x76\xed\x59\xc1\xc3\x71\x87\xce\xc3\xb1\x37\xee\x69\x8c\x7b\x56\x38\x2e\x2f\x57\xee\xb7\xa6\x1d\xe9\x2a\xb6\xfd\x4f\x74\x98\xd4\x77\xc5\xe8\x3b\xaa\x95\x6c\x79\x2b\xa6\xe0\x51\x9a\xff\xd3\xb5\x19\x75\x80\x93\x84\x92\xe2\x40\xe3\x27\xa9\xb7\x89\x67\x1a\xcf\xb9\xde\x91\x6d\x94\x4a\xaa\x9f\xbe\xe2\xf5\x5a\x7b\x66\xf0\x72\x76\x1f\x4c\xbf\xfd\x2f\x00\x00\xff\xff\xdd\x5e\x8e\x22\xf4\x8c\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

