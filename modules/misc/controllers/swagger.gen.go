// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x8f\xdb\xb8\x11\x7f\x96\xff\x0a\x42\xed\xe3\x62\xed\xa4\x8b\x16\x3d\x20\x40\x73\xe9\xa1\x38\xf4\xe3\x16\x97\x5c\x5f\x7a\x81\x41\x4b\x63\x9b\x09\x45\xaa\x24\x95\xd4\x5d\xec\xff\x7e\x10\xf5\x2d\x91\x94\xbc\x91\x3f\x64\x28\x4f\xb1\x34\xa4\x86\x9c\xe1\x6f\x7e\x33\x24\x93\xa7\x85\xe7\x6f\xb0\x84\x47\xac\xf6\xfe\x77\xc8\x5f\xe2\x98\xf8\x77\x0b\xcf\x0f\x38\x93\x49\x04\xd2\xff\x0e\xfd\x67\xe1\x79\x3e\x8e\x63\x4a\x02\xac\x08\x67\xcb\x4f\x92\x33\x7f\xe1\x7d\x4c\xe5\x42\xd8\x12\x46\xd2\xc7\xa9\xe8\x93\x16\xc5\x78\xfd\x37\x60\x21\x88\x0f\x87\x18\xf2\xa7\x9e\xaf\xb2\x1f\xbe\x54\x82\xb0\x9d\xbf\xf0\xbc\xe7\xbb\x42\xfc\x17\x09\xe2\x1d\x17\x31\x17\xfa\x0b\x65\x9b\x58\xf0\x18\x84\x22\x50\x74\x9e\xca\x87\xa1\x00\x59\x3d\x30\x4a\x79\x9e\xff\x3e\xfb\x4e\xf5\xc4\xa4\x42\xfa\x47\xab\xa1\xdf\xff\x1b\x53\x12\x1a\x5b\x6c\x38\xa7\x80\x59\xd9\x64\xd1\x68\x59\x8a\xf1\xcd\x27\x08\x54\x26\x95\xbf\xf4\x03\xa0\x34\xde\x73\x06\xd3\xd1\x98\xa8\xc3\xba\xde\xad\x45\xdf\x1f\x99\xfa\xe3\x83\xf1\xe3\x84\x29\xd8\x81\x38\x97\xbe\x02\xb0\x82\x70\x8d\x55\x4d\xe5\x2d\x17\x91\x7e\xe0\x87\x58\xc1\x07\x12\x81\xdf\xee\xab\x3e\xa9\x45\x5f\x10\x70\xc6\x23\x12\xac\x03\x1e\x4e\xc7\x62\x5b\x22\xa4\x5a\x33\x1c\x4d\x47\x65\x8a\xa7\xa6\xf1\xa4\x94\x9d\x16\xe2\x08\xd8\x11\xa9\x40\x4c\x6b\xd5\x25\x71\x38\x1a\xee\x24\x12\x44\x13\x73\x8d\x58\xaa\xd5\xcb\xda\x18\x54\xcb\x02\x6a\xc0\x99\x12\x9c\x52\x10\xeb\x1f\x84\xe0\xe2\x67\x90\x31\x67\x12\xde\x93\x28\xa6\xe0\x8c\xad\x90\xca\xf7\xce\x7f\x8c\x05\x8e\x64\x63\x36\x89\x82\xe6\x13\x9b\x49\x2a\x9b\x54\x12\x58\x08\x7c\xe8\xda\x4c\xc1\xff\xd4\x10\x23\x0f\xb1\xd8\x71\xd3\xf6\xaf\xd4\x86\xb4\x98\x37\xcb\x8c\xf5\x74\x17\x46\x6c\xfd\x36\x50\xe4\x0b\xbc\x57\x58\x25\xb2\x97\x07\xa5\x0d\xfe\xca\x23\x4c\x7a\xe8\x8f\xee\xd3\xe0\x27\x26\xaf\x1a\x33\x32\x86\x20\x03\x41\xe2\x3a\x3f\xbb\xfa\x15\x3a\x60\x41\x99\xc1\xdd\xb9\x54\xc7\x58\xf6\x03\x1c\x92\xf2\x8c\x6f\xaf\xdf\x11\x75\x70\xfa\xc4\x49\x86\x19\x0b\xfe\x85\xb0\x00\x46\x42\xa5\x6a\x34\x3c\x61\x4a\x9c\x73\x40\xc7\x68\xf7\x98\x8f\xda\xa9\x5e\x90\x0d\x61\xc8\xcc\x9c\xc4\x11\x8f\x19\x50\x40\xea\xba\xb7\x80\xda\xb8\x7c\x1b\xca\xda\x38\x7d\xb9\xfc\x9a\xfa\x5a\xd6\x79\x29\x6d\x74\x2a\xeb\x37\x1a\x13\x63\x58\xe7\xad\x39\x28\xe3\x48\x7b\x0a\xb4\xb9\xae\x60\x16\x46\x1a\x4f\x31\x89\xc7\x8d\xc7\xe4\xb4\xbd\xe3\xba\xba\x49\x50\x02\x33\xb9\x56\x7f\xfe\x1e\x5b\x03\x73\x3e\x07\x2d\x92\xd2\xa1\x28\x3d\x9e\x6a\x20\x27\xa5\xd2\x0d\x62\xf2\xe2\x25\xaa\x29\x5f\x80\x29\xfd\x1e\x07\x9f\x9d\x63\x61\xf0\x75\x1d\x63\x29\xbf\x72\x61\xc2\x11\x13\x7a\x2b\xfe\x19\xd8\x68\x4a\xee\x21\xf8\xfc\x4f\x4c\xe8\x23\x3e\x50\x8e\x43\x37\x87\x8c\x30\xa1\xa3\x7f\xb9\x87\x8c\xe5\xb8\x9c\x08\x01\x4c\xad\xc3\x06\x8d\xb2\x51\x89\x92\xd8\x68\x69\xa7\xab\x18\x59\x4e\x97\x8b\x0d\xa3\xbd\x26\x52\xe6\xa6\x10\xc3\xfa\x35\x12\x34\xbb\xf6\x46\x9a\xe6\xf8\x52\xfd\x5b\x26\xbe\xe6\xa0\x6c\x15\x6b\x6b\xf6\x62\xe4\x6e\xcd\x41\xb5\xbe\x61\xab\x30\xd5\x9b\xb4\x60\x68\xd0\xdc\x99\x38\xdd\xcb\x6d\xb2\x68\xf5\x6f\x1e\xa7\x13\x6a\x06\x2f\x90\x17\x57\x4d\x9d\x79\x83\xa1\x66\xe9\x94\xef\x54\x0c\x9d\x1c\xc7\x56\x64\x73\x7d\xc2\x58\xe2\x72\x35\x30\x15\x98\x5c\xf2\xc7\x50\xe3\x23\xa6\xc6\x56\xda\xf8\x26\x58\xdc\x72\xb1\x03\x75\x3e\x18\xa6\x7c\x47\xd8\x68\xe0\x5f\xcc\xe2\xc0\x88\x36\x54\xc9\x18\x84\xe4\x0c\x0f\x0a\x52\x57\xb5\x1c\x8e\x76\xed\x9d\xde\x5d\x39\xd1\x3a\x18\x34\xd0\xa1\x36\x29\xbc\x7f\x88\x4d\x02\x1e\xc5\x98\x1d\x8e\xd1\xf5\x18\x77\x3b\x39\x80\x44\x7c\x43\xe8\xe0\x59\x3e\x8e\xce\xe9\xc9\x54\xb5\xed\xb4\x6f\x37\x4c\xc6\xa7\xfe\x91\xae\xec\x9f\xfe\xde\x53\x72\xd2\xb9\x43\x6f\xd5\xc7\x10\x8b\xec\xd2\xa6\x45\xe8\x92\xb6\xd1\x15\x07\x5f\x69\x10\x16\x33\x63\x71\x51\x96\x1a\x67\x69\x52\x1f\x0b\x6b\x69\x30\x1b\x03\x64\xdc\xd2\xe8\xda\x00\xd7\x33\xb6\xce\x4e\xa1\xe7\xe2\x72\x17\x1e\x9b\x99\x9e\xf7\x70\x41\xbb\xa1\xea\x7d\x5b\x88\x4f\xcf\xec\x4d\xc9\x33\x4c\x28\x7b\x43\xc3\x33\xc4\x84\x1b\x1a\xdd\xcd\x0e\xec\x76\x91\xd8\x92\x5e\xdc\xd0\x08\x2d\xa9\xf9\x28\x78\xdc\xd9\x75\xf5\x9c\x71\xa9\x1c\x86\x61\x13\xb3\x39\x84\x2a\xf5\x6f\x51\xd4\x01\x3b\x61\x96\x6d\x30\xeb\x99\x9a\x22\xef\x99\x39\xd7\xcc\xb9\x6a\x6a\xcc\x9c\x2b\xef\xc2\xc6\x48\x86\x34\x6e\x67\xda\x83\x1b\xda\x88\xc2\x90\xb6\xb7\xeb\xc3\x13\xc7\x72\x43\x16\x6e\xc7\xf3\x45\xa3\xb1\xb1\xef\x11\x37\x6b\x16\xfa\x9d\xbf\xe7\x52\xcf\xe2\xab\xd7\x7f\xba\x5f\xdd\xaf\xee\x5f\xe9\xc3\xbc\x84\x6d\x79\xde\x7d\x6b\x97\xc0\xff\xb0\x07\x14\x08\xbc\x41\x38\x26\x77\x08\x27\x8a\xa3\x1d\x30\x10\xa9\x99\xfc\x6c\xc7\x8d\x28\x5d\xd5\xc8\x44\x29\x09\x3e\x1f\xf0\xe6\x3e\xe0\xd1\x52\xb7\x7b\xfb\xf8\x63\x26\xf7\x05\x84\xcc\x3b\x7d\x78\xe5\xe7\xfa\xc4\x58\xed\xcb\x83\xc1\xcb\x62\x07\x73\x99\x6d\x4a\x2f\x9f\xca\x9d\xcc\x35\x09\x9f\xcb\x1a\x44\xad\xb4\xd9\xd1\xd7\x2f\xeb\x27\x02\x47\xa0\x40\x14\x27\x94\x3d\xcf\x2b\x0b\x11\xe6\x36\x69\x68\xd5\xbf\x53\xa5\xaa\x67\xf9\x22\xf5\xeb\xba\x54\x6f\x05\xfc\x37\x21\x02\x52\xb7\x52\x22\x81\x4e\x45\xdf\xb0\xb7\xf9\xb1\xac\xfc\x66\x25\x96\x7a\x95\xf1\xf5\x6a\x55\xaf\x98\x58\x15\x95\xc1\x1e\x22\xdc\x70\xb3\xdf\x0b\xd8\xa6\x42\xbf\x5b\xd6\xce\x5c\x2f\xdb\xfb\xfc\x16\xef\x7b\x18\xfb\xbb\x3d\x87\xcc\xac\x6a\x3c\x5c\x52\x8d\xe6\xa2\xc3\xbb\x9a\xef\x94\xbb\xeb\x59\x9b\x8f\x8b\x5c\x3e\x2b\x99\xd5\x3c\xb7\x73\x96\x60\x88\xb7\x9e\xd9\x15\x4a\x1d\xc7\x1f\x7f\xb9\x4a\x96\x4f\xd5\x81\x82\x4b\x2f\xdd\xda\xd1\x86\xe9\x2d\xdc\xea\x34\xc7\xbc\x76\x4f\xb2\x76\x93\x98\x72\x1c\x2e\x9f\x22\x1e\x26\x14\x2a\x5f\x8d\xb3\x58\x69\x76\xd6\x5f\x74\x23\x44\x98\xe2\x48\xed\x01\xc9\x83\x54\x10\x9d\xce\x85\x33\xe5\x5e\xea\xbe\x77\x6e\x15\xf4\x00\x20\x48\x04\x51\x07\xa4\xc9\xc6\x1d\xda\x81\x42\x44\xa1\xad\xe0\x11\xd2\xdb\x7b\x48\xf0\x44\x41\x5b\xdb\x3d\xe0\x94\x00\x77\xf4\xcd\x28\xcb\xa9\x56\xdb\xc3\xea\x95\xc3\xd7\x0e\x3c\x41\x58\x00\x62\x5c\xa5\x8c\x65\xcf\x05\xf9\x3f\x84\x4e\x0f\xb4\xa5\xc3\xad\x03\xcf\x2e\x59\xe3\xc1\xe7\x6c\xa6\x3a\x87\x9f\xed\x63\xf7\x1a\x06\x6b\x49\x36\x0e\x42\x77\xe4\x3a\x07\xa2\x7b\xbe\x72\x34\x51\x5f\x74\xa4\x2b\xf2\xc7\xb8\x5a\x1b\xe6\xda\xca\x99\x3b\xe0\xf1\x07\x87\x41\xb7\x5c\x6c\x48\x18\xa6\x6e\x99\xda\x76\x8f\xbf\xa4\xc6\x45\x38\x08\x40\x4a\xb4\x07\x01\xb3\x71\x4f\x69\xdc\x72\xfe\x07\xdb\xd5\x85\xc6\x15\xae\x4b\x0b\x20\x4b\x10\x4b\xe3\xc1\x95\xc4\x0e\xc8\x10\x12\x55\xbb\x22\x88\x88\x44\x89\x84\x10\x6d\xb9\x40\xf9\xb9\xaf\xf4\x81\x40\x59\x8e\xf9\x12\xa4\xbe\x36\x98\xec\x41\xf5\xb6\x0e\x1b\x1e\x1e\x0c\x69\x4d\xb6\xf3\xbe\x0e\xb1\xc2\x46\x45\xb6\x98\x4a\x38\x3e\x7a\x77\x4e\x1f\x99\x3c\xe4\xac\x8c\xca\x74\x91\xd4\x0a\x47\x73\x7c\xe9\xc8\xdd\x6e\x7c\xb9\x28\x39\x4d\x17\x8a\x03\x07\x35\xa8\x0c\xe3\xa4\x19\xfe\x68\x90\x23\x6c\x44\x46\x7a\x01\xe0\x68\x1c\x28\xbb\x38\x72\x18\x4f\xc4\x58\x3d\xed\x4a\xb2\xb1\x09\x3b\x3c\xaf\xe2\xbc\xb3\x62\x10\x50\x2e\xe1\x3d\x48\x99\x06\x7c\xfd\x43\x96\xb1\x5e\x66\x8f\x6f\x21\xce\x9f\xdf\xe1\xed\x77\x1d\xe7\x80\x39\x07\xcc\x39\x21\xbb\xb4\x71\xc7\x4d\xc8\x06\x01\xf2\x52\xe3\x2b\x57\xfb\x6a\xbb\xb3\x1f\x9b\xdf\x52\xfa\x53\xda\xa2\x85\xd1\x98\x52\xc4\xb7\x28\xa0\x04\x98\x92\x05\x54\x4b\xb4\x49\x54\x89\xdf\x9c\xdd\x44\x8e\x36\x63\xf7\xbc\xbc\x67\xec\x9e\x8d\x7b\x21\xec\x8e\x30\xa1\x4b\x7d\x49\x72\x58\x0a\x59\xde\xa7\x44\xfa\x6f\x28\x6d\x3f\xf9\x64\xb2\x73\x3d\xd5\x34\xbf\xe7\x4f\x28\xbb\x77\x57\xc7\xb3\x7b\x71\x7d\x64\x19\x60\x4a\x37\x8d\xfb\xc3\x8e\x1a\x6a\x76\x6d\xec\x5d\x7e\xe5\x18\x11\xa9\xb7\xb6\x12\x41\x51\xc0\x23\xc2\x76\x59\x08\x95\x69\x78\xd6\xc7\x16\xd1\xaf\xea\x57\xf5\x97\x9f\xd3\x60\x8a\x9e\xf4\x8f\x54\xf6\x0d\xea\x7e\x5e\xbf\x8c\x40\xed\x79\x88\xde\xa0\x38\x51\x28\xb7\x38\x7a\x83\x8a\x2b\xce\x5a\xe6\xf5\x6a\x95\x3e\x2a\x63\xd8\x7d\x33\x86\x69\x99\x87\xb6\x8c\x21\x21\x45\xcf\x53\x75\xd6\xe2\xc2\xf7\xc5\x9d\xf4\x05\x44\xe2\xa2\xa5\x8f\x31\x96\x4b\xfb\xe2\xa4\x0b\x2b\x33\xd9\xc7\xe2\xa2\xd6\x34\xdd\x2d\x1f\xf0\xec\x6c\x67\x74\xb6\xd6\x79\x6c\x27\x24\xff\x10\x12\xf5\x98\x37\xc8\xd2\x16\xbd\xa3\x05\x21\x51\xa8\xe8\x08\xc5\x82\x6f\x09\xbd\x89\x7c\xe9\xfa\xf7\xb4\xda\xd7\x88\x2f\xbe\x74\x26\x59\x9d\x9e\x53\xce\x8e\xdc\x9c\x72\xce\xc6\x3d\x8d\x71\xcf\x9a\x72\xc6\xb5\xdb\x06\xce\x0a\x61\x56\x57\x4c\xb3\x8c\x34\xa2\xa5\x81\x28\x7f\xa2\x03\xcf\xb7\x1d\xaa\xbb\xb6\xb0\x76\xed\x51\x61\x86\xe3\x8e\xdc\x0c\xc7\xb3\x71\x4f\x63\xdc\xb3\xc2\x71\x71\x01\x78\x58\x4e\x3b\xd1\x2c\xb6\xfd\xcf\xc8\x98\xa6\xef\x8a\xd1\x77\x52\x99\x6c\x71\x73\x4b\xf0\x30\x09\xfa\xff\x03\x08\xad\x75\x25\xb6\x57\x2a\x2e\x5f\x7d\xc5\xbb\x9d\xf6\x4c\xff\xf5\xfd\xca\x5f\x3c\xff\x16\x00\x00\xff\xff\x7e\x13\x59\x92\x6e\x62\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

