// Code generated by go-bindata.
// sources:
// swagger/index.json
// swagger/index.yaml
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x4d\x6f\xdb\x38\x10\x3d\x4b\xbf\x82\xe0\xee\x31\xb0\x1c\x23\xc0\x62\x73\xdb\x45\x7b\xe8\xa1\x45\x90\x04\xbd\x14\x81\x31\x96\xc6\x16\x13\x91\x54\x87\x54\x52\x23\xc8\x7f\x2f\x48\x7d\x58\xb2\x29\xd9\x49\x3f\x80\xde\x2c\xf2\x91\x1c\xbe\x99\xf7\x38\x7e\x8e\x23\xbe\x02\x83\x57\x60\x73\x7e\xc9\x78\x02\xa5\xe0\x67\x71\xc4\x53\xad\x4c\x25\xd1\xf0\x4b\xf6\x25\x8e\x22\x0e\x65\x59\x88\x14\xac\xd0\x2a\xb9\x37\x5a\xf1\x38\xba\x73\xb8\x0c\xd7\x42\x09\x37\xec\xa0\xcf\x0e\x9a\x6a\x65\x49\x17\x05\xd2\xf2\x3d\x91\xa6\x6b\x34\xa5\x56\x06\x6f\x84\x2c\x0b\x6c\x50\x11\x2f\x49\x97\x48\x56\x60\xbb\x30\x8a\x38\x3a\x7c\xf7\x19\xc4\xb8\x51\x20\x90\xfd\x91\x88\x0b\x8b\xc3\x91\x88\xdb\x6d\xe9\x0e\xe3\xc6\x92\x50\x1b\xde\x4e\xbc\x9c\xc5\xfb\x08\x20\x82\x6d\x0b\xe8\xe6\xb9\xc5\x6f\x76\x70\x48\x78\xc7\x97\x78\xb0\xae\x43\xe9\xd5\x3d\xa6\xb6\x46\x79\x4c\x8d\x08\xcc\xfb\x89\x3e\x6d\x9f\x34\x49\x28\x5a\xde\x46\x18\x3b\xb2\x5d\x26\xd5\xf2\x9d\x96\x20\xd4\x24\xe3\x90\x5a\xf1\x88\x3d\xca\xdb\xfd\x84\xb2\xb8\x41\x6a\xe2\xaf\x2f\xc7\x53\x42\xb0\x98\x2d\xa1\x47\x0c\x5f\xbb\x68\xdd\x00\xcf\xc0\xe2\xad\x90\xc8\xf7\xb9\xe8\x33\xd6\xee\x95\xa1\x49\x49\x94\xae\x74\x8e\x66\xfc\xa6\x5e\x7f\x42\x32\xba\xec\x7d\x86\x42\x64\xc1\x15\x2b\xad\x0b\x04\xf5\xaa\xfc\x35\x31\xf7\x77\x9c\x66\x4a\x81\x0c\xb1\x1a\x22\xa2\x2a\xb3\x1f\x27\xf5\x84\x02\xb3\x04\xca\x2c\xed\xbf\xff\xc3\x68\x4d\xc5\x41\x7d\x1d\xa8\x2b\x4c\xfe\x01\x83\x3d\x5d\xb5\x77\x1d\x6a\xea\xcd\x57\xa9\x0c\xd2\x32\xcd\x31\x7d\xf8\x08\xa2\xb8\x82\x6d\xa1\x21\x9b\x76\x16\x09\xa2\xf8\xe9\x27\x1f\x91\x68\x23\x9a\x8a\x08\x95\x5d\x66\x03\x35\x8e\x15\x64\x27\x0f\x8f\x9e\xcc\x42\x50\x2b\x87\x92\x1e\xad\xd5\xa1\x1b\x86\xb4\x3d\x5d\x89\xa7\xb9\x6c\x50\xe7\xe3\xe1\x07\xd5\x3e\x71\x52\xff\xac\x90\xec\x27\x94\xbf\x13\xff\x70\x97\xa0\x05\x0c\x2f\xb5\x77\xc6\x29\xfc\x0e\x1d\xe1\x34\xee\x42\xd6\xf0\xf6\x9c\x1c\xbe\x70\xa1\x7b\x4e\xca\x78\x5a\x21\xb1\x9f\xe3\xb9\x36\x3e\xb6\xf3\xc5\x3f\xb3\xf9\x6c\x3e\x3b\xf7\x1d\x85\x50\x6b\xdd\xb6\x08\xc3\x9a\xe0\xb7\x39\xb2\x94\x60\xc5\xa0\x14\x67\x0c\x2a\xab\xd9\x06\x15\x92\xbb\x3b\xaf\xbd\x4b\x58\xdf\x3a\xd4\xd0\x42\xa4\x0f\x5b\x58\xcd\x52\x2d\x13\xbf\xee\xbf\xab\x0f\x35\xee\x11\xc9\x34\x9b\x9e\x2f\x78\x13\x4f\x09\x36\xef\xba\x93\xc4\x29\x38\xc9\x2a\x29\xb7\x9d\x6a\x37\xb8\xe3\x77\x3f\x36\x8f\x64\xa4\x2b\x8b\x33\x76\x8d\x52\x3f\x22\x13\x96\x3d\xe5\xa8\x98\xcd\x91\x11\x42\x51\x4f\x1b\x06\xe4\xbf\xb3\x6d\x93\x0d\x4e\x8d\x3f\xf4\x65\xbc\x98\xcf\xfb\x22\xde\x3b\xae\xcb\x23\x37\x69\x8e\x12\x06\xca\xfe\x9b\x70\xed\x40\x7f\x25\xbd\xb6\x2b\x19\x6f\x1c\x46\x5e\xb8\x8b\x5f\x18\x41\xa8\xe3\xdb\x0b\x63\xf8\x20\xc0\xa6\xed\x31\xa3\xc6\x5e\x6b\xfc\x5d\xdc\x60\x6b\xdf\xad\xd3\xe6\x4c\x3c\xf1\xee\xbb\x73\xdc\xba\xd8\xc2\xc9\xeb\x8c\x9a\xf9\x5f\xcc\xad\x67\x42\x31\xb3\x35\x16\x65\x9b\x25\xff\xde\xa1\x45\xea\x45\x72\x9c\x1d\x6f\xe5\x7c\xa5\xbb\x6c\xef\x34\xce\xcb\xfa\x45\x5a\x66\x60\x61\x37\x4b\xf8\xb5\x12\x84\xce\x3a\xd6\x50\x18\x7c\x3d\xd1\xe1\x77\x2f\xc4\xef\xdd\xef\xac\xc0\x91\x47\x71\xb4\xfc\x2e\xfe\xa4\xf2\x6b\x4d\x84\x74\x56\xa5\xc7\xff\x10\xf9\xa8\x77\xb0\xdc\xda\xb2\x9b\x7a\x82\x8d\x7b\x1c\x2e\x19\x5f\xcc\xe6\x3c\x7e\xf9\x1e\x00\x00\xff\xff\x8e\x9a\x4f\xfe\x7e\x0d\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerIndexYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\xc1\x6e\xd3\x40\x10\xbd\xfb\x2b\x46\x06\xa9\x17\x1a\xa7\x51\x25\xc4\xde\x40\x70\xe0\x00\xaa\xda\x8a\x6b\x34\x59\x4f\xe2\x6d\xed\xdd\x65\x76\xdc\x12\x21\xfe\x1d\xad\x9d\x26\x8e\x63\x27\x55\x11\xe0\x93\xbd\x33\x3b\x33\xef\xcd\x7b\x0e\x8f\xb8\x5a\x11\x2b\x48\x67\x93\x69\x9a\x18\xbb\x74\x2a\x01\x78\x20\x0e\xc6\x59\x05\xe9\xc5\x2c\x4d\x00\xc4\x48\x49\x0a\x6e\x0b\x02\x5d\x1a\x7d\xbf\xc6\xc5\x44\xbb\x2a\xd3\x8c\x0b\x78\x7f\xf5\x39\x01\xc8\x29\x68\x36\x5e\x9a\x6b\x4d\x62\x8c\xa1\x37\x6f\x00\x6b\x71\xb0\x22\x4b\x8c\x42\x79\x52\xb8\x20\x0a\x2e\x66\x6f\x27\xd3\xc9\x74\x72\x91\x2c\x30\xd0\x15\x4a\xa1\x20\x43\x6f\x92\xa0\x0b\xaa\x28\xa8\xe4\x1c\x0a\x11\x9f\x68\x67\x43\xbd\x39\x40\xef\x4b\xa3\x31\x36\xc9\xee\x82\xb3\x89\x67\x97\xd7\x7a\x2c\x88\x52\x84\x08\x27\xab\x03\x71\x96\xd7\x55\xb5\x8e\x9f\x00\x2b\x92\xf6\xa5\x37\x77\x93\x02\xec\x6a\xa1\x09\x5c\x53\xe5\x1e\x08\x8c\xc0\x63\x41\x16\xa4\x20\x60\xc2\xb2\x0d\x07\x40\x6e\xbe\xf3\xf5\xa6\x10\x53\xf0\xce\x06\x0a\x4f\x95\x01\xd2\xd9\x74\x9a\xee\x3e\x7b\xcd\xd2\xb4\x13\x69\x50\x63\x37\x17\xe0\x35\xd3\x52\xc1\xd9\xab\x2c\xa7\xa5\xb1\x26\xde\x0a\x99\x76\x56\xd8\x95\x25\xf1\xfc\xab\xe3\x0a\xcb\xeb\x4d\xdf\xb3\x5d\xdb\xcb\xbf\xda\xf6\x13\xb3\xe3\xa7\xae\x37\xa6\xf2\xe5\xb6\xb7\xe0\x6a\x0b\xff\x1c\x22\xeb\x5b\xf6\x2b\x34\x65\xa6\x0b\xd2\xf7\x6d\x82\x8f\x2a\x18\xda\x41\x93\xf3\x05\x4d\xd9\xbe\x41\xbc\x08\xc6\x42\x58\x07\xa1\xea\xdf\x92\x1d\x27\x9f\x6f\x07\x1a\x64\xfa\xf2\xff\x30\xed\x91\xb1\x22\x21\xee\xf0\x6d\xb1\x22\x05\x1e\xd7\xa5\xc3\x7c\x9e\xa3\x60\x32\xde\xfd\x19\x78\xaf\xda\x4a\x3b\xb8\x63\xe8\x8c\x55\xb0\x70\x5b\x27\xc4\xf5\x7c\xaf\x0d\x53\xae\x60\x89\x65\xa0\x71\x75\x74\x9a\xc7\xc8\x71\xec\x1b\xe1\xb0\xf3\xc4\x62\x76\xbb\xa7\x98\xba\xc3\x76\x98\xb0\x25\x2c\xec\xf3\x6f\x84\xfa\x47\x00\xb2\xf6\xa4\x20\x08\x1b\xbb\x4a\x0e\x03\xc8\x8c\xeb\xce\xb9\xd0\x0f\x51\x03\x79\xbd\x02\xed\xa1\x5b\xdc\x91\x96\x64\xe0\x60\xd4\xd6\x07\xa0\xe1\xe7\xaf\xa1\x02\x79\x65\xe7\x1f\x5d\x85\xc6\x8e\xd1\x84\x5a\xcc\x03\xa9\xde\x48\xc6\x0a\xad\x1a\x9f\xc6\x47\x33\xc5\x7f\xf4\x1c\x3b\x98\x96\x71\x1e\x51\x90\xa3\xd0\xad\xa9\x28\x39\x02\xb4\xab\x90\x13\x0b\xb9\x69\xee\x3d\x83\x3a\x80\x6f\x58\x9a\x7c\x28\x73\xe1\x5c\x49\x68\xc7\x59\x06\xe8\x5e\x1c\x42\xdc\x98\xe6\x18\xa4\xda\xe7\x7f\x40\x49\x6f\x22\x61\xb4\x61\x2e\xef\x3e\xe0\xc0\x66\xbb\xd6\xee\x50\x75\xa0\xd2\x23\x02\xeb\xaa\x73\x5f\x99\xa7\x26\x1b\xb4\xfe\xa8\xe3\xe2\x4f\xf9\xa5\xb5\x47\x95\xfd\xa4\xc1\x9a\x99\xac\xcc\xf3\x8e\x9a\xc7\x56\xde\xe6\x1c\x23\x6b\x58\x7c\x87\x6e\x18\x57\xc8\x66\xaa\x01\x67\x9c\x10\xc3\x91\x6d\xc1\x98\x57\x8e\x0f\x0d\x23\xbe\x39\xd1\x09\x86\x3d\xd4\xbd\xd5\x77\x52\x37\xb6\xe7\xa7\xf6\x39\x2c\x35\xce\xdc\xbe\xc3\x4e\x8c\x3a\xe4\xb6\xf6\x79\x19\xcd\x83\x08\xfa\x5e\xd9\x4b\xfa\x1d\x00\x00\xff\xff\xca\x3c\x9a\xde\x13\x0b\x00\x00"

func swaggerIndexYamlBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexYaml,
		"swagger/index.yaml",
	)
}

func swaggerIndexYaml() (*asset, error) {
	bytes, err := swaggerIndexYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
	"swagger/index.yaml": swaggerIndexYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
		"index.yaml": &bintree{swaggerIndexYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

