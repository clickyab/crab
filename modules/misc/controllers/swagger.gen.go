// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x41\x6f\xdb\x3c\x0c\x3d\xdb\xbf\xc2\xe0\xf7\x1d\x83\x38\x2d\x3a\x0c\xeb\xad\xc3\x76\xd8\x61\x40\xd1\x16\xbb\x0c\x45\xc0\xd8\x4c\xa2\xd6\x96\x3c\x4a\x6e\x17\x14\xfd\xef\x83\x65\x5b\xb1\x13\xc5\xf5\xba\x14\xd8\x4e\x6d\xa4\x27\x52\xa4\xf8\x1e\xe9\xa7\x30\x80\x05\x6a\xba\x44\xb3\x86\xf3\x08\x62\x2c\x04\x4c\xc2\x00\x12\x25\x75\x99\x93\x86\xf3\xe8\x7b\x18\x04\x80\x45\x91\x89\x04\x8d\x50\x32\xbe\xd3\x4a\x42\x18\xdc\x56\xb8\x94\x96\x42\x8a\x6a\xb9\x82\x3e\x55\xd0\x44\x49\xc3\x2a\xcb\x88\xe7\x9f\x99\x15\x5f\x91\x2e\x94\xd4\x74\x2d\xf2\x22\xa3\x06\x15\x40\xc1\xaa\x20\x36\x82\xda\x83\x41\x00\x54\xe1\xdd\x4f\x2f\xa6\x5a\x45\xc6\xbc\xbb\x12\x80\x30\xd4\x5f\x09\xc0\x6c\x8a\xca\x19\x68\xc3\x42\xae\xa0\xdd\x78\x9e\x84\xbb\x08\x64\xc6\x4d\x0b\x70\xfb\x60\xe8\xa7\xe9\x39\xf1\x5b\x7c\x0e\x7b\xe7\x1c\x4a\x2d\xee\x28\x31\x35\xca\x62\x6a\x84\x67\xdf\x6e\x40\x9a\xcb\xf9\x45\x62\xc4\x03\x5d\x1b\x34\xa5\x8b\xc6\xe3\x76\x7b\xe0\x93\xca\x51\xc8\xc1\x9c\xa2\xb5\xd9\x49\xaa\x2f\x8c\xe6\xf6\x90\x30\xa1\xa1\x74\x8e\x9d\xc8\x61\xa9\x38\xb7\x0b\x90\xa2\xa1\x1b\x91\x13\xec\x06\xeb\xb3\x95\x92\x4e\x58\x14\x55\x6d\xbc\xf8\xa4\xd7\xf5\xf9\x11\xd9\x76\xcf\xf3\x0d\x33\x91\x7a\x4f\x2c\x94\xca\x08\xe5\x6f\x3d\x50\x73\xe7\xae\x45\x07\x14\xd2\xd0\x8a\xb8\x8f\x94\x98\x8f\x4d\x6a\x59\xa4\x7f\x9e\xd4\x11\x15\x64\x18\xa5\x9e\x9b\x0f\x1f\x51\x0f\xd3\x6c\x97\x40\x7b\xf4\xf1\x27\x7f\x2f\x83\x1d\xe2\xb4\xb1\xf6\x49\xf3\xea\x50\x4a\x4d\x3c\x4f\xd6\x94\xdc\x7f\x45\x91\x5d\xe2\x26\x53\x98\x0e\x4b\x47\x8e\x22\x3b\xba\xe7\x56\xbb\x06\x5d\x27\x25\x33\x49\x33\x4f\x7b\x64\x3c\x54\x90\x8e\x1e\x16\x3d\xf8\x0a\x5e\xae\xec\x33\x7a\x9c\xda\xf9\xa8\x3d\x5c\x88\xe3\xec\x7a\x69\x7e\xf8\xf6\x5e\xb2\x0f\x78\xea\xfa\xf2\xb1\x7e\x80\xf8\x5b\xee\xf7\xad\x78\x15\xa0\x1f\xd4\x8e\x0f\xbf\x14\xf4\x8f\xf4\x05\x61\x5c\xee\x7c\xca\xf0\xfa\x37\xd9\xef\x60\xbe\x38\x07\x59\x3c\x96\x20\x4c\x2b\xa1\x0d\xf1\xd1\x98\x39\x69\x95\x49\xeb\x47\xc5\x3e\x15\xf6\x2a\x6b\x75\x97\x06\x70\x14\xe2\x73\xc3\xf7\xab\x26\xbe\xa3\x05\x36\xbe\xb1\x18\x75\x4f\x3e\x11\x79\xc3\xf8\x43\xbb\x07\x6b\xa5\x6d\xcd\x9d\x9c\xbe\x9f\xce\xa6\xb3\xe9\x89\x9d\x04\x85\x5c\xaa\x76\xb4\xeb\x73\x1d\x6e\xd6\x14\x25\x8c\x8b\x08\x0b\x31\x89\xb0\x34\x2a\x5a\x91\x24\xae\x6a\x1a\xea\x96\x24\x8c\x1d\xf9\x6a\x68\x26\x92\xfb\x0d\x2e\xa6\x89\xca\x63\x7b\xee\xe2\xf2\x4b\x8d\x7b\x20\xd6\x8d\xd1\x93\x77\xd0\xdc\xa7\x40\xb3\x76\x53\x65\x5c\xc5\x1a\x57\x19\x8f\xad\x3a\x6f\x5f\xa6\xbe\xf5\x93\x6f\xe8\x00\x27\xe4\x91\xfd\x2f\xaa\xce\x47\x42\x46\x7a\xa3\x0d\xe5\x30\xe9\xf4\x43\x32\xc4\xed\xb8\x1b\x04\x81\x13\xe1\x1d\x8b\x8e\x88\x60\xa5\x1e\x16\x2a\xdd\x6c\xd7\x1a\x11\x80\xa2\xe6\xc5\x3c\x45\x83\xdb\x5d\xa6\x1f\xa5\x60\xaa\x4a\x61\x89\x99\x26\xb7\xa1\x93\x35\xe5\xd8\x13\xf9\xff\x99\x96\x95\xa5\xff\xe2\xce\x88\x1d\xfb\xfb\xe2\xce\xa0\x63\xff\xdc\x36\xb1\xb5\x15\xdd\x6d\x34\xa7\xb3\x59\xb7\xcd\x1c\x8c\xf0\x95\xd7\x72\x4d\xf3\xc0\x00\x76\x36\x3b\x3b\xae\xfb\x17\xbe\x38\x7c\xe9\x71\x6c\xc3\x55\xe7\xd1\x2d\xa1\x6a\xfc\x6d\xd8\x60\x6b\x75\xa8\xcb\x8f\xf7\x64\x61\xa8\xf8\xfe\xd1\xf2\xda\xd5\xf6\xbf\xa3\xba\xf6\x94\xf9\x60\x71\x1d\xd9\xfb\xdb\x16\x57\x2b\x75\xac\xd2\x32\x79\xf9\x73\xdb\xde\x7a\x0b\x5b\x1b\x53\xb8\xad\x47\x5c\xad\x6c\x69\xc2\xe9\x74\x06\xe1\xf3\xaf\x00\x00\x00\xff\xff\xc8\x0f\xbc\x03\xdc\x0f\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

