// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdf\x6f\xdb\xb6\x13\x7f\x96\xff\x0a\x82\xdf\xef\x63\x10\x3b\x59\xb1\x61\x7d\xeb\xb0\x62\x28\xb6\x61\x41\x93\xee\x65\x08\x0c\x5a\x3a\x4b\x6c\x24\x52\x23\x4f\xe9\xbc\x20\xff\xfb\x40\xea\x87\xf5\x83\xa2\x95\xc4\x4d\xe2\xcd\x7b\x59\x4b\x1f\x8f\x77\xbc\xfb\x7c\xee\x8e\xea\xdd\x2c\xa0\x2b\xa6\xe1\x82\x61\x42\xdf\x12\x3a\x67\x39\xa7\x27\xb3\x80\x86\x52\xe8\x22\x03\x4d\xdf\x92\x3f\x66\x41\x40\x59\x9e\xa7\x3c\x64\xc8\xa5\x98\x7f\xd6\x52\xd0\x59\x70\x6d\xe4\x22\x58\x73\xc1\xcd\xb2\x11\xbd\xb3\xa2\x8c\x2d\x7f\x02\x11\x81\xba\xda\xe4\x50\xad\x06\x14\xcb\xbf\x50\x8d\x8a\x8b\x98\xce\x82\xe0\xfe\xa4\x16\xff\xa4\x41\x5d\x80\xd2\x52\xb0\xb4\xd9\x90\x2b\x99\x83\x42\x0e\xb5\x66\x23\x1c\x45\x0a\xf4\x76\xc1\x29\x15\x04\xf4\xb2\x3c\x64\xbb\xe2\x3a\xdf\xfc\x67\x6d\xb0\xbf\xff\xce\x52\x1e\x39\x77\xac\xa4\x4c\x81\x89\x66\xcb\xac\xb3\xb3\x11\x93\xab\xcf\x10\x62\x29\x55\xfd\x48\x43\x48\xd3\x3c\x91\x02\x0e\xc7\x62\x8e\x9b\x65\x5b\xed\x88\xbd\x1f\x04\x7e\xfb\xc6\x79\x38\x17\x08\x31\xa8\xe7\xb2\x57\x01\x43\x88\x96\x0c\x5b\x26\xaf\xa5\xca\xec\x02\x8d\x18\xc2\x15\xcf\x80\xf6\x75\xb5\x2f\xb5\xd6\xb5\xe6\x4a\xe3\x52\xb0\xec\x70\xc2\x15\x5b\xa0\xb5\xcc\xf5\xf9\x97\xb2\x43\x73\xef\xb0\xb0\x53\xe4\xd1\xde\x72\xb1\xd0\xa0\xba\x38\x74\xe2\xcb\x9a\x57\xee\x71\x98\x56\x32\x6c\x28\x05\x2a\x99\xa6\xa0\x96\xef\x95\x92\xea\x23\xe8\x5c\x0a\x0d\x97\x3c\xcb\x53\xf0\xf2\x2d\x18\xf9\x9d\xf7\x9f\x33\xc5\x32\xdd\xb9\x4d\x8e\xd0\x5d\x19\x0b\xc9\x36\x26\x5b\x09\xa6\x14\xdb\x0c\x63\x86\xf0\x17\x4e\x09\xf2\x94\x88\x4d\xb8\xb6\x28\x13\xcb\x77\x21\xf2\x5b\xb8\x44\x86\x85\xde\x59\xc9\xcc\x86\x1f\x65\xc6\xb8\xf0\xd7\x30\xab\x73\x22\x64\xf7\x49\x6f\x11\xe8\x50\xf1\xdc\x14\xeb\x83\x81\xd4\x04\x04\x54\x92\x3d\x5e\xf3\x62\x6b\x1f\x38\x9d\x90\x41\xa8\x98\xd0\x4b\xfc\xfe\x07\xa6\xfd\x30\xeb\x03\x68\x00\x1f\xf7\xe5\x0f\x6e\xb0\x05\x9c\xda\xd7\x2e\x68\x1e\xed\x8a\xa5\xa3\x30\x81\xf0\xe6\x57\xc6\xd3\x0b\xb6\x49\x25\x8b\xfc\xd4\x91\x31\x9e\xee\xfd\xe4\x9a\xbb\xbc\x47\x87\x85\x52\x20\x70\x19\x75\xc0\x38\x96\x90\x0d\x3c\xac\xb4\x37\x0a\x4e\xac\x0c\x11\x3d\x8d\xed\x5c\xd0\xf6\x27\xe2\x34\xbd\x4e\x98\x8f\x5b\xef\x04\xbb\xe7\xa4\xf6\x59\x2e\xd4\x7b\x80\xbf\xc5\x7e\x57\x8b\x93\x01\xba\x4e\xf5\xce\x18\x6b\x36\xdb\x5b\xba\x84\x30\xed\xee\x5c\xcc\xf0\xf8\x98\x0c\x2b\x98\xcb\x4f\x2f\x8a\xa7\x02\x24\xaf\xa6\xa7\x29\xc8\x1c\x0e\x51\xde\x0a\xe4\x18\x61\xbc\xf2\x83\x01\xc2\x4b\xdb\xce\x9e\xdb\xa7\xff\xc9\x1d\xaf\x4f\x7e\x92\xa3\x53\x63\xa2\x20\xe6\x1a\x41\xed\x8d\x2d\x6b\x23\x99\xd6\x5f\xa4\x72\x5d\xf1\x68\x27\x89\xad\x51\xfc\xe9\x7e\x95\x1c\xfc\x8b\x8c\xb9\xf8\xed\xe7\xbd\xf9\x35\x3d\x69\x50\xde\x80\x8b\xd7\x9f\xd5\xfd\x8f\x55\x78\xff\x1b\xfe\xcf\xec\x6f\x34\x91\xda\xd2\xe0\xd9\xf9\x77\xa7\x8b\xd3\xc5\xe9\x99\x7d\x2d\xe2\x62\x2d\xeb\xe7\x9f\x6e\xf9\xa1\x57\x09\x90\x50\xb1\x15\x61\x39\x3f\x21\xac\x40\x49\x62\x10\xa0\x0c\xcd\xd2\xb2\x4b\xe2\x68\xa7\x90\x52\x34\xe5\xe1\xcd\x86\xad\x4e\x43\x99\xcd\xed\xbe\x77\x17\x1f\x4a\xb9\x5b\x50\xba\x52\x7a\x7e\x46\x2b\x7b\x72\x86\x49\xf3\xf2\x34\x2f\x72\x03\xb4\xf9\x5d\x26\xa3\x22\x85\xfb\x6d\x64\x4a\xab\xab\x98\xf4\x2c\xfc\x64\x37\x11\x2e\x50\x12\x4c\x80\xe8\x8d\x46\xc8\xe8\x49\xab\x35\x03\x04\x55\x3f\x85\x05\x41\xd0\xf4\x03\x3d\x4d\x4d\x4d\xa0\xb6\xeb\xb0\xc6\x6d\xd7\x2a\x1a\xa2\xa5\x71\xdb\x75\x05\x7f\x16\x5c\x81\x09\x3e\xaa\x02\x06\xc5\xc2\xd9\xf2\x8d\x99\x60\x1d\x80\xb0\x50\x1c\x37\xc4\xa6\xc9\x09\x89\x01\x09\x47\xb2\x56\x32\x23\xa9\xc1\x2c\x51\xb2\x40\xe8\x5b\x9b\x00\x33\xc4\x3a\xb0\xb7\x4c\xb6\x47\x9a\x6b\xff\x77\x5d\xdd\x65\x8d\x9c\x76\xe9\x79\xb3\x38\x6b\x77\x58\x3d\x77\x36\xb2\x20\x4c\x01\x11\x12\x4d\xee\x24\x52\xf1\xbf\xab\xbc\xb1\xe2\x3a\x4c\x20\x63\x9d\x66\x6c\xa4\xcb\xe9\x8f\xb2\x3e\x59\xe7\x48\x1b\xb8\x3a\x42\x9f\xef\x41\x27\x60\x3d\xc9\xce\x88\x3b\x90\x1b\x8c\xba\x3b\x4e\xb9\x1f\x69\xce\x46\xfa\xaa\xad\x7c\x7b\xf8\xae\x61\x28\x24\x2e\x1d\x77\x3d\xa6\xad\x3f\xcd\xbd\x59\x7c\xe3\x09\xe8\x5a\xaa\x15\x8f\x22\x93\x96\x26\xb6\x09\xbb\x35\xc1\x25\x2c\x0c\x41\x6b\x92\x80\x82\x63\x70\xbf\x66\x70\x9b\xfb\x9f\x1c\xd7\x6e\xe1\x61\x71\x8b\x07\x5b\x2f\x4b\xba\xdc\x76\x3d\xab\xb6\x94\xf5\x72\x6e\x8a\xcf\xdc\x94\xc0\xb9\x9d\xe0\xa6\x11\x72\x33\xec\x11\xfb\x27\x62\xf6\x13\x2e\xf6\x48\xcc\x2b\x19\x6d\x86\x44\x97\x97\x7d\xda\x32\x62\xc8\x9c\x7c\xb7\x66\xa9\x06\x5f\x7a\xfe\x5f\xc1\xda\x68\xfa\xdf\xbc\xf5\x5d\x64\xee\x9e\x9d\x5d\xd7\xec\x23\xca\xf3\xc5\xc2\x83\x2b\x2f\x6a\xa6\x98\xd5\x0c\xd6\x0f\x08\xbf\xd1\xe0\x89\x7b\x3e\xf8\xa2\x53\x8c\x07\xfd\x7d\xc4\xb1\xfe\x04\x54\xd6\x27\xb2\x96\x8a\x40\xc4\x91\xd4\x8a\x48\xae\xe4\x9a\x37\xb5\xf3\x41\x29\xf0\xda\x0a\xe3\x8e\x3a\xfe\x0a\x32\xb6\x3f\x52\xbe\x78\xc2\x0e\xbe\x14\x8e\x56\xa0\x3d\x1f\xbc\xe3\x01\x7d\xd4\x8c\x63\x67\x33\x90\x3b\x76\x36\xc7\xe0\x7e\x9d\xe0\xee\xb7\xb3\xd9\x55\xda\x5a\xef\xa5\x34\x86\xf1\xb2\x96\xca\x58\x16\x48\xb8\xb6\xd5\xcc\x14\xa1\x6a\xc5\x16\x9d\xa7\x8d\x9b\xaf\xad\xa4\xbd\x50\x0b\xd3\x7f\x8e\x3a\xd2\xf1\x81\x20\xf6\x48\xc7\xff\xe2\xe0\x3e\x2b\x1d\xab\xc1\x53\xac\x6f\xbe\x3c\xd0\x09\xb2\xff\x39\xc1\x75\x7d\x2f\xc7\xbe\xcd\x6b\xf8\x28\x5a\x5f\xb4\x29\x7f\x68\x72\xd5\xcf\xcb\x4a\x46\x45\xb8\xfb\x9f\x41\x5a\xab\xb7\x62\x09\x62\xde\xfc\xf4\x85\xc5\xb1\x4d\x4d\x7a\x7e\xba\xa0\xb3\xfb\x7f\x02\x00\x00\xff\xff\xfc\x4b\x52\x24\x74\x29\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

