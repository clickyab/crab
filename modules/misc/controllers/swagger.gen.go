// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x8f\xdb\xb8\x11\x7f\x96\xff\x0a\x42\xed\xe3\x62\xed\xa4\x8b\x2b\x7a\x40\x80\xe6\xd2\x43\x71\xe8\xc7\x2d\x2e\xb9\xbe\xf4\x02\x83\x96\xc6\x36\x13\x8a\x54\x49\x2a\xa9\xbb\xd8\xff\xbd\x10\xf5\x2d\x91\x94\xbc\x91\x3f\x64\x28\x4f\xb1\x34\xa4\x86\x9c\xe1\x6f\x7e\x33\x24\x93\xa7\x85\xe7\x6f\xb0\x84\x47\xac\xf6\xfe\xf7\xc8\x5f\xe2\x98\xf8\x77\x0b\xcf\x0f\x38\x93\x49\x04\xd2\xff\x1e\xfd\x7b\xe1\x79\x3e\x8e\x63\x4a\x02\xac\x08\x67\xcb\x4f\x92\x33\x7f\xe1\x7d\x4c\xe5\x42\xd8\x12\x46\xd2\xc7\xa9\xe8\x93\x16\xc5\x78\xfd\x57\x60\x21\x88\x0f\x87\x18\xf2\xa7\x9e\xaf\xb2\x1f\xbe\x54\x82\xb0\x9d\xbf\xf0\xbc\xe7\xbb\x42\xfc\x57\x09\xe2\x1d\x17\x31\x17\xfa\x0b\x65\x9b\x58\xf0\x18\x84\x22\x50\x74\x9e\xca\x87\xa1\x00\x59\x3d\x30\x4a\x79\x9e\xff\x3e\xfb\x4e\xf5\xc4\xa4\x42\xfa\x47\xab\xa1\xdf\xff\x0b\x53\x12\x1a\x5b\x6c\x38\xa7\x80\x59\xd9\x64\xd1\x68\x59\x8a\xf1\xcd\x27\x08\x54\x26\x95\xbf\xf4\x03\xa0\x34\xde\x73\x06\xd3\xd1\x98\xa8\xc3\xba\xde\xad\x45\xdf\x9f\x98\xfa\xee\xc1\xf8\x71\xc2\x14\xec\x40\x9c\x4b\x5f\x01\x58\x41\xb8\xc6\xaa\xa6\xf2\x96\x8b\x48\x3f\xf0\x43\xac\xe0\x03\x89\xc0\x6f\xf7\x55\x9f\xd4\xa2\x2f\x08\x38\xe3\x11\x09\xd6\x01\x0f\xa7\x63\xb1\x2d\x11\x52\xad\x19\x8e\xa6\xa3\x32\xc5\x53\xd3\x78\x52\xca\x4e\x0b\x71\x04\xec\x88\x54\x20\xa6\xb5\xea\x92\x38\x1c\x0d\x77\x12\x09\xa2\x89\xb9\x46\x2c\xd5\xea\x65\x6d\x0c\xaa\x65\x01\x35\xe0\x4c\x09\x4e\x29\x88\xf5\x8f\x42\x70\xf1\x0b\xc8\x98\x33\x09\xef\x49\x14\x53\x70\xc6\x56\x48\xe5\x7b\xe7\x3f\xc6\x02\x47\xb2\x31\x9b\x44\x41\xf3\x89\xcd\x24\x95\x4d\x2a\x09\x2c\x04\x3e\x74\x6d\xa6\xe0\xbf\x6a\x88\x91\x87\x58\xec\xb8\x69\xfb\x67\x6a\x43\x5a\xcc\x9b\x65\xc6\x7a\xba\x0b\x23\xb6\x7e\x1b\x28\xf2\x05\xde\x2b\xac\x12\xd9\xcb\x83\xd2\x06\x7f\xe1\x11\x26\x3d\xf4\x47\xf7\x69\xf0\x13\x93\x57\x8d\x19\x19\x43\x90\x81\x20\x71\x9d\x9f\x5d\xfd\x0a\x1d\xb0\xa0\xcc\xe0\xee\x5c\xaa\x63\x2c\xfb\x01\x0e\x49\x79\xc6\xb7\xd7\xef\x88\x3a\x38\x7d\xe2\x24\xc3\x8c\x05\xff\x42\x58\x00\x23\xa1\x52\x35\x1a\x9e\x30\x25\xce\x39\xa0\x63\xb4\x7b\xcc\x47\xed\x54\x2f\xc8\x86\x30\x64\x66\x4e\xe2\x88\xc7\x0c\x28\x20\x75\xdd\x5b\x40\x6d\x5c\xbe\x0d\x65\x6d\x9c\xbe\x5c\x7e\x4d\x7d\x2d\xeb\xbc\x94\x36\x3a\x95\xf5\x1b\x8d\x89\x31\xac\xf3\xd6\x1c\x94\x71\xa4\x3d\x05\xda\x5c\x57\x30\x0b\x23\x8d\xa7\x98\xc4\xe3\xc6\x63\x72\xda\xde\x71\x5d\xdd\x24\x28\x81\x99\x5c\xab\x3f\xfd\x80\xad\x81\x39\x9f\x83\x16\x49\xe9\x50\x94\x1e\x4f\x35\x90\x93\x52\xe9\x06\x31\x79\xf1\x12\xd5\x94\x2f\xc0\x94\xfe\x80\x83\xcf\xce\xb1\x30\xf8\xba\x8e\xb1\x94\x5f\xb9\x30\xe1\x88\x09\xbd\x15\xff\x0c\x6c\x34\x25\xf7\x10\x7c\xfe\x07\x26\xf4\x11\x1f\x28\xc7\xa1\x9b\x43\x46\x98\xd0\xd1\xbf\xdc\x43\xc6\x72\x5c\x4e\x84\x00\xa6\xd6\x61\x83\x46\xd9\xa8\x44\x49\x6c\xb4\xb4\xd3\x55\x8c\x2c\xa7\xcb\xc5\x86\xd1\x5e\x13\x29\x73\x53\x88\x61\xfd\x1a\x09\x9a\x5d\x7b\x23\x4d\x73\x7c\xa9\xfe\x2d\x13\x5f\x73\x50\xb6\x8a\xb5\x35\x7b\x31\x72\xb7\xe6\xa0\x5a\xdf\xb0\x55\x98\xea\x4d\x5a\x30\x34\x68\xee\x4c\x9c\xee\xe5\x36\x59\xb4\xfa\x37\x8f\xd3\x09\x35\x83\x17\xc8\x8b\xab\xa6\xce\xbc\xc1\x50\xb3\x74\xca\x77\x2a\x86\x4e\x8e\x63\x2b\xb2\xb9\x3e\x61\x2c\x71\xb9\x1a\x98\x0a\x4c\x2e\xf9\x63\xa8\xf1\x11\x53\x63\x2b\x6d\x7c\x13\x2c\x6e\xb9\xd8\x81\x3a\x1f\x0c\x53\xbe\x23\x6c\x34\xf0\x2f\x66\x71\x60\x44\x1b\xaa\x64\x0c\x42\x72\x86\x07\x05\xa9\xab\x5a\x0e\x47\xbb\xf6\x4e\xef\xae\x9c\x68\x1d\x0c\x1a\xe8\x50\x9b\x14\xde\x3f\xc4\x26\x01\x8f\x62\xcc\x0e\xc7\xe8\x7a\x8c\xbb\x9d\x1c\x40\x22\xbe\x21\x74\xf0\x2c\x1f\x47\xe7\xf4\x64\xaa\xda\x76\xda\xb7\x1b\x26\xe3\x53\x7f\x4f\x57\xf6\xcf\x7f\xeb\x29\x39\xe9\xdc\xa1\xb7\xea\x63\x88\x45\x76\x69\xd3\x22\x74\x49\xdb\xe8\x8a\x83\xaf\x34\x08\x8b\x99\xb1\xb8\x28\x4b\x8d\xb3\x34\xa9\x8f\x85\xb5\x34\x98\x8d\x01\x32\x6e\x69\x74\x6d\x80\xeb\x19\x5b\x67\xa7\xd0\x73\x71\xb9\x0b\x8f\xcd\x4c\xcf\x7b\xb8\xa0\xdd\x50\xf5\xbe\x2d\xc4\xa7\x67\xf6\xa6\xe4\x19\x26\x94\xbd\xa1\xe1\x19\x62\xc2\x0d\x8d\xee\x66\x07\x76\xbb\x48\x6c\x49\x2f\x6e\x68\x84\x96\xd4\x7c\x14\x3c\xee\xec\xba\x7a\xce\xb8\x54\x0e\xc3\xb0\x89\xd9\x1c\x42\x95\xfa\xb7\x28\xea\x80\x9d\x30\xcb\x36\x98\xf5\x4c\x4d\x91\xf7\xcc\x9c\x6b\xe6\x5c\x35\x35\x66\xce\x95\x77\x61\x63\x24\x43\x1a\xb7\x33\xed\xc1\x0d\x6d\x44\x61\x48\xdb\xdb\xf5\xe1\x89\x63\xb9\x21\x0b\xb7\xe3\xf9\xa2\xd1\xd8\xd8\xf7\x88\x9b\x35\x0b\xfd\xce\xdf\x73\xa9\x67\xf1\xd5\xeb\x3f\xde\xaf\xee\x57\xf7\xaf\xf4\x61\x5e\xc2\xb6\x3c\xef\xbe\xb5\x4b\xe0\x7f\xd8\x03\x0a\x04\xde\x20\x1c\x93\x3b\x84\x13\xc5\xd1\x0e\x18\x88\xd4\x4c\x7e\xb6\xe3\x46\x94\xae\x6a\x64\xa2\x94\x04\x9f\x0f\x78\x73\x1f\xf0\x68\xa9\xdb\xbd\x7d\xfc\x29\x93\xfb\x02\x42\xe6\x9d\x3e\x7c\xe7\xe7\xfa\xc4\x58\xed\xcb\x83\xc1\xcb\x62\x07\x73\x99\x6d\x4a\x2f\x9f\xca\x9d\xcc\x35\x09\x9f\xcb\x1a\x44\xad\xb4\xd9\xd1\xd7\x2f\xeb\x27\x02\x47\xa0\x40\x14\x27\x94\x3d\xcf\x2b\x0b\x11\xe6\x36\x69\x68\xd5\xbf\x53\xa5\xaa\x67\xf9\x22\xf5\xeb\xba\x54\x6f\x05\xfc\x27\x21\x02\x52\xb7\x52\x22\x81\x4e\x45\xdf\xb0\xb7\xf9\xb1\xac\xfc\x66\x25\x96\x7a\x95\xf1\xf5\x6a\x55\xaf\x98\x58\x15\x95\xc1\x1e\x22\xdc\x70\xb3\xdf\x0b\xd8\xa6\x42\xbf\x5b\xd6\xce\x5c\x2f\xdb\xfb\xfc\x16\xef\x7b\x18\xfb\xbb\x3d\x87\xcc\xac\x6a\x3c\x5c\x52\x8d\xe6\xa2\xc3\xbb\x9a\xef\x94\xbb\xeb\x59\x9b\x8f\x8b\x5c\x3e\x2b\x99\xd5\x3c\xb7\x73\x96\x60\x88\xb7\x9e\xd9\x15\x4a\x1d\xc7\x1f\x7f\xb9\x4a\x96\x4f\xd5\x81\x82\x4b\x2f\xdd\xda\xd1\x86\xe9\x2d\xdc\xea\x34\xc7\xbc\x76\x4f\xb2\x76\x93\x98\x72\x1c\x2e\x9f\x22\x1e\x26\x14\x2a\x5f\x8d\xb3\x58\x69\x76\xd6\x5f\x75\x23\x44\x98\xe2\x48\xed\x01\xc9\x83\x54\x10\x9d\xce\x85\x33\xe5\x5e\xea\xbe\x77\x6e\x15\xf4\x00\x20\x48\x04\x51\x07\xa4\xc9\xc6\x1d\xda\x81\x42\x44\xa1\xad\xe0\x11\xd2\xdb\x7b\x48\xf0\x44\x41\x5b\xdb\x3d\xe0\x94\x00\x77\xf4\xcd\x28\xcb\xa9\x56\xdb\xc3\xea\x95\xc3\xd7\x0e\x3c\x41\x58\x00\x62\x5c\xa5\x8c\x65\xcf\x05\xf9\x1f\x84\x4e\x0f\xb4\xa5\xc3\xad\x03\xcf\x2e\x59\xe3\xc1\xe7\x6c\xa6\x3a\x87\x9f\xed\x63\xf7\x1a\x06\x6b\x49\x36\x0e\x42\x77\xe4\x3a\x07\xa2\x7b\xbe\x72\x34\x51\x5f\x74\xa4\x2b\xf2\xc7\xb8\x5a\x1b\xe6\xda\xca\x99\x3b\xe0\xf1\x07\x87\x41\xb7\x5c\x6c\x48\x18\xa6\x6e\x99\xda\x76\x8f\xbf\xa4\xc6\x45\x38\x08\x40\x4a\xb4\x07\x01\xb3\x71\x4f\x69\xdc\x72\xfe\x07\xdb\xd5\x85\xc6\x15\xae\x4b\x0b\x20\x4b\x10\x4b\xe3\xc1\x95\xc4\x0e\xc8\x10\x12\x55\xbb\x22\x88\x88\x44\x89\x84\x10\x6d\xb9\x40\xf9\xb9\xaf\xf4\x81\x40\x59\x8e\xf9\x12\xa4\xbe\x36\x98\xec\x41\xf5\xb6\x0e\x1b\x1e\x1e\x0c\x69\x4d\xb6\xf3\xbe\x0e\xb1\xc2\x46\x45\xb6\x98\x4a\x38\x3e\x7a\x77\x4e\x1f\x99\x3c\xe4\xac\x8c\xca\x74\x91\xd4\x0a\x47\x73\x7c\xe9\xc8\xdd\x6e\x7c\xb9\x28\x39\x4d\x17\x8a\x03\x07\x35\xa8\x0c\xe3\xa4\x19\xfe\x68\x90\x23\x6c\x44\x46\x7a\x01\xe0\x68\x1c\x28\xbb\x38\x72\x18\x4f\xc4\x58\x3d\xed\x4a\xb2\xb1\x09\x3b\x3c\xaf\xe2\xbc\xb3\x62\x10\x50\x2e\xe1\x3d\x48\x99\x06\x7c\xfd\x43\x96\xb1\x5e\x66\x8f\x6f\x21\xce\x9f\xdf\xe1\xed\x77\x1d\xe7\x80\x39\x07\xcc\x39\x21\xbb\xb4\x71\xc7\x4d\xc8\x06\x01\xf2\x52\xe3\x2b\x57\xfb\x6a\xbb\xb3\x1f\x9b\xdf\x52\xfa\x73\xda\xa2\x85\xd1\x98\x52\xc4\xb7\x28\xa0\x04\x98\x92\x05\x54\x4b\xb4\x49\x54\x89\xdf\x9c\xdd\x44\x8e\x36\x63\xf7\xbc\xbc\x67\xec\x9e\x8d\x7b\x21\xec\x8e\x30\xa1\x4b\x7d\x49\x72\x58\x0a\x59\xde\xa7\x44\xfa\x6f\x28\x6d\x3f\xf9\x64\xb2\x73\x3d\xd5\x34\xbf\xe7\x4f\x28\xbb\x77\x57\xc7\xb3\x7b\x71\x7d\x64\x19\x60\x4a\x37\x8d\xfb\xc3\x8e\x1a\x6a\x76\x6d\xec\x5d\x7e\xe5\x18\x11\xa9\xb7\xb6\x12\x41\x51\xc0\x23\xc2\x76\x59\x08\x95\x69\x78\xd6\xc7\x16\xd1\x6f\xea\x37\xf5\xe7\x5f\xd2\x60\x8a\x9e\xf4\x8f\x54\xf6\x0d\xea\x7e\x5e\xbf\x8c\x40\xed\x79\x88\xde\xa0\x38\x51\x28\xb7\x38\x7a\x83\x8a\x2b\xce\x5a\xe6\xf5\x6a\x95\x3e\x2a\x63\xd8\x7d\x33\x86\x69\x99\x87\xb6\x8c\x21\x21\x45\xcf\x53\x75\xd6\xe2\xc2\xf7\xc5\x9d\xf4\x05\x44\xe2\xa2\xa5\x8f\x31\x96\x4b\xfb\xe2\xa4\x0b\x2b\x33\xd9\xc7\xe2\xa2\xd6\x34\xdd\x2d\x1f\xf0\xec\x6c\x67\x74\xb6\xd6\x79\x6c\x27\x24\xff\x18\x12\xf5\x98\x37\xc8\xd2\x16\xbd\xa3\x05\x21\x51\xa8\xe8\x08\xc5\x82\x6f\x09\xbd\x89\x7c\xe9\xfa\xf7\xb4\xda\xd7\x88\x2f\xbe\x74\x26\x59\x9d\x9e\x53\xce\x8e\xdc\x9c\x72\xce\xc6\x3d\x8d\x71\xcf\x9a\x72\xc6\xb5\xdb\x06\xce\x0a\x61\x56\x57\x4c\xb3\x8c\x34\xa2\xa5\x81\x28\x7f\xa2\x03\xcf\xb7\x1d\xaa\xbb\xb6\xb0\x76\xed\x51\x61\x86\xe3\x8e\xdc\x0c\xc7\xb3\x71\x4f\x63\xdc\xb3\xc2\x71\x71\x01\x78\x58\x4e\x3b\xd1\x2c\xb6\xfd\xcf\xc8\x98\xa6\xef\x8a\xd1\x77\x52\x99\x6c\x71\x73\x4b\xf0\x30\x09\xfa\xff\x03\x08\xad\x75\x25\xb6\x57\x2a\x2e\x5f\x7d\xc5\xbb\x9d\xf6\x4c\xff\xf5\xfd\xca\x5f\x3c\xff\x3f\x00\x00\xff\xff\x48\x8f\x89\x0e\x6e\x62\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

