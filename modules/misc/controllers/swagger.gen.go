// Code generated by go-bindata.
// sources:
// swagger/index.json
// DO NOT EDIT!

package misc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _swaggerIndexJson = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x59\x8f\xdb\xb6\x13\x7f\x96\x3f\x05\xa1\xff\xff\x71\xb1\x76\x36\x8b\x16\x0d\x10\xa0\x49\x1b\x14\x41\x8f\x2c\xb2\x69\x5f\x9a\xc0\x18\x4b\x63\x8b\x59\x8a\x54\x49\x2a\xa9\xbb\xd8\xef\x5e\x90\x3a\xac\x83\x92\xe5\x5d\xef\x61\x57\x79\x49\x44\x0d\xa9\xe1\x1c\xbf\xe1\x0c\xc7\xb9\x9e\x78\xfe\x02\x14\x5e\x80\x8e\xfc\x17\xc4\x9f\x42\x42\xfd\x93\x89\xe7\x07\x82\xab\x34\x46\xe5\xbf\x20\x7f\x4e\x3c\xcf\x87\x24\x61\x34\x00\x4d\x05\x9f\x7e\x56\x82\xfb\x13\xef\x93\xa1\x0b\x71\x49\x39\x35\xc3\x86\xf4\xda\x92\x02\xcc\x7f\x42\x1e\xa2\xfc\xb0\x4e\x30\x1f\xf5\x7c\x9d\x3d\xf8\x4a\x4b\xca\x57\xfe\xc4\xf3\x6e\x4e\x0c\x79\x20\xb8\x96\x82\x31\x94\xf3\x37\x52\x0a\xf9\x1e\x55\x22\xb8\xc2\x4b\x1a\x27\x6c\x33\x3d\x91\x22\x41\xa9\x29\x16\xdf\xf1\x3c\x1f\x0d\x7d\xf9\xe8\xa4\x31\xa3\x20\x21\xae\x8e\x78\x3e\xd5\x58\x1f\x71\xb1\x67\xff\x58\x1e\xeb\x14\x20\x25\xac\x0b\x82\xf2\xbd\xaf\xf1\x6f\x5d\xfb\x88\x7b\xc5\x9b\x49\x6d\x5e\x49\x25\x16\x9f\x31\xd0\x19\x95\xa5\xc9\x28\x1c\xef\x5b\x62\xfb\x4d\xc8\x18\x58\x21\xb7\x0e\x89\x6d\x59\x2e\x8c\xf9\xfc\x55\xa0\xe9\x17\xbc\xd4\xa0\x53\xb5\x55\x6d\x66\xc2\x8f\x22\x06\xca\x7b\x55\x04\x76\xcd\x8a\x8e\x5c\x52\xc9\x85\xe1\x07\x12\x41\x63\x38\x87\x8a\x20\xfd\xa5\xd9\x9d\x19\xf0\x43\xd0\xf8\x81\xc6\xe8\x37\x65\xe7\x5a\x2b\x44\x15\x48\x9a\x18\xcb\xdc\x6a\x21\x97\xd9\xfc\x01\xca\x2b\xb5\xfd\x07\x30\x1a\x3a\x67\x2c\x84\x60\x08\x7c\x27\x7d\xe7\x3c\x57\x57\x2c\x09\x29\xd7\xb8\x42\x59\xa7\xe4\x10\x0f\x15\x6a\x9a\x84\x77\x17\xea\x00\x83\xd4\x12\xb8\x9a\xeb\xef\x5e\x43\xa7\x0d\x4e\x9c\xfe\xd8\xf2\x46\xb7\xf0\x5b\x12\xac\xf8\x61\xb1\xd7\xba\x0f\xde\x7a\x2b\xa9\x42\x39\x0f\x80\xb1\xd7\x10\x5c\xf5\xee\x85\xe3\xd7\x79\x02\x4a\x7d\x15\xd2\xa5\x3b\x97\x3e\xb4\xb8\x42\xbe\x37\x26\x23\x0c\xae\x7e\x05\xca\x2e\x60\xcd\x04\x84\xfd\x70\x19\x03\x65\x7b\xff\xf2\x16\xdc\xc9\x3d\x3b\x95\x12\xb9\x9e\x87\x35\xc4\xe8\xf2\x9a\xd2\x87\x2d\x75\xaf\xa9\x38\x1d\xba\x0d\x3b\xc3\x10\xde\x85\x3f\xfd\xde\x32\x6c\x5d\x27\x16\x75\x73\xef\x44\xa4\x9e\x2f\x55\xbf\xe5\x82\xa6\x1e\x74\xda\x00\x54\x7d\x15\x27\x4c\xd5\x37\xd5\xf8\x86\x1b\xaf\xea\x53\xea\xa8\x35\x4c\x76\x2e\xf8\xba\xbd\x4e\xda\x51\xdb\xb5\xcf\x5e\xa8\x19\xea\x20\x4b\x21\x57\xa8\x1f\xce\x21\x99\x58\x51\xbe\x37\x18\x38\x29\xb0\x7a\x18\xb6\x0d\x65\x32\x41\xa9\x04\x87\x41\x70\x05\x61\x28\x51\xa9\xa1\x67\x07\x64\x2c\x89\x04\x1f\x7c\xd6\xa0\x7a\x3d\x1f\x1e\x70\x97\x54\x2a\x3d\xdf\x21\xec\xae\xec\x09\x78\x20\x31\x83\xdd\x16\x1f\xb4\xd1\xa1\x3a\x91\xb8\xa2\x4a\xa3\x1c\xa2\x93\x40\xc4\x09\xf0\xf5\x2e\xbc\xee\x62\x6e\x3b\x4b\x79\x57\xc1\xc5\x62\x41\xd9\x60\x29\xef\x16\xd8\xad\x30\x75\x25\xe5\xb9\xbb\x62\xb2\xc8\xfa\x8b\xf1\xec\x77\x3f\x6f\x39\x67\x07\x22\xe5\x7a\xeb\x51\x37\x10\x32\x11\x12\x9a\xa1\xa8\x2b\x12\xb5\x9d\xb0\x8f\xba\x2b\x70\xf5\x44\xae\x5a\xe8\x72\xc7\xae\xbe\xe0\x55\x89\x5e\xf5\x20\xd8\x11\xbf\x6a\x31\xce\x01\x19\xc7\xb4\xbb\x26\xc0\x6d\xd9\xdb\x5b\xae\xbf\x39\xef\x64\xae\x19\xd5\x1f\x79\x6f\xee\x83\xda\x96\x53\x41\xb7\xa2\xaa\x6b\x63\x20\xb8\x88\x69\x30\x0f\x44\x78\x9c\x96\xe1\x42\xd9\xc1\xe2\x71\x20\xee\xe0\xb9\xb7\x9c\x76\xbc\x3e\x5a\x84\xde\xe3\xb5\xb5\x8e\xe3\xfb\x5e\x3c\xd5\x06\xc9\x16\xc2\x75\x22\x56\xb9\x0d\x47\x4d\xaf\xbe\x85\x4d\x7a\xd0\x38\xbc\x0c\x28\x0c\x75\x54\x85\x1a\xdc\x6c\xe8\x8b\x13\xf1\x18\x8d\xc7\x68\x5c\x61\x63\x8c\xc6\xf9\x12\x77\x89\x55\xcd\x1c\x6c\xf0\xc4\xbb\x04\xb9\xe3\xb5\xe1\x03\xc7\x72\x47\x7e\x76\xb7\x5b\x9a\xfd\x15\x74\x27\xf6\x9d\x1f\x09\x65\xa5\xf8\xec\xec\xdb\xd3\xd9\xe9\xec\xf4\x99\xbd\x8a\xa3\x7c\x29\xf2\xe5\x1b\x95\x44\xff\x43\x84\x24\x90\xb0\x20\x90\xd0\x13\x02\xa9\x16\x64\x85\x1c\xa5\x51\x93\x9f\x55\xe5\xa9\xb6\xf9\x6e\x46\xca\x68\x70\xb5\x86\xc5\x69\x20\xe2\xa9\x9d\xf7\xea\xe2\x6d\x46\xf7\x05\xa5\xca\x17\x7d\xfe\xdc\xcf\xf9\x49\x40\x47\xe5\xb5\xde\x34\x4d\x98\x80\x70\x7a\x1d\x8b\x30\x65\x78\xb3\x49\x47\x33\xae\xf3\x44\xb4\xc1\xe1\xef\x76\x12\xa1\x5c\x0b\xa2\x23\x24\x6a\xad\x34\xc6\x7e\x99\x61\x4b\x88\x51\xa3\x2c\xee\x19\x3d\xcf\x2b\x53\xd5\xc6\x4a\xfe\x26\xc4\xda\x67\xc3\xdc\x66\x2c\x77\x56\x3f\x63\x6e\x33\x2e\xf1\xaf\x94\x4a\x34\x86\xa5\x65\x8a\xad\xba\x9f\xf3\x8a\xa1\x8b\x05\xbb\x01\x0c\x52\x49\xf5\x9a\x58\xb5\x9f\x90\x15\x6a\x42\x35\x59\x4a\x11\x13\x5b\x82\x23\x52\xa4\x1a\x9b\xdc\x46\x08\x06\x8a\x5a\xfc\x66\xc6\x73\x4b\x76\xed\x5f\x9f\x72\x59\x16\xd5\x82\x6a\xc1\xec\x7c\xf6\xac\x9a\xfc\x37\xb6\xb3\x16\x29\x01\x89\x84\x0b\x6d\x6c\x27\x12\x92\xfe\x93\xdb\x8d\x25\x57\x41\x84\x31\x0c\x3a\x98\x34\x6e\x62\xfb\x68\x9d\x37\xb2\x99\xa4\x5a\xb7\xb2\x3d\x1e\xda\xf0\xfe\x1a\x65\xed\x86\xb6\x45\xd7\xba\xa9\xdd\xf2\x95\x9d\x21\xd3\x85\x4d\x85\x1b\x72\xa1\xe7\x0e\x59\x77\xa2\x57\x03\x87\xce\x67\xcf\x7b\x14\xba\x14\x72\x41\xc3\xd0\x98\xa5\xd1\x6d\x04\x5f\x8c\x72\x09\x04\x01\x2a\x45\x22\x94\x38\x2a\xf7\x3e\x95\x5b\xca\x7f\xb0\x5e\xeb\x81\x04\x56\x15\x1c\xac\xdc\xf0\xab\x6c\xda\xa7\x49\x3e\x25\xab\x11\x4e\x4d\x40\x9b\x5a\xcc\x19\x86\xc5\x19\x3c\x99\x59\x84\xf2\x3d\x22\xf1\x42\x84\xeb\x36\xb2\x25\x59\x39\x79\x1e\x82\x06\x27\xc0\x2d\x81\x29\xec\xb3\xc7\xff\x4b\x5c\x9a\x95\xfe\x37\xad\x74\x99\x4c\xdb\x97\x1d\x2e\x99\xf6\xa1\xe2\xd9\x6c\xd6\xe3\x44\xbd\x2e\xd2\xc3\x52\xb3\x5a\xdb\xe9\xc1\x7b\xfe\xf8\x96\xfe\x99\x5b\x01\xc9\xbd\xb3\xd1\x67\xf7\x46\x9a\xfd\x06\x2f\xd2\xcd\xbd\x5a\xe5\x8e\xad\xb5\x8d\x80\x09\x85\x97\xa8\xcc\xc9\x86\xd8\x07\x45\xf2\x9b\x68\xa2\xb2\xe1\xdb\xd8\xff\xc1\x1d\x03\xf6\x6e\xf0\xdd\xcd\x47\x9d\xe6\x36\x1e\x44\x5a\x74\xe3\x41\x64\x54\xee\xfd\x28\x77\xbf\x07\x91\x41\x80\x3c\xb5\xf8\x2a\x74\xb4\x29\xb8\x6c\xc7\xe6\x57\x8c\xbd\x33\x33\x1a\x18\x0d\x8c\x11\xb1\x34\xe9\x2a\x72\xad\x0a\xa8\x56\x64\x91\xea\x12\xbf\x05\xc7\x11\xbb\x47\xec\xfe\x4f\xba\xf7\x88\xdd\x47\xac\xdc\x07\xc5\xee\x18\x28\x9b\xda\x56\xce\x61\x29\x64\xd9\xf5\x49\xec\xbf\x88\x99\x7f\xf0\xc9\x64\xab\x89\xd6\x25\xdf\x87\x4f\x28\xdb\x1d\xb6\xfb\xd3\x7b\xd1\xda\x34\x0d\x80\xb1\x45\xad\xcb\x39\xed\xd6\x7e\xd6\xd2\xf8\x43\xde\x18\x4d\xa8\xb2\x25\xdd\x54\x32\x12\x88\x98\xf2\x55\x16\x42\x95\x09\xcf\xf6\xe2\x94\x7c\xd4\x1f\xf5\xf7\xef\x4d\x30\x25\xd7\xf6\xc1\xd0\xbe\x24\xed\xcf\xdb\x97\x31\xea\x48\x84\xe4\x25\x49\x52\x4d\x72\x8d\x93\x97\xa4\x68\xc4\xb6\x34\x67\xb3\x99\x19\x2a\x63\xd8\x69\x3d\x86\x59\x9a\xf3\x26\x8d\x23\x21\x25\x37\x87\x6a\xac\x45\x5b\xfa\xa3\x1b\xe9\x2d\x0e\x12\x8f\x5a\xfa\xd8\x87\xbb\x34\x9b\x7a\xfb\xb0\x32\xa3\xbd\x28\x9a\x08\x0f\xd3\xdc\xf2\x0d\x8f\xc6\xf6\x80\xc6\xd6\xe8\x08\xe9\x85\xe4\x37\x21\xd5\x17\xf9\x84\x2c\x6d\x21\x4b\x21\x09\x86\x54\x93\x62\x21\x92\x48\xb1\xa4\xec\x28\xf2\xa5\x2d\x37\x74\x4f\xc0\x63\x9a\x2d\xee\x8f\xee\x3a\x07\x59\x9d\x1e\x53\xce\x16\xdd\x98\x72\x8e\xca\xbd\x1f\xe5\x3e\x68\xca\x99\x54\xfa\x9d\x7a\x2b\x84\x59\x5d\xd1\x64\x19\x26\xa2\x99\x40\x94\x8f\xd8\xc0\x73\xb7\x66\x92\xa7\x16\xd6\x9e\x7a\x54\x18\xe1\xb8\x45\x37\xc2\xf1\xa8\xdc\xfb\x51\xee\x83\xc2\x71\xf1\x13\x84\x61\x39\xed\x81\x66\xb1\xcd\x9f\x38\xba\xc4\xf7\x84\xd1\xf7\xa0\x32\xd9\xa2\x77\x54\x8a\x30\x0d\xb6\xff\x07\x32\x96\xeb\x0d\x59\xa4\x75\x52\xbe\xfa\x0a\xab\x95\xb5\x4c\xff\xec\x74\xe6\x4f\x6e\xfe\x0d\x00\x00\xff\xff\x80\x4d\x67\xfb\xae\x46\x00\x00"

func swaggerIndexJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerIndexJson,
		"swagger/index.json",
	)
}

func swaggerIndexJson() (*asset, error) {
	bytes, err := swaggerIndexJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/index.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger/index.json": swaggerIndexJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"swagger": &bintree{nil, map[string]*bintree{
		"index.json": &bintree{swaggerIndexJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

