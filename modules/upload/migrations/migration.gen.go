// Code generated by go-bindata.
// sources:
// db/20180325065727_uploads.sql
// db/20180417130154_perm.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20180325065727_uploadsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6f\x9b\x40\x10\x85\xef\xfb\x2b\xde\x2d\x46\x4d\xa4\xf8\x50\xa9\x95\x95\xc3\x06\xc6\xce\xaa\x78\x71\x97\xa5\x4a\x4e\xb0\x35\x9b\x66\x15\x1b\x10\xac\x9b\xaa\xbf\xbe\xc2\x36\xc4\xae\x5c\xa9\x47\x66\xde\xfb\x66\x78\x3b\xec\xe6\x06\x1f\xb6\xee\x47\x6b\xbc\x45\xd6\xf4\x9f\xe9\xd7\x18\xae\x42\x67\xd7\xde\xd5\x15\xae\xb2\xe6\x0a\xae\x83\xfd\x65\xd7\x3b\x6f\x4b\xbc\xbd\xd8\x0a\xfe\xc5\x75\x38\xf8\x7a\x91\xeb\x60\x9a\x66\xe3\x6c\xc9\x42\x45\x5c\x13\x34\xbf\x8f\x09\x62\x0e\x99\x68\xd0\xa3\x48\x75\x8a\x62\xd7\x6c\x6a\x53\x76\x05\x26\xac\x70\x65\x81\x6f\x5c\x85\x0f\x5c\x4d\xa6\x9f\xa7\xc1\x5e\x28\xb3\x38\xbe\x66\xc5\xae\xb3\x6d\xde\x0b\x84\xd4\x93\xe9\x6d\x80\x4c\xa6\x62\x21\x29\x3a\x15\x6d\xdd\xd6\xbe\x23\x3e\xde\x9e\x11\x3a\xf7\xdb\x1e\xed\xe7\xe8\xe3\x6f\xfd\xd3\x68\xbc\x6f\x4f\x9a\x7b\x77\x16\xc7\x88\x68\xce\xb3\x78\x94\xad\x5b\x6b\xbc\x2d\x73\xe3\x0b\x44\x5c\x93\x16\x4b\x1a\x31\xa3\x38\xcc\x94\x22\xa9\xf3\xbe\x9b\x6a\xbe\x5c\x5d\xb3\x95\x12\x4b\xae\x9e\xf0\x85\x9e\x30\xe9\x43\x08\x02\x46\x72\x21\x24\xe1\x0e\xa2\xaa\xea\xe8\x9e\x8d\xf6\x07\xae\x78\xa8\x49\x21\x25\x8d\x3b\xec\xfc\xf3\xa7\x19\x63\x3c\xee\x4b\x87\x80\x8f\x89\x32\x80\x47\x11\xc2\x44\xa6\x5a\x71\x21\xf5\xd0\xc8\xfb\x28\xbb\xdc\x95\xf9\xf3\x2b\x9b\x27\x8a\xc4\x42\x1e\x66\x1f\x33\x0e\xa0\x68\x4e\x8a\x64\x48\x29\xf6\x62\x4c\x5c\x19\xcc\xd8\xf0\x90\x42\x46\xf4\x78\x11\x07\x24\x72\x68\xbc\xf3\xfe\x5e\xb0\x37\x5c\x58\x6f\xcf\x19\xa8\x17\xd6\x33\x3f\x8d\x37\xed\xf9\x76\xc3\xa8\xc3\x94\xd3\xcb\x8d\xea\xb7\x6a\xb8\xdd\xf1\x70\xfb\xe2\x7f\x9d\x6e\x5b\x6f\x36\xb6\xc4\x77\xb3\x7e\x65\x91\x4a\x56\xe7\xd9\xce\x18\xfb\x13\x00\x00\xff\xff\xff\xc0\x2c\x30\x26\x03\x00\x00"

func db20180325065727_uploadsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325065727_uploadsSql,
		"db/20180325065727_uploads.sql",
	)
}

func db20180325065727_uploadsSql() (*asset, error) {
	bytes, err := db20180325065727_uploadsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325065727_uploads.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180417130154_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8f\xcd\x4a\x03\x31\x14\x85\xf7\x79\x8a\xc3\x6c\xda\xe2\x74\xa1\xdb\xe2\x42\x68\xc4\xc2\xd8\xe2\xfc\xe8\xb2\x8c\x93\x6b\x7b\x31\x4d\x42\x6e\x4a\x7d\x7c\x49\x07\x45\x17\x82\xd0\x65\x3e\x4e\xce\x3d\x9f\x9a\xcf\x71\x75\xe0\x5d\xec\x13\xa1\x0b\xf9\xd9\x3c\x55\x60\x07\xa1\x21\xb1\x77\x98\x74\x61\x02\x16\xd0\x07\x0d\xc7\x44\x06\xa7\x3d\x39\xa4\x3d\x0b\xc6\x7f\x39\xc4\x82\x3e\x04\xcb\x64\xd4\x6a\xdd\xe8\xba\xc5\x6a\xdd\x6e\x10\xbd\xa5\x6d\xa0\x78\x60\x91\x1c\x9b\x9e\x01\x9b\x12\x19\x96\x90\xc1\x07\x9a\xe1\xf9\xae\xea\x74\x83\xe9\x75\x59\xec\x28\x6d\x8f\xc1\xfa\xde\x14\x65\x21\x64\xdf\x8a\xd9\xe2\x92\xca\x9b\x3f\x2a\x7f\x79\x2f\xfd\xc9\x7d\x99\x7f\x6b\x67\xf8\x2f\xf1\xe8\xad\x25\x83\xd7\x7e\x78\x57\x4b\x5d\xe9\x56\xe3\xbe\xde\x3c\x62\xbc\x29\x78\x79\xd0\xb5\x3e\xaf\xbb\xfd\xb9\x65\xa1\xd4\x67\x00\x00\x00\xff\xff\xd4\x50\xac\x0f\x7d\x01\x00\x00"

func db20180417130154_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180417130154_permSql,
		"db/20180417130154_perm.sql",
	)
}

func db20180417130154_permSql() (*asset, error) {
	bytes, err := db20180417130154_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180417130154_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20180325065727_uploads.sql": db20180325065727_uploadsSql,
	"db/20180417130154_perm.sql":    db20180417130154_permSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20180325065727_uploads.sql": &bintree{db20180325065727_uploadsSql, map[string]*bintree{}},
		"20180417130154_perm.sql":    &bintree{db20180417130154_permSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
