// Code generated by go-bindata.
// sources:
// db/20180325065727_uploads.sql
// db/20180417130154_perm.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20180325065727_uploadsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4f\x6f\x9b\x30\x14\xbf\xfb\x53\xbc\x5b\x41\x6b\xa5\xe6\x30\x69\x53\xd4\x83\x0b\x2f\xa9\x35\x62\x32\x63\xa6\xf6\x04\x5e\xec\xb6\x56\x09\x20\x70\xd6\x69\x9f\x7e\x72\x02\x34\xd9\xb2\x6a\x47\xfc\xfb\xf7\xf8\x3d\x3d\x72\x75\x05\x1f\xb6\xf6\xa9\x53\xce\x40\xde\xfa\xcf\xec\x6b\x02\xb6\x86\xde\x6c\x9c\x6d\x6a\xb8\xc8\xdb\x0b\xb0\x3d\x98\x9f\x66\xb3\x73\x46\xc3\xeb\xb3\xa9\xc1\x3d\xdb\x1e\x0e\x3a\x4f\xb2\x3d\xa8\xb6\xad\xac\xd1\x24\x12\x48\x25\x82\xa4\xb7\x09\x02\x5b\x00\x4f\x25\xe0\x3d\xcb\x64\x06\xe5\xae\xad\x1a\xa5\xfb\x12\x02\x52\x5a\x5d\xc2\x37\x2a\xa2\x3b\x2a\x82\xd9\xe7\x59\xb8\x27\xf2\x3c\x49\x2e\x49\xb9\xeb\x4d\x57\x78\x02\xe3\x32\x98\x5d\x87\x90\xf3\x8c\x2d\x39\xc6\xc7\xa4\xad\xdd\x9a\x37\x8b\x8f\xd7\x27\x0e\xbd\xfd\x65\x06\xf9\xa9\xf5\xf0\x5b\xff\x14\x2a\xe7\xba\x23\x70\xaf\xce\x93\x04\x62\x5c\xd0\x3c\x99\x68\x9b\xce\x28\x67\x74\xa1\x5c\x09\x31\x95\x28\xd9\x0a\x27\x9b\x89\x1c\xe5\x42\x20\x97\x85\x47\x33\x49\x57\xeb\x4b\xb2\x16\x6c\x45\xc5\x03\x7c\xc1\x07\x08\x7c\x09\x61\x48\x90\x2f\x19\x47\xb8\x01\x56\xd7\x4d\x7c\x4b\x26\xf9\x1d\x15\x34\x92\x28\x20\x43\x09\x37\xb0\x73\x8f\x9f\xe6\x84\xd0\xc4\x3f\x1d\x0a\x1e\x1a\x25\x00\x34\x8e\x21\x4a\x79\x26\x05\x65\x5c\x8e\x40\xe1\xab\xec\x0b\xab\x8b\xc7\x17\xb2\x48\x05\xb2\x25\x3f\x64\x0f\x1d\x87\x20\x70\x81\x02\x79\x84\x19\xec\xc9\x10\x58\x1d\xce\xc9\xb8\x48\xc6\x63\xbc\x3f\x6b\x07\x90\xf2\x11\x78\xf3\xfb\x73\x40\x2f\x38\x33\xde\xde\x67\x74\x3d\x33\x9e\xfa\xa1\x9c\xea\x4e\xa7\x1b\xa3\xfe\x4e\xd1\xcd\x56\xd9\xfa\x4c\xce\x00\xbc\x97\x54\x35\x4f\xcd\x7b\x39\xc7\x17\x12\x37\xaf\xf5\x78\x23\xd3\x81\xf8\xc7\xff\x3a\x91\xae\xa9\x2a\xa3\xe1\xbb\xda\xbc\x90\x58\xa4\xeb\xd3\x1d\xce\x09\xf9\x1d\x00\x00\xff\xff\x53\xe6\xf4\xea\x8e\x03\x00\x00"

func db20180325065727_uploadsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325065727_uploadsSql,
		"db/20180325065727_uploads.sql",
	)
}

func db20180325065727_uploadsSql() (*asset, error) {
	bytes, err := db20180325065727_uploadsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325065727_uploads.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180417130154_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8f\xcd\x4a\x03\x31\x14\x85\xf7\x79\x8a\xc3\x6c\xda\xe2\x74\xa1\xdb\xe2\x42\x68\xc4\xc2\xd8\xe2\xfc\xe8\xb2\x8c\x93\x6b\x7b\x31\x4d\x42\x6e\x4a\x7d\x7c\x49\x07\x45\x17\x82\xd0\x65\x3e\x4e\xce\x3d\x9f\x9a\xcf\x71\x75\xe0\x5d\xec\x13\xa1\x0b\xf9\xd9\x3c\x55\x60\x07\xa1\x21\xb1\x77\x98\x74\x61\x02\x16\xd0\x07\x0d\xc7\x44\x06\xa7\x3d\x39\xa4\x3d\x0b\xc6\x7f\x39\xc4\x82\x3e\x04\xcb\x64\xd4\x6a\xdd\xe8\xba\xc5\x6a\xdd\x6e\x10\xbd\xa5\x6d\xa0\x78\x60\x91\x1c\x9b\x9e\x01\x9b\x12\x19\x96\x90\xc1\x07\x9a\xe1\xf9\xae\xea\x74\x83\xe9\x75\x59\xec\x28\x6d\x8f\xc1\xfa\xde\x14\x65\x21\x64\xdf\x8a\xd9\xe2\x92\xca\x9b\x3f\x2a\x7f\x79\x2f\xfd\xc9\x7d\x99\x7f\x6b\x67\xf8\x2f\xf1\xe8\xad\x25\x83\xd7\x7e\x78\x57\x4b\x5d\xe9\x56\xe3\xbe\xde\x3c\x62\xbc\x29\x78\x79\xd0\xb5\x3e\xaf\xbb\xfd\xb9\x65\xa1\xd4\x67\x00\x00\x00\xff\xff\xd4\x50\xac\x0f\x7d\x01\x00\x00"

func db20180417130154_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180417130154_permSql,
		"db/20180417130154_perm.sql",
	)
}

func db20180417130154_permSql() (*asset, error) {
	bytes, err := db20180417130154_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180417130154_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20180325065727_uploads.sql": db20180325065727_uploadsSql,
	"db/20180417130154_perm.sql":    db20180417130154_permSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20180325065727_uploads.sql": &bintree{db20180325065727_uploadsSql, map[string]*bintree{}},
		"20180417130154_perm.sql":    &bintree{db20180417130154_permSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
