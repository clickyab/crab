// Code generated by go-bindata.
// sources:
// db/20170727210828_uploads.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20170727210828_uploadsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4d\x6f\xe2\x30\x10\x86\xcf\xf1\xaf\x98\x1b\x89\x36\x48\xab\x95\x38\x71\xca\x02\xd2\xae\x14\x02\x0d\x49\xaf\x91\xb1\x27\x64\x84\xe3\x58\xb6\x53\x4a\x7f\x7d\x65\x3e\x2a\x5a\xf5\xd0\xa3\xed\xf7\x1d\xcf\xa3\x87\x4d\xa7\xf0\xab\xa7\x83\xe5\x1e\xa1\x36\xe1\xb8\x7b\xca\x81\x34\x38\x14\x9e\x06\x0d\x93\xda\x4c\x80\x1c\xe0\x2b\x8a\xd1\xa3\x84\x53\x87\x1a\x7c\x47\x0e\xae\xbd\x10\x22\x07\xdc\x18\x45\x28\x99\xb0\x18\x66\x79\xbe\x57\x08\xa3\x51\x03\x97\x8e\xc5\x2c\x22\x09\xa4\x3d\xf0\xd1\x0f\x0d\x69\x61\xb1\x47\xed\xc1\x58\xea\xb9\x3d\xc3\x11\xcf\x29\x8b\x46\x87\xb6\xb9\x05\x8b\x4d\x05\x45\x9d\xe7\x29\x8b\x0c\xf7\x1d\xbc\x70\x2b\x3a\x6e\xe3\x3f\xb3\x59\x72\x79\xd4\xa3\x52\x29\x8b\x7a\xea\x11\x9e\xb3\x72\xf1\x2f\x2b\xe3\xd9\xef\xe4\xb1\xe8\xe8\x0d\xbf\x0e\x73\x68\xaf\x60\xc5\x77\x25\x48\x59\x74\x25\x90\x0d\xf7\xe0\xa9\x47\xe7\x79\x6f\x40\x62\xcb\x47\xe5\x61\x51\x97\xe5\xaa\xa8\x9a\xea\xff\x7a\xb5\xab\xb2\xf5\xf6\x71\x17\x31\x68\xe7\x2d\x0f\x3f\xde\xc8\x9b\x80\xe4\x1a\x92\x4d\x7b\x64\x51\x3b\x58\xa4\x83\x0e\xb4\x10\xdf\x60\x13\xb0\xd8\xa2\x45\x2d\xd0\xc1\x25\x0d\x31\xc9\x84\x25\x6c\xce\x3e\xd9\x59\x0e\x27\x7d\xf7\xf3\x21\x27\x5c\xfe\x48\x8f\x1d\x94\x42\x09\x7b\x2e\x8e\x6c\x59\x6e\xb6\x50\x65\x7f\xf3\xd5\x7d\xcd\x39\x7b\x0f\x00\x00\xff\xff\x1b\x84\x01\x2e\x09\x02\x00\x00"

func db20170727210828_uploadsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170727210828_uploadsSql,
		"db/20170727210828_uploads.sql",
	)
}

func db20170727210828_uploadsSql() (*asset, error) {
	bytes, err := db20170727210828_uploadsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170727210828_uploads.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20170727210828_uploads.sql": db20170727210828_uploadsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20170727210828_uploads.sql": &bintree{db20170727210828_uploadsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

