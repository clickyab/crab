// Code generated by go-bindata.
// sources:
// db/20180325060449_domains.sql
// db/20180325072416_seed.sql
// db/20180407053606_fix.sql
// db/20180519133040_remove_create_domain_perm.sql
// db/20180521070603_get_detail_perm.sql
// db/20180526072954_domain_owner_role.sql
// db/20180526073308_domain_owner_perm.sql
// db/20180526095729_adddefaults.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20180325060449_domainsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5d\x4f\xdc\x3a\x10\x7d\xf7\xaf\x98\xb7\x6c\x74\x83\x74\xe1\xde\xaa\xad\x10\x0f\x26\x99\x05\xab\xbb\x5e\x70\x9c\x0a\x9e\xe2\x6c\x6c\xc0\x22\x24\xab\xd8\x11\xf4\xdf\x57\xd9\xcd\x7e\xd1\x2d\x6d\x91\xfa\x96\xf8\x9c\x99\x33\x33\x67\x34\xe4\xe8\x08\xfe\x79\xb2\xf7\x6d\xe1\x0d\x64\x8b\xfe\x37\xbd\x9e\x80\xad\xc1\x99\xd2\xdb\xa6\x86\x20\x5b\x04\x60\x1d\x98\x17\x53\x76\xde\x68\x78\x7e\x30\x35\xf8\x07\xeb\x60\x15\xd7\x93\xac\x83\x62\xb1\xa8\xac\xd1\x24\x16\x48\x25\x82\xa4\xe7\x13\x04\x36\x06\x3e\x93\x80\x37\x2c\x95\x29\x28\xdd\x3c\x15\xb6\x76\x0a\x46\x44\x59\xad\x80\x71\x39\x3a\xfe\x37\x84\x8c\xa7\xec\x82\x63\xb2\x24\xf3\x6c\x32\x01\x9a\xc9\x59\xce\x78\x2c\x70\x8a\x5c\x46\x44\x79\xeb\x2b\xa3\xe0\x2b\x15\xf1\x25\x15\xa3\xe3\x93\x8f\xe1\x96\x9d\xe0\x98\x66\x13\x09\x41\x59\xd9\xf2\xf1\x5b\x31\x0f\x22\xa2\xaa\xe6\xbe\xd9\x09\xf8\x7c\x1c\x2e\xc9\x7d\xae\x07\xf3\xb4\x93\xeb\xbf\x01\xd9\xa6\x69\x8d\xee\x33\xac\xca\xcd\xe7\x85\xdb\x61\x9f\x7c\xf8\x7f\xab\x1c\x11\x55\x78\xdf\xda\x79\xe7\x8d\x53\x20\xf1\xe6\x55\x45\x03\x49\x1b\x57\xb6\x76\xd1\xcf\xea\x75\xa6\x03\x6c\xe7\x0b\xdf\x39\x05\xc8\xb3\xe9\x28\xd0\xd6\x15\xf3\xca\x04\x11\x04\xa6\x5e\x7e\x1d\xea\x7c\x80\x22\xa2\xca\xd6\x14\xde\xe8\xbc\xf0\x0a\x12\x2a\x51\xb2\x29\xfe\x18\x10\x67\x42\x20\x97\x79\x8f\xa6\x92\x4e\xaf\x22\xa2\xba\x85\x7e\x5f\xe4\x95\x60\x53\x2a\x6e\xe1\x0b\xde\xc2\xa8\x77\x36\x0c\x09\xf2\x0b\xc6\x11\xce\x80\xd5\x75\x93\x9c\x93\x4d\xf8\x25\x15\x34\x96\x28\x20\x45\x09\x67\xd0\xf9\xbb\x4f\xa7\x64\xbd\x36\x19\x67\xd7\x19\x02\xe3\x09\xde\xc0\xb0\x2e\xf9\x8e\x0f\x79\x67\x6b\x6d\x5e\x60\xc6\xd7\x28\x8c\x76\xe0\xf0\x94\x90\x37\x37\xb0\x73\xa6\x5d\x27\x5c\xed\xe1\x10\xfd\xe6\x3a\xf6\xb3\x71\xa6\xfd\x25\xe9\x2f\x1a\xf7\x53\x7b\x96\xd8\xbe\x01\xdb\x96\x22\xd8\x14\xfe\xe7\x96\xd0\x49\xff\xb4\x1a\xe3\xde\xdc\x08\x00\x4d\x12\x88\x67\x3c\x95\x82\x32\x2e\x07\x2f\xf2\xa5\xd6\xda\x35\xab\xf3\xbb\x47\x32\x9e\x09\x64\x17\x7c\x55\xd9\xa6\xb0\x10\x04\x8e\x51\x20\x8f\x31\xdd\x1a\x69\x75\xf8\x7e\xd9\x15\xf5\x80\xe8\x30\x80\x3d\xc9\x25\x79\x2d\xb8\x77\x03\x93\xe6\xb9\x5e\x5f\xc1\xcd\x09\xec\x1f\x7f\xeb\x08\xb6\x4d\x55\x19\x0d\xf3\xa2\x7c\x24\x89\x98\x5d\x1d\x6a\xe3\x74\x17\xd9\xbc\x91\xef\x01\x00\x00\xff\xff\x1f\x33\x1c\x44\x8a\x05\x00\x00"

func db20180325060449_domainsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325060449_domainsSql,
		"db/20180325060449_domains.sql",
	)
}

func db20180325060449_domainsSql() (*asset, error) {
	bytes, err := db20180325060449_domainsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325060449_domains.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180325072416_seedSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xcd\x6a\xc3\x30\x10\x84\xef\x79\x8a\xb9\x29\xa1\x8a\x48\x7c\xe9\xa1\xa7\x42\x54\x6a\x70\x1d\xea\x9f\xf6\x58\x64\x49\x71\x96\x28\xb2\xb1\x14\xd2\xbe\x7d\x11\x69\x02\xbd\x95\xde\x76\x96\x99\x9d\xe5\x9b\x2d\x97\xb8\x3b\x52\x3f\xa9\x68\xd1\x8e\x49\xd6\xaf\x05\xc8\x23\x58\x1d\x69\xf0\x60\xed\xc8\x40\x01\xf6\xd3\xea\x53\xb4\x06\xe7\xbd\xf5\x88\x7b\x0a\xb8\xe4\x92\x89\x02\xd4\x38\x3a\xb2\x66\x96\x97\xb5\xac\x1a\xe4\x65\xb3\x85\x19\x8e\x8a\x7c\xc0\x9c\x0c\xbf\xcc\x1f\x9d\x0a\x96\x1b\x1b\xf4\x44\x63\x8a\x2e\xf0\xf6\x58\xb4\xb2\xc6\x7c\xcd\x59\x88\xaa\x27\xdf\x0b\x3d\xa9\x4e\x68\x47\xfa\xf0\xa5\x3a\xa1\x2c\xe3\xec\xaa\xf0\xe3\x61\x8b\x87\xff\x57\x65\x9c\xad\xb3\x7b\xb1\x12\x2b\xb1\x66\x9c\xb9\x41\x2b\x87\x10\x4f\xbb\x5d\x3a\xfb\x8b\xc9\x66\x38\xfb\x2b\x95\x1b\x92\xb4\xfc\x13\x94\x69\x70\xce\x1a\x74\x4a\x1f\x66\x1b\x59\xc8\x46\xe2\xa9\xda\xbe\xdc\xbe\x7d\x7f\x96\x95\x04\x19\xe4\x65\x02\x90\xa5\xf6\xef\x00\x00\x00\xff\xff\x44\x1b\x19\x78\x93\x01\x00\x00"

func db20180325072416_seedSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325072416_seedSql,
		"db/20180325072416_seed.sql",
	)
}

func db20180325072416_seedSql() (*asset, error) {
	bytes, err := db20180325072416_seedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325072416_seed.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180407053606_fixSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xd0\xbd\x4e\xc3\x30\x14\x05\xe0\xdd\x4f\x71\xb6\x0e\xa8\x4f\xc0\x64\x1a\x57\xaa\xe4\x24\x90\x5e\x0f\x4c\x91\x89\xaf\xe8\x15\xa9\x63\xc5\x8e\xca\xe3\x23\x0b\x81\xc4\x56\x31\xde\x9f\x73\x86\x4f\xed\xf7\x78\xb8\xca\xfb\xea\x0b\xc3\xa5\x3a\x9e\x5f\x2c\x24\x22\xf3\x54\x64\x89\xd8\xb9\xb4\x83\x64\xf0\x27\x4f\x5b\xe1\x80\xdb\x85\x23\xca\x45\x32\xbe\x73\xf5\x49\x32\x7c\x4a\xb3\x70\x50\xda\x92\x19\x40\xfa\xc9\x1a\x6c\x99\xd7\x3c\x86\xe5\xea\x25\x66\xb4\x7d\x73\x3a\xbe\xe2\xd0\x5b\xd7\x76\x98\x56\xf6\x85\xc3\xe8\x0b\x1a\x4d\x86\x4e\xad\x41\xd7\x13\x3a\x67\x2d\x1a\x73\xd4\xce\x12\x0e\x6e\x18\x4c\x47\x63\xbd\x9e\x49\xb7\xcf\x8f\x77\xf7\x6f\x29\xfc\xab\xff\x8f\x48\xb3\xdc\xe2\x8f\xc9\x2f\x48\x5d\xde\x45\xb2\x2e\xf3\xcc\x01\x6f\x7e\xfa\x50\x4a\x7d\x05\x00\x00\xff\xff\xa7\x1a\x37\xb3\x6b\x01\x00\x00"

func db20180407053606_fixSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180407053606_fixSql,
		"db/20180407053606_fix.sql",
	)
}

func db20180407053606_fixSql() (*asset, error) {
	bytes, err := db20180407053606_fixSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180407053606_fix.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180519133040_remove_create_domain_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xc1\x4a\xc4\x30\x18\x04\xe0\x7b\x9e\x62\xe8\xa5\x8a\xf6\xa4\x37\xf1\x20\x34\xa2\x50\x2b\x56\x8b\xc7\x12\x93\x1f\xfb\xb3\x69\x12\x92\x2c\xdd\xc7\x5f\x42\xd9\x85\xbd\xed\x71\x86\x19\xf8\x44\xd3\xe0\x6e\xe1\xff\xa8\x32\x61\x0c\x25\x7e\x7f\x75\x60\x87\x44\x3a\xb3\x77\xa8\xc7\x50\x83\x13\xe8\x40\x7a\x9f\xc9\x60\x9d\xc9\x21\xcf\x9c\xb0\xfd\xca\x88\x13\x54\x08\x96\xc9\x88\x56\x76\xf2\x47\xe2\x75\xf8\xfc\x40\xf4\x96\xa6\x40\x71\xe1\x94\xca\xec\xf7\x4d\x0e\x12\xa5\xc0\x73\xa5\x23\xa9\x4c\x93\xa3\x75\x32\x7e\x51\xec\x2a\xbc\xf4\xed\xf6\x61\x83\xf7\x1e\x37\x0f\xf7\x8f\xb7\x4f\xe2\xc2\xd8\xfa\xd5\x9d\x94\x67\x62\x29\xaf\x42\x46\x6f\x2d\x19\xfc\x29\xbd\x13\x42\x1c\x03\x00\x00\xff\xff\xa5\xde\x88\xb8\xfd\x00\x00\x00"

func db20180519133040_remove_create_domain_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180519133040_remove_create_domain_permSql,
		"db/20180519133040_remove_create_domain_perm.sql",
	)
}

func db20180519133040_remove_create_domain_permSql() (*asset, error) {
	bytes, err := db20180519133040_remove_create_domain_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180519133040_remove_create_domain_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180521070603_get_detail_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x4f\x4b\xc3\x40\x10\x47\xef\xfd\x14\x3f\x72\x69\x83\xe9\xc9\xde\x4a\x0f\x85\xac\x18\x88\x29\xe6\x8f\x1e\xc3\x36\x3b\xa4\x83\x9b\xec\x92\x5d\xa9\x1f\x5f\x36\xb5\x82\x28\x28\x78\xdc\xc7\xec\xf0\xe6\x2d\xd6\x6b\xdc\x0c\xdc\x4f\xd2\x13\x1a\x1b\x9e\xd5\x63\x0e\x1e\xe1\xa8\xf3\x6c\x46\x2c\x1b\xbb\x04\x3b\xd0\x1b\x75\xaf\x9e\x14\xce\x27\x1a\xe1\x4f\xec\x70\xf9\x17\x86\xd8\x41\x5a\xab\x99\xd4\x22\x2b\x2a\x51\xd6\xc8\x8a\xfa\x80\xc9\x68\x6a\x2d\x4d\x03\x3b\x17\xc6\x56\x33\x60\x95\x20\xc0\x04\xae\x33\x96\x62\x3c\xed\xf3\x46\x54\x58\xdd\x26\x51\x4f\xbe\x55\xe4\x25\xeb\x56\x99\x41\xf2\x18\x25\x51\xaf\xcd\x51\xea\x28\xde\xfe\x67\xf7\xe6\xb7\xdd\x5f\x4a\xa4\xe6\x3c\x5e\x5b\x7c\x86\x08\xf0\x4f\x29\x26\xa3\x35\x29\x1c\x65\xf7\xb2\x48\x45\x2e\x6a\x81\xbb\xf2\xf0\xf0\x4d\xf9\xf9\x5e\x94\x62\xd6\xdd\xfd\x20\x87\x7d\x91\x5e\xae\xd8\x5d\x35\x67\xf4\x71\x27\xb2\x22\x14\xdb\xc4\xdb\xf7\x00\x00\x00\xff\xff\xcb\xaa\xba\x6a\xc4\x01\x00\x00"

func db20180521070603_get_detail_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180521070603_get_detail_permSql,
		"db/20180521070603_get_detail_perm.sql",
	)
}

func db20180521070603_get_detail_permSql() (*asset, error) {
	bytes, err := db20180521070603_get_detail_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180521070603_get_detail_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180526072954_domain_owner_roleSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x4d\x4b\xf4\x30\x14\x85\xf7\xfd\x15\x87\xd9\x64\xca\x9b\x81\xe9\xbb\x93\xe2\x62\xa0\x11\x0b\xb5\xc5\x7e\xe8\x52\x6a\x73\x71\x2e\xb6\x69\x48\x2a\xf5\xe7\x4b\xea\x07\xb8\x11\xc1\xe5\x49\xee\x39\x3c\x3c\xd1\xe1\x80\x7f\x13\x3f\xb9\x7e\x21\x74\x36\xc4\xe6\xb6\x00\x1b\x78\x1a\x16\x9e\x0d\x44\x67\x05\xd8\x83\x5e\x69\x78\x59\x48\x63\x3d\x93\xc1\x72\x66\x8f\xf7\x5e\x38\x62\x8f\xde\xda\x91\x49\x47\x79\xd9\xa8\xba\x45\x5e\xb6\x15\xdc\x3c\x92\xc7\x9e\xb5\x34\xfd\x44\x12\x9a\xfc\xe0\xd8\x86\x8a\x84\x9e\xa7\x9e\xcd\x03\xeb\x18\x77\xa7\xa2\x53\x0d\xf6\x17\x52\x54\xab\x21\x27\xa4\xc8\xb6\x5f\x6c\x71\xdb\x11\x32\x89\xd3\x3f\xad\x27\xc7\x1f\xe7\xff\xc7\x69\xf4\x4d\x47\x36\xaf\xe6\x53\xc8\x97\x8d\xf0\xf8\x2b\x1f\x6e\x1e\x47\xd2\x78\xec\x87\xe7\x28\x53\x85\x6a\x15\xae\xea\xea\xe6\x83\xfa\xfe\x5a\xd5\x0a\x81\xfb\x72\xb7\x41\xec\x70\x2a\x33\xb0\x46\x5e\x06\x0f\xc9\x31\x4e\xdf\x02\x00\x00\xff\xff\x9d\x7b\x8c\xc4\x9c\x01\x00\x00"

func db20180526072954_domain_owner_roleSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180526072954_domain_owner_roleSql,
		"db/20180526072954_domain_owner_role.sql",
	)
}

func db20180526072954_domain_owner_roleSql() (*asset, error) {
	bytes, err := db20180526072954_domain_owner_roleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180526072954_domain_owner_role.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180526073308_domain_owner_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\x4d\x6b\xdc\x30\x10\x86\xef\xfb\x2b\x86\x5c\x94\xa5\x0e\x24\xc7\x10\x7a\x08\xac\x4b\x17\xb6\x0e\xdd\x8f\xf6\x28\xc6\xd6\xd4\x1e\x2a\x4b\x46\x92\xe3\xf6\xdf\x17\x79\x77\x4b\x3f\x20\x2c\xac\x74\xb4\x90\x1f\x3d\x7a\x91\x46\xb3\xb8\xbb\x83\x77\x3d\xb7\x0e\x03\xc1\x61\x88\x9f\xbb\xcf\x1b\x60\x03\x9e\x9a\xc0\xd6\x80\x38\x0c\x02\xd8\x03\xfd\xa0\x66\x0c\xa4\x60\xea\xc8\x40\xe8\xd8\xc3\xf1\xbf\x38\x89\x3d\xe0\x30\x68\x26\xb5\x58\x57\xbb\x72\xbb\x87\x75\xb5\x7f\x01\x67\x35\xc9\x81\x5c\xcf\xde\xc7\x69\xb7\xf3\x00\xab\x02\xe2\x60\x01\xbe\xb1\x03\x2d\xe1\xcb\xf3\xe6\x50\xee\xe0\xf6\xb1\x10\xa3\x91\x8e\x7a\xfb\x8a\xb5\x26\x51\x88\x56\xdb\x1a\xb5\x58\x3e\x5d\x83\x7d\xb8\x7f\x83\x7b\x9d\x2f\x08\x54\x4a\x06\x2b\xa7\x8e\x03\x69\xac\x49\xcb\xd1\x93\x13\x05\x24\x73\x07\xe1\x29\x48\x45\xdf\x70\xd4\x41\xb6\x18\x68\xc2\x9f\xc9\x16\x88\x7b\x68\x67\x7e\x40\xce\x21\x9f\x0b\xfe\x8f\xb8\xb2\x3d\xb2\xc9\xa6\x9e\x18\x1f\xe5\x9b\x0e\x4d\x4b\x73\x28\xd2\x07\x0c\xa3\x4f\x6b\x9f\x91\x1f\xf5\x7b\x34\x23\x6a\x79\x5a\xa5\x41\xdf\xa5\xd5\xcf\xc8\xff\x23\xfd\xc6\x11\x06\x7e\x25\x9f\x23\xa2\x9c\xf7\x76\xce\x88\x14\x67\x22\x67\x2e\x6b\x31\x9d\xf9\x60\x6a\xf6\x21\xad\x79\x7a\xec\xe3\x39\xe9\xf4\xc5\x31\x3d\x36\xca\x72\x3f\x90\xf3\xd6\x60\xa0\x0c\xce\xd9\xe8\xe7\xe7\x34\xdb\x81\xce\xf1\x76\xe6\xbb\x82\x17\x55\xa8\xbf\xfa\xb7\x95\x9d\xcc\xb9\x83\xfb\xdd\xbe\xc5\xc1\x8b\x1a\x38\x67\xb5\x26\x05\x35\x36\xdf\x17\xab\x72\x53\xee\x4b\xf8\xb0\x7d\xf9\xf4\x9f\xfb\xd7\x8f\xe5\xb6\x3c\x1a\xbf\xbf\x39\x9a\xdc\xc0\x73\xb5\x82\xd3\x9e\x60\x5d\xc5\x68\x1e\xee\x97\x4f\xbf\x02\x00\x00\xff\xff\x48\x20\x59\x0d\x5e\x0a\x00\x00"

func db20180526073308_domain_owner_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180526073308_domain_owner_permSql,
		"db/20180526073308_domain_owner_perm.sql",
	)
}

func db20180526073308_domain_owner_permSql() (*asset, error) {
	bytes, err := db20180526073308_domain_owner_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180526073308_domain_owner_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180526095729_adddefaultsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xc1\x6e\xf2\x30\x10\x84\xef\x79\x8a\xbd\x71\xf8\x85\xf4\xdf\x39\xa5\x0a\x3d\x45\xd0\xd2\xe4\x1c\x6d\xe2\x15\xac\x9a\x38\x16\x36\xd0\xbe\x7d\x65\xb5\x84\xa0\x52\xb2\xd8\xc7\x44\xe3\xcf\xb3\x23\xef\x24\xf3\x39\xfc\xeb\x78\xbb\x47\x47\x50\x1a\xff\xf9\xf6\x9a\x03\x6b\xb0\xd4\x38\xee\x35\xcc\x4a\x33\x03\xb6\x40\x1f\xd4\x1c\x1c\x29\x38\xed\x48\x83\xdb\xb1\x85\xef\x73\x5e\xc4\x16\xd0\x98\x96\x49\x25\x69\x5e\x2c\x37\x50\xa4\x4f\xf9\x12\x54\xdf\x21\x6b\x0b\x69\x96\x41\xc7\xba\x72\xbd\xc3\xb6\xaa\x0f\x6a\x4b\x0e\x58\x3b\xc8\x96\xcf\x69\x99\x17\xf0\x1f\x56\xeb\x02\x56\x65\x9e\x2f\xee\x02\x14\x72\xfb\x39\x05\xb8\x4b\x38\x51\x5d\x69\x74\x7c\xa4\xaa\x31\x4d\x90\x09\x8f\xa8\x51\x6b\xda\x47\x21\x8e\x68\x5d\x30\x00\x8d\x89\x1d\xc3\x23\x22\xc7\xf0\x88\xa8\x31\x7c\x0e\x31\x97\xc7\xdc\x3b\xc4\xd7\xc5\xbf\x82\x70\xc4\x4f\x7c\x61\x80\xab\x57\x10\x8e\x88\x1c\x63\xf4\x0a\xc2\x73\x88\xb9\x3c\xe4\x2c\xaa\x23\x6a\x87\x5b\xfa\xbb\x46\xc6\xd5\x98\xf5\x27\x7d\x2e\xc7\xa1\x19\xfd\x4f\x51\x37\xee\xfb\xb6\x25\x05\x35\x36\xef\x37\x0d\x65\x9b\xf5\xcb\xaf\x82\xbc\xed\x7d\x90\x8e\xab\x70\x42\x7a\xdd\x79\x02\xf1\xa5\x16\x04\xe2\x73\x01\x4c\x48\xaf\x1b\x4b\x20\x16\x9b\x18\xb7\x90\xc0\xaf\x0c\x28\x63\x5d\x96\xef\x91\x54\x25\xe2\xf3\x42\x3d\x92\xaa\x44\x2c\x36\x31\xde\x6a\x51\xaa\x12\xe0\x7d\xd5\xb0\x93\x8b\x24\xf9\x0a\x00\x00\xff\xff\x38\xd2\xdd\x9c\x99\x08\x00\x00"

func db20180526095729_adddefaultsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180526095729_adddefaultsSql,
		"db/20180526095729_adddefaults.sql",
	)
}

func db20180526095729_adddefaultsSql() (*asset, error) {
	bytes, err := db20180526095729_adddefaultsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180526095729_adddefaults.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20180325060449_domains.sql":                   db20180325060449_domainsSql,
	"db/20180325072416_seed.sql":                      db20180325072416_seedSql,
	"db/20180407053606_fix.sql":                       db20180407053606_fixSql,
	"db/20180519133040_remove_create_domain_perm.sql": db20180519133040_remove_create_domain_permSql,
	"db/20180521070603_get_detail_perm.sql":           db20180521070603_get_detail_permSql,
	"db/20180526072954_domain_owner_role.sql":         db20180526072954_domain_owner_roleSql,
	"db/20180526073308_domain_owner_perm.sql":         db20180526073308_domain_owner_permSql,
	"db/20180526095729_adddefaults.sql":               db20180526095729_adddefaultsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20180325060449_domains.sql":                   &bintree{db20180325060449_domainsSql, map[string]*bintree{}},
		"20180325072416_seed.sql":                      &bintree{db20180325072416_seedSql, map[string]*bintree{}},
		"20180407053606_fix.sql":                       &bintree{db20180407053606_fixSql, map[string]*bintree{}},
		"20180519133040_remove_create_domain_perm.sql": &bintree{db20180519133040_remove_create_domain_permSql, map[string]*bintree{}},
		"20180521070603_get_detail_perm.sql":           &bintree{db20180521070603_get_detail_permSql, map[string]*bintree{}},
		"20180526072954_domain_owner_role.sql":         &bintree{db20180526072954_domain_owner_roleSql, map[string]*bintree{}},
		"20180526073308_domain_owner_perm.sql":         &bintree{db20180526073308_domain_owner_permSql, map[string]*bintree{}},
		"20180526095729_adddefaults.sql":               &bintree{db20180526095729_adddefaultsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
