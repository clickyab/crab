// Code generated by go-bindata.
// sources:
// db/20180325060449_domains.sql
// db/20180325072416_seed.sql
// db/20180407053606_fix.sql
// db/createdomainperm_seed.sql
// db/domain_unique_fix.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20180325060449_domainsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x51\x6f\xd3\x30\x10\x7e\xf7\xaf\xb8\xb7\x26\x22\x93\x00\x81\x84\x34\xed\xc1\x4b\xae\x9b\x45\xea\x16\xc7\x41\xdb\x53\xec\xd6\x1e\xb3\xd6\xa6\x51\xec\x68\xfc\x7c\x94\x36\xcd\x56\x28\x03\x26\xf1\x66\xdf\x7d\xdf\x7d\x77\xdf\x49\x47\xce\xce\xe0\xcd\xc6\x7d\x6b\x75\xb0\x50\x36\xfd\xb7\xf8\x92\x83\xab\xc1\xdb\x55\x70\xdb\x1a\x26\x65\x33\x01\xe7\xc1\x7e\xb7\xab\x2e\x58\x03\x8f\xf7\xb6\x86\x70\xef\x3c\xec\x79\x3d\xc8\x79\xd0\x4d\xb3\x76\xd6\x90\x54\x20\x95\x08\x92\x5e\xe6\x08\x6c\x0a\x7c\x2e\x01\x6f\x58\x21\x0b\x50\x66\xbb\xd1\xae\xf6\x0a\x22\xa2\x9c\x51\xc0\xb8\x8c\xde\xbd\x8d\xa1\xe4\x05\xbb\xe2\x98\xed\xc0\xbc\xcc\x73\xa0\xa5\x9c\x57\x8c\xa7\x02\x67\xc8\x65\x42\x54\xad\x37\x56\xc1\x57\x2a\xd2\x6b\x2a\xa2\xf7\x1f\x3f\xc4\x23\x38\x21\x4a\x87\xd0\xba\x65\x17\xac\x57\x20\xf1\x66\x28\x92\xe1\x94\x96\xf9\x08\x32\xd6\xaf\x5a\xd7\xf4\x0d\xff\x5c\xe9\x04\xda\x07\x1d\x3a\xaf\x00\x79\x39\x8b\x26\xc6\x79\xbd\x5c\xdb\x49\x02\x13\x5b\xef\x5e\x4f\xfa\x23\xf3\x90\x4a\x88\x5a\xb5\x56\x07\x6b\x2a\x1d\x14\x64\x54\xa2\x64\x33\xfc\x95\x90\x96\x42\x20\x97\x55\x9f\x2d\x24\x9d\x2d\x12\xa2\xba\xc6\xbc\x8e\xb9\x10\x6c\x46\xc5\x2d\x7c\xc6\x5b\x88\x7a\x7b\xe3\x98\x20\xbf\x62\x1c\xe1\x02\x58\x5d\x6f\xb3\x4b\x32\xd2\xaf\xa9\xa0\xa9\x44\x01\x05\x4a\xb8\x80\x2e\xdc\x7d\x3a\x27\x2f\xee\xae\xf3\xb6\xf5\xd5\xf3\x0d\xee\xdf\xd5\x8b\x8b\xec\x07\xf2\xb6\xfd\x23\xe8\x3f\xba\xfd\x5b\x4f\x77\xb9\x63\xd7\x9e\x46\x4a\x60\x6c\xfc\xdf\x7d\xa4\x79\x1f\xda\xdb\x78\xe4\x1b\x01\xa0\x59\x06\xe9\x9c\x17\x52\x50\xc6\x25\x0c\x8a\x3b\xad\x01\x54\x39\x53\xdd\x3d\x90\xe9\x5c\x20\xbb\xe2\xfb\xce\xc6\xc6\x62\x10\x38\x45\x81\x3c\xc5\x62\x20\x7b\x88\x9c\x89\x5f\x2f\xbb\x87\x9e\x10\x1d\x0c\x38\x92\xdc\x81\x0f\x82\x47\xd7\x23\xdb\x3e\xd6\x87\xfb\x31\x1e\x8f\x3e\xf8\x57\xe7\xa3\xdd\xae\xd7\xd6\xc0\x52\xaf\x1e\x48\x26\xe6\x8b\x53\x63\x9c\x3f\xcf\x8c\x31\xf2\x23\x00\x00\xff\xff\xca\x66\xf5\xf0\xc4\x04\x00\x00"

func db20180325060449_domainsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325060449_domainsSql,
		"db/20180325060449_domains.sql",
	)
}

func db20180325060449_domainsSql() (*asset, error) {
	bytes, err := db20180325060449_domainsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325060449_domains.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180325072416_seedSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xcd\x4e\xc3\x30\x10\x84\xef\x7d\x8a\xb9\xb9\x15\xae\xd5\xe6\xc2\x81\x13\x52\x8d\x88\x14\x52\x91\x1f\x38\x3b\xb6\x9b\xae\xea\x38\x51\xec\xaa\xf0\xf6\xc8\x82\x56\xe2\x86\x38\xce\x6a\x66\x67\xf7\x5b\xac\xd7\xb8\x1b\xa8\x9f\x55\xb4\x68\xa7\x24\xeb\xd7\x02\xe4\x11\xac\x8e\x34\x7a\xb0\x76\x62\xa0\x00\xfb\x61\xf5\x39\x5a\x83\xcb\xd1\x7a\xc4\x23\x05\x7c\xe7\x92\x89\x02\xd4\x34\x39\xb2\x66\x91\x97\xb5\xac\x1a\xe4\x65\xb3\x87\x19\x07\x45\x3e\x60\x49\x86\x7b\x35\x58\x6e\x6c\xd0\x33\x4d\x29\xb3\xc2\xdb\x63\xd1\xca\x1a\xcb\x2d\x67\x21\xaa\x9e\x7c\x2f\xf4\xac\x3a\xa1\x1d\xe9\xd3\xa7\xea\x84\xb2\x8c\xb3\xab\xc2\x8f\x87\xad\x1e\xfe\xd1\x91\x71\xb6\xcd\xee\xc5\x46\x6c\xc4\x96\x71\xe6\x46\xad\x1c\x42\x3c\x1f\x0e\x69\xdf\x2f\x0a\xbb\xf1\xe2\xaf\x1c\x6e\x10\xd2\xf0\x4f\x18\xe6\xd1\x39\x6b\xd0\x29\x7d\x5a\xec\x64\x21\x1b\x89\xa7\x6a\xff\x72\x3b\xf3\xfd\x59\x56\x12\x64\x90\x97\xe9\xf3\x2c\xb5\x7f\x05\x00\x00\xff\xff\x0c\x78\xb4\x17\x85\x01\x00\x00"

func db20180325072416_seedSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325072416_seedSql,
		"db/20180325072416_seed.sql",
	)
}

func db20180325072416_seedSql() (*asset, error) {
	bytes, err := db20180325072416_seedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325072416_seed.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180407053606_fixSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xd0\xbd\x4e\xc3\x30\x14\x05\xe0\xdd\x4f\x71\xb6\x0e\xa8\x4f\xc0\x64\x1a\x57\xaa\xe4\x24\x90\x5e\x0f\x4c\x91\x89\xaf\xe8\x15\xa9\x63\xc5\x8e\xca\xe3\x23\x0b\x81\xc4\x56\x31\xde\x9f\x73\x86\x4f\xed\xf7\x78\xb8\xca\xfb\xea\x0b\xc3\xa5\x3a\x9e\x5f\x2c\x24\x22\xf3\x54\x64\x89\xd8\xb9\xb4\x83\x64\xf0\x27\x4f\x5b\xe1\x80\xdb\x85\x23\xca\x45\x32\xbe\x73\xf5\x49\x32\x7c\x4a\xb3\x70\x50\xda\x92\x19\x40\xfa\xc9\x1a\x6c\x99\xd7\x3c\x86\xe5\xea\x25\x66\xb4\x7d\x73\x3a\xbe\xe2\xd0\x5b\xd7\x76\x98\x56\xf6\x85\xc3\xe8\x0b\x1a\x4d\x86\x4e\xad\x41\xd7\x13\x3a\x67\x2d\x1a\x73\xd4\xce\x12\x0e\x6e\x18\x4c\x47\x63\xbd\x9e\x49\xb7\xcf\x8f\x77\xf7\x6f\x29\xfc\xab\xff\x8f\x48\xb3\xdc\xe2\x8f\xc9\x2f\x48\x5d\xde\x45\xb2\x2e\xf3\xcc\x01\x6f\x7e\xfa\x50\x4a\x7d\x05\x00\x00\xff\xff\xa7\x1a\x37\xb3\x6b\x01\x00\x00"

func db20180407053606_fixSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180407053606_fixSql,
		"db/20180407053606_fix.sql",
	)
}

func db20180407053606_fixSql() (*asset, error) {
	bytes, err := db20180407053606_fixSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180407053606_fix.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbCreatedomainperm_seedSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x4d\x4b\xf4\x30\x14\x85\xf7\xfd\x15\x87\x6e\xa6\xe5\xed\xac\x5e\x77\xb3\x12\x26\x62\xa1\x76\xb0\x1f\xba\x2c\x99\xe6\x32\x73\x31\x4d\x42\x12\xa9\x3f\x5f\x32\xa2\x20\x0a\x0a\x2e\xef\xe1\xdc\xc3\xc3\x93\x6d\xb7\xf8\xb7\xf0\xc9\xcb\x48\x18\x5d\x3a\xfb\xfb\x06\x6c\x10\x68\x8e\x6c\x0d\x36\xa3\xdb\x80\x03\xe8\x85\xe6\xe7\x48\x0a\xeb\x99\x0c\xe2\x99\x03\xde\xfe\x52\x89\x03\xa4\x73\x9a\x49\x65\x59\xdd\xf6\xa2\x1b\x50\xb7\xc3\x01\xde\x6a\x9a\x1c\xf9\x85\x43\x48\xbd\xe2\x12\xb0\xaa\x90\xc2\x0a\x61\xb6\x8e\x4a\x3c\x5c\x37\xa3\xe8\x51\xfc\xaf\xf2\xd9\x93\x8c\x34\x19\x5a\x27\x65\x17\xc9\x26\xaf\xf2\x93\xb6\x47\xa9\xf3\x72\xf7\x97\xed\xab\x9f\xb6\x3f\xa9\xd8\xdb\xd5\xbc\xcb\xf8\x30\x91\xc2\x5f\xb9\xf0\x56\x6b\x52\x38\xca\xf9\x29\xdb\x8b\x46\x0c\x02\x37\xdd\xe1\xee\x0b\xf2\xe3\xad\xe8\xc4\x05\x17\x75\x8b\xe2\x1b\xc0\x72\xf7\x1a\x00\x00\xff\xff\x4a\xee\x52\xab\xa2\x01\x00\x00"

func dbCreatedomainperm_seedSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbCreatedomainperm_seedSql,
		"db/createdomainperm_seed.sql",
	)
}

func dbCreatedomainperm_seedSql() (*asset, error) {
	bytes, err := dbCreatedomainperm_seedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/createdomainperm_seed.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbDomain_unique_fixSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xb1\x0a\xc2\x30\x10\xc6\xf1\x3d\x4f\xf1\x6d\x55\xa4\x4f\xe0\x24\x36\x43\x41\x2a\x55\x03\x6e\x25\x36\x87\x3d\x6c\x93\xd0\xa4\xb4\x8f\x2f\x41\x2a\xb8\x39\xde\x9f\xfb\xe0\x27\xf2\x1c\xbb\x81\x9f\xa3\x8e\x04\xe5\xd3\x79\xad\x4f\x60\x8b\x40\x6d\x64\x67\x91\x29\x9f\x81\x03\x68\xa1\x76\x8a\x64\x30\x77\x64\x11\x3b\x0e\xf8\xec\xd2\x13\x07\x68\xef\x7b\x26\x23\x8e\x17\x79\xb8\x49\xa8\xaa\xac\x95\x44\x59\x15\xf2\x0e\xe3\x06\xcd\x36\x34\x56\x0f\xd4\x4c\x6c\x0d\x2d\x38\x57\x6b\xc6\x26\xf5\xed\xfe\xc7\x52\xb8\xd9\xae\x9a\x2f\x25\xc5\xbf\x30\xa3\xeb\x7b\x32\x78\xe8\xf6\x25\xc4\x3b\x00\x00\xff\xff\x85\xdd\xa5\xc2\xe4\x00\x00\x00"

func dbDomain_unique_fixSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbDomain_unique_fixSql,
		"db/domain_unique_fix.sql",
	)
}

func dbDomain_unique_fixSql() (*asset, error) {
	bytes, err := dbDomain_unique_fixSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/domain_unique_fix.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20180325060449_domains.sql": db20180325060449_domainsSql,
	"db/20180325072416_seed.sql":    db20180325072416_seedSql,
	"db/20180407053606_fix.sql":     db20180407053606_fixSql,
	"db/createdomainperm_seed.sql":  dbCreatedomainperm_seedSql,
	"db/domain_unique_fix.sql":      dbDomain_unique_fixSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20180325060449_domains.sql": &bintree{db20180325060449_domainsSql, map[string]*bintree{}},
		"20180325072416_seed.sql":    &bintree{db20180325072416_seedSql, map[string]*bintree{}},
		"20180407053606_fix.sql":     &bintree{db20180407053606_fixSql, map[string]*bintree{}},
		"createdomainperm_seed.sql":  &bintree{dbCreatedomainperm_seedSql, map[string]*bintree{}},
		"domain_unique_fix.sql":      &bintree{dbDomain_unique_fixSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
