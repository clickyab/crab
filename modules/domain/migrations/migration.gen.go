// Code generated by go-bindata.
// sources:
// db/20170802141212_domain.sql
// db/20170912084801_domain.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20170802141212_domainSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4f\x6f\xdb\x30\x0c\xc5\xcf\xd6\xa7\xe0\xcd\x36\x96\x02\xc3\xb0\x9e\x72\xda\xd0\xdd\x0a\xec\x6f\xcf\x06\x2b\x31\x0d\x11\x99\xf2\x28\xa9\x6d\xbe\xfd\x20\xd7\xee\xd4\x2e\x0b\xb6\x8b\x00\x91\xd4\x4f\xef\x3d\x80\xe6\xe2\x02\xde\x8c\x7c\xa7\x98\x08\x6e\xa6\x72\xfd\xfe\xf5\x1a\x58\x20\x92\x4d\x1c\x04\xda\x9b\xa9\x05\x8e\x40\x8f\x64\x73\x22\x07\x0f\x7b\x12\x48\x7b\x8e\xf0\xf4\xae\x0c\x71\x04\x9c\x26\xcf\xe4\x8c\x55\x2a\xac\x84\xb7\x9e\xc0\x85\x11\x59\xa2\xe9\x4c\xc3\x0e\x58\x12\x60\x4e\x61\x60\xb1\x4a\x23\x49\x32\x4d\x33\x29\x8f\xa8\x47\x38\xd0\x71\x63\x1a\xc1\x91\xe0\x1e\xd5\xee\x51\xbb\xf7\x6f\x7b\x90\x90\x40\xb2\xf7\x1b\xd3\x38\x8a\x56\x79\x9a\x3f\x5c\x47\xde\x5d\x5e\xf6\x6b\x1f\x6d\xe2\x7b\x02\x92\x3c\x76\xed\x91\x62\xbb\x81\x56\x42\xdb\x83\xa3\x1d\x66\x9f\x60\x2e\xd6\xc4\x27\xad\x6e\xc0\x04\x89\x47\x8a\x09\xc7\xa9\xee\xe7\xc9\x9d\xed\xdb\x20\x31\x29\x16\x5f\x8b\xd3\xa1\x18\x18\x32\x8b\xa3\x47\xd3\x64\xe1\x9f\x99\xa0\x2b\xc5\xde\xf4\x66\x6b\x4e\xc5\x33\xe4\x48\x5a\x22\x5a\xae\x4b\x52\xb5\x8e\x48\x7a\xa2\x5c\x45\x07\xdd\xf3\xe3\x0d\x2c\xe3\xfd\x29\x85\xf3\x67\xc3\xaa\x96\xdd\xb0\x3b\x98\x66\x17\x94\xf8\x4e\x5e\x81\x7a\x50\xda\x91\x92\x58\x8a\xab\x3f\xe8\xce\x72\xcb\x71\x9a\xba\x6a\xaa\x99\xf3\xf4\x4c\x7c\x91\xcd\x1c\xde\xdf\xb1\x41\xea\xde\x6f\x72\x21\xa0\x4f\xa4\x4b\xb8\x1a\x3c\x45\x40\xe7\xa0\x12\x3b\x17\x5f\xd9\xff\x4f\xf7\x5b\xf3\x62\x69\xae\xc2\x83\xac\x6b\xf3\xbc\x33\xa5\xf8\x4f\x5b\xa3\xc1\x7b\x72\x70\x8b\xf6\x60\xae\xbe\x7d\xfe\x02\x3f\x3e\x7c\xbc\xfe\x54\x1b\xdc\xfe\x59\x8f\x5b\x63\x7e\x05\x00\x00\xff\xff\x4e\xc0\x81\x68\xb9\x03\x00\x00"

func db20170802141212_domainSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170802141212_domainSql,
		"db/20170802141212_domain.sql",
	)
}

func db20170802141212_domainSql() (*asset, error) {
	bytes, err := db20170802141212_domainSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170802141212_domain.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20170912084801_domainSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xcf\xcf\x4e\x03\x21\x10\x06\xf0\xfb\x3e\xc5\x77\x43\xa3\x3d\x78\xee\x89\x86\xf5\x44\x8a\x56\x78\x00\x84\xd1\x4e\x64\x81\x14\xd6\xea\xdb\x9b\xf5\x5f\xd2\xc4\x83\x49\x8f\xf3\xcd\x37\xc9\x6f\x86\xd5\x0a\x57\x13\x3f\x1f\x7c\x27\xb8\xba\x8c\x0f\xf7\x1a\x9c\xd1\x28\x74\x2e\x19\xc2\x55\x01\x6e\xa0\x37\x0a\x73\xa7\x88\xe3\x9e\x32\xfa\x9e\x1b\xbe\xee\x96\x12\x37\xf8\x5a\x13\x53\x1c\xa4\xb6\xe3\x0e\x56\x6e\xf4\x88\x58\x26\xcf\xb9\x41\xed\xcc\x1d\x7c\xe8\xfc\x4a\xeb\x3f\x0b\x52\xa9\xef\x3d\x36\xc6\x68\xa8\xf1\x56\x3a\x6d\x71\x83\xad\xb1\xd8\x3a\xad\xb1\x1e\x86\x13\xac\x2a\xc7\xfc\xc3\xfd\xb5\x2e\xe1\xbf\xb4\x87\x92\x12\x45\x3c\xfa\xf0\x72\xb6\x98\xf2\x3c\x5d\x88\x77\x6a\xe2\x1a\x22\x17\x71\x89\x48\x4f\x7e\x4e\x1d\x9f\xe1\xe9\x0b\x1f\x01\x00\x00\xff\xff\xb0\xed\xcc\x18\x71\x01\x00\x00"

func db20170912084801_domainSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170912084801_domainSql,
		"db/20170912084801_domain.sql",
	)
}

func db20170912084801_domainSql() (*asset, error) {
	bytes, err := db20170912084801_domainSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170912084801_domain.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20170802141212_domain.sql": db20170802141212_domainSql,
	"db/20170912084801_domain.sql": db20170912084801_domainSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20170802141212_domain.sql": &bintree{db20170802141212_domainSql, map[string]*bintree{}},
		"20170912084801_domain.sql": &bintree{db20170912084801_domainSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
