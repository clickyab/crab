// Code generated by go-bindata.
// sources:
// db/20170802141212_domain.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20170802141212_domainSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x41\x6f\xdb\x30\x0c\x85\xcf\xd6\xaf\xe0\xcd\x36\x96\x02\xc3\xb0\x9e\x72\xea\xd6\x1c\x06\xb4\x5b\x97\x26\x67\x43\x95\x98\x86\x88\x4c\x79\x94\xd4\x36\xff\x7e\x90\x6b\x67\x6e\xe7\x0d\x5b\x2f\x02\xf4\x44\x7e\x7a\x7c\x00\xd5\xd9\x19\xbc\x6b\xe9\x5e\x74\x44\xd8\x76\xf9\x7a\xfb\xfd\x0a\x88\x21\xa0\x89\xe4\x19\xca\x6d\x57\x02\x05\xc0\x27\x34\x29\xa2\x85\xc7\x3d\x32\xc4\x3d\x05\x78\xee\xcb\x45\x14\x40\x77\x9d\x23\xb4\xca\x08\x66\x56\xd4\x77\x0e\xc1\xfa\x56\x13\x07\x55\xa9\x82\x2c\x10\x47\xd0\x29\xfa\x86\xd8\x08\xb6\xc8\x51\x15\x45\x27\xd4\x6a\x39\xc2\x01\x8f\x0b\x55\xb0\x6e\x11\x1e\xb4\x98\xbd\x96\xea\xe3\xfb\x1a\xd8\x47\xe0\xe4\xdc\x42\x15\x16\x83\x11\xea\xfa\x0f\xc7\x92\x0f\xe7\xe7\xf5\xf8\xae\x4d\xa4\x07\x04\xe4\xd4\x56\xe5\x11\x43\xb9\x80\x92\x7d\x59\x83\xc5\x9d\x4e\x2e\x42\x2f\x4e\x89\xcf\x5e\x6d\xa3\x23\x44\x6a\x31\x44\xdd\x76\xa7\xea\xcf\xdb\xf5\x7a\xf5\x75\xd3\x6c\xbe\x5c\xaf\x6e\x37\x17\xd7\x37\xd3\xce\xd4\xd9\x37\x76\x1a\xcf\x21\x8a\xce\x59\x0c\xe9\x34\x79\xe8\x26\x11\x5b\x7c\x52\x45\x62\xfa\x91\x10\xaa\x2c\xd6\xaa\x56\x4b\x35\x17\x69\x93\x02\x4a\x8e\x75\xb8\x0e\xe9\x4e\x1d\x06\x94\x19\x79\x12\x37\x54\xa7\xe6\x05\x0c\xe5\xf5\x9c\xc3\xfe\xb3\x66\x74\x4b\xb6\xd9\x1d\x54\xb1\xf3\x82\x74\xcf\xaf\x40\x35\x08\xee\x50\x90\x0d\x86\x71\x3e\xa8\xfe\xca\xcd\xc7\x3c\x75\xf4\x34\x65\xf6\xd5\x3d\xf1\x45\x36\x7d\x78\x7f\xc6\x7a\x9e\xbe\xfd\x22\x67\x82\x76\x11\x65\x08\x57\xbc\xc3\x00\xda\x5a\x98\x98\xed\xc5\x57\xe3\xff\xe7\xf4\x4b\xf5\x62\xd1\x2e\xfd\x23\x8f\xab\x76\xda\xb3\x2c\xfe\xd3\xa6\x89\x77\x0e\x2d\xdc\x69\x73\x50\x97\xeb\x6f\x37\xb0\xb9\xf8\x74\xb5\x9a\x0e\xb8\xfc\x5d\x0f\x4b\xa5\x7e\x06\x00\x00\xff\xff\x57\x88\x3d\x27\xed\x03\x00\x00"

func db20170802141212_domainSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170802141212_domainSql,
		"db/20170802141212_domain.sql",
	)
}

func db20170802141212_domainSql() (*asset, error) {
	bytes, err := db20170802141212_domainSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170802141212_domain.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20170802141212_domain.sql": db20170802141212_domainSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20170802141212_domain.sql": &bintree{db20170802141212_domainSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
