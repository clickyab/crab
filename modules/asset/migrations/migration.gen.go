// Code generated by go-bindata.
// sources:
// db/20180325064455_assets.sql
// db/20180325064824_seed.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20180325064455_assetsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x5d\x6f\xda\x30\x14\x7d\xf7\xaf\x38\x6f\x01\x8d\x4a\x54\xfb\xd0\x26\xd4\x87\x94\xb8\x6b\x34\x08\x34\x1f\x53\xfb\x44\x4c\x62\x8a\xd5\xe0\x44\xb6\x23\xfa\xf3\x27\x53\xa0\x0d\xd0\x09\xb1\x6a\x2f\xed\x53\x92\x7b\xcf\xb1\x72\xcf\xb1\xaf\x2f\x39\x3b\xc3\xa7\x85\xb8\x57\xcc\x70\x24\x95\xfd\x8c\x6e\x06\x10\x12\x9a\x67\x46\x94\x12\x4e\x52\x39\x10\x1a\xfc\x91\x67\xb5\xe1\x39\x96\x73\x2e\x61\xe6\x42\xe3\x89\x67\x41\x42\x83\x55\x55\x21\x78\x4e\xfa\x21\x75\x63\x8a\xd8\xbd\x1c\x50\xf8\x57\x08\x46\x31\xe8\xad\x1f\xc5\x11\xd2\xa9\x2a\x97\x9a\x2b\x9d\xa2\x45\x52\xc9\x16\x3c\xc5\x6f\x37\xec\x5f\xbb\x61\xeb\x5b\xb7\xbd\x82\x06\xc9\x60\xd0\x21\x69\xce\x0b\x6e\x78\x3e\x61\x26\x85\xe7\xc6\x34\xf6\x87\x74\x95\x83\x47\xaf\xdc\x64\xb0\x05\x66\x8a\xb3\x7d\xe0\x7a\xa1\x2d\xb8\x9f\x84\x21\x0d\xe2\x89\xcd\x46\xb1\x3b\x1c\x77\x48\x5a\x57\xf9\x69\xcc\x71\xe8\x0f\xdd\xf0\x0e\xbf\xe8\x1d\x5a\x4f\x65\xb4\xdb\x84\x06\x3f\xfd\x80\xe2\x02\xbe\x94\xa5\x77\x49\xb6\x0b\x5c\xbb\xa1\xdb\x8f\x69\x88\x88\xc6\xb8\x40\x6d\x66\xdf\x7b\xe4\xaf\x32\x65\xcc\xf0\xfb\x52\x09\xbe\x12\x0a\xd8\x91\xea\xfc\xeb\x4b\xa9\x80\x34\xe7\x3a\x53\xa2\xb2\x4e\x3c\xa3\x3e\x77\xbb\x7b\xb0\xe3\x34\x05\x0e\x57\x08\xec\xd6\x08\xfc\x43\x95\x42\x57\x87\xeb\xfb\xb2\xfb\xe3\x0f\x42\xe6\x29\x68\x90\x0c\x5b\x4e\xc6\x8b\xa2\x2e\x98\x72\x3a\x70\x84\xae\xec\x63\x5a\x9a\xb9\xb3\x43\xd1\x86\x99\x5a\x6f\x48\xb9\xd0\x6c\x5a\x70\x0b\xe6\x72\xf5\xd6\xde\x77\x7a\x93\x5a\xf1\x4f\xde\x56\xc0\xa9\x1b\x0b\xa3\x00\xc9\xd8\x12\x0e\xaf\xfb\x5f\x4c\x59\x30\x59\xcf\x58\x66\x6a\xb5\x3e\xa6\xfb\xbb\xef\xc7\xf9\xfb\xd4\xda\xc6\x93\xc0\xbf\x49\x28\xfc\xc0\xa3\xb7\x4d\xb1\x26\x53\xc5\x64\x3e\xa9\x85\xcc\xf9\x63\xba\x21\xc1\x8d\xfa\x6f\x6f\x52\xa9\x5f\xe9\x0c\x7b\x27\xe7\x9d\x58\xf3\xe6\x0a\x57\x05\x33\xb3\x52\x2d\x8e\x6c\xc0\x1f\x32\xbf\x2e\x33\x69\x8c\x18\x5e\xb9\x94\x9b\x21\x63\x3b\x61\xd8\xe0\x51\x33\x86\x2a\x8b\x82\xe7\x98\xb2\xec\x81\x78\xe1\x68\xbc\x36\x6f\xeb\x56\xef\x65\xd4\x9e\x92\x46\xa0\xd1\xdb\x1a\x19\x7b\x15\x35\x02\xcf\x37\x70\x23\xbc\x99\x5f\x7a\x84\xfc\x09\x00\x00\xff\xff\xc3\x5f\x8a\xd2\x39\x09\x00\x00"

func db20180325064455_assetsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325064455_assetsSql,
		"db/20180325064455_assets.sql",
	)
}

func db20180325064455_assetsSql() (*asset, error) {
	bytes, err := db20180325064455_assetsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325064455_assets.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180325064824_seedSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\x31\x0a\x02\x31\x14\x04\xd0\xfe\x9f\x62\xba\x2d\x64\x6f\x61\x69\x23\xb2\x07\x88\xc9\xe0\x7e\x8c\x49\xd8\xff\x25\x1e\x5f\x82\x28\xd8\x6d\x39\xc3\xcc\x93\x79\xc6\xe1\xa1\xb7\x2d\x38\xb1\xb4\x11\x2f\xe7\x13\xb4\xc0\x18\x5d\x6b\xc1\xb4\xb4\x09\x6a\xe0\x8b\xf1\xe9\x4c\xe8\x2b\x0b\x7c\x55\xc3\xe7\x37\x46\x6a\x08\xad\x65\x65\x12\xf9\x23\x8f\xb5\x97\x2f\xfa\x13\x47\xb9\xcb\xdc\x6a\xce\x4c\xb8\x86\x78\x17\x91\x77\x00\x00\x00\xff\xff\x45\xac\x97\x00\xac\x00\x00\x00"

func db20180325064824_seedSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325064824_seedSql,
		"db/20180325064824_seed.sql",
	)
}

func db20180325064824_seedSql() (*asset, error) {
	bytes, err := db20180325064824_seedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325064824_seed.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20180325064455_assets.sql": db20180325064455_assetsSql,
	"db/20180325064824_seed.sql":   db20180325064824_seedSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20180325064455_assets.sql": &bintree{db20180325064455_assetsSql, map[string]*bintree{}},
		"20180325064824_seed.sql":   &bintree{db20180325064824_seedSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
