// Code generated by go-bindata.
// sources:
// db/20170829095647_os.sql
// db/20170829112137_isp.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20170829095647_osSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\x3f\x4f\xf3\x30\x10\xc7\xf1\xdd\xaf\xe2\xb7\xb9\xd5\xd3\x4a\xcf\xc0\xd6\xc9\xa4\x96\xa8\xc8\x9f\x62\x12\xa4\x4e\x8d\x89\x4f\xd4\x22\xb1\xad\xd8\xa1\xf0\xee\x51\x40\x20\x3a\x20\x31\xde\xdd\xf7\x96\x0f\x5b\xaf\xf1\x6f\xb0\x4f\xa3\x4e\x84\x26\xcc\xe3\xfd\x5d\x0e\xeb\x10\xa9\x4b\xd6\x3b\xf0\x26\x70\xd8\x08\x7a\xa5\x6e\x4a\x64\x70\x3e\x91\x43\x3a\xd9\x88\xcf\xbf\x39\xb2\x11\x3a\x84\xde\x92\x61\x99\x92\xa2\x96\xa8\xc5\x75\x2e\xe1\x23\xc5\x05\x03\x5a\x6b\x5a\x58\x97\x20\x9a\xba\x3a\xee\xca\x4c\xc9\x42\x96\x35\xf6\x6a\x57\x08\x75\xc0\xad\x3c\xac\xe6\xcc\xe9\x81\x5a\x3c\x08\x95\xdd\x08\xb5\xb8\xfa\xbf\x44\x59\xd5\x28\x9b\x3c\xff\x38\xeb\x2e\xd9\x17\x6a\x21\xcb\xa6\x58\xf0\x37\x8a\x7c\xc5\x9d\xe7\x97\x55\x37\x92\x4e\x64\x8e\x3a\x21\xd9\x81\x62\xd2\x43\x80\xf3\x09\x6e\xea\xfb\x39\x98\x82\xf9\x3d\x60\xcb\x0d\xbb\x40\xd9\xfa\xb3\xfb\x62\xf9\x36\x99\x97\x7f\x52\x19\x7d\xdf\x93\xc1\xa3\xee\x9e\xd9\x56\x55\xfb\x1f\x2e\x1b\xc6\xde\x03\x00\x00\xff\xff\x40\xf1\xff\x29\x7e\x01\x00\x00"

func db20170829095647_osSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170829095647_osSql,
		"db/20170829095647_os.sql",
	)
}

func db20170829095647_osSql() (*asset, error) {
	bytes, err := db20170829095647_osSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170829095647_os.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20170829112137_ispSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\x31\x4f\xf3\x30\x10\xc6\xf1\xdd\x9f\xe2\xd9\xdc\xea\x6d\xa5\x77\x60\xeb\x64\x5a\x4b\x54\xa4\x49\x31\x09\x52\xa7\xc6\xc4\x27\x7a\x22\x71\xac\xd8\xa1\xf0\xed\x51\x40\x20\x3a\x20\x31\xde\xdd\xff\x96\x9f\x58\x2e\xf1\xaf\xe3\xa7\xc1\x26\x42\x15\xa6\xf1\xfe\x2e\x03\x7b\x44\x6a\x12\xf7\x1e\xb2\x0a\x12\x1c\x41\xaf\xd4\x8c\x89\x1c\xce\x27\xf2\x48\x27\x8e\xf8\xfc\x9b\x22\x8e\xb0\x21\xb4\x4c\x4e\xac\x8d\x56\xa5\x46\xa9\xae\x33\x0d\x8e\x21\xce\x04\x50\xb3\xab\xc1\x3e\x41\x55\x65\x71\xdc\xe6\x6b\xa3\x77\x3a\x2f\xb1\x37\xdb\x9d\x32\x07\xdc\xea\xc3\x62\xca\xbc\xed\xa8\xc6\x83\x32\xeb\x1b\x65\x66\x57\xff\xe7\xc8\x8b\x12\x79\x95\x65\x1f\x67\xdb\x24\x7e\xa1\x1a\x3a\xaf\x76\x33\xf9\x46\x51\x2e\xa4\xef\xe5\x65\xd5\x0c\x64\x13\xb9\xa3\x4d\x48\xdc\x51\x4c\xb6\x0b\xf0\x7d\x82\x1f\xdb\x76\x0a\xc6\xe0\x7e\x0f\xc4\x7c\x25\x2e\x50\x36\xfd\xd9\x7f\xb1\x7c\x9b\x4c\xcb\x3f\xa9\x0c\x7d\xdb\x92\xc3\xa3\x6d\x9e\xc5\xc6\x14\xfb\x1f\x2e\x2b\x21\xde\x03\x00\x00\xff\xff\x88\xc8\x1f\x9d\x7e\x01\x00\x00"

func db20170829112137_ispSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170829112137_ispSql,
		"db/20170829112137_isp.sql",
	)
}

func db20170829112137_ispSql() (*asset, error) {
	bytes, err := db20170829112137_ispSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170829112137_isp.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20170829095647_os.sql": db20170829095647_osSql,
	"db/20170829112137_isp.sql": db20170829112137_ispSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20170829095647_os.sql": &bintree{db20170829095647_osSql, map[string]*bintree{}},
		"20170829112137_isp.sql": &bintree{db20170829112137_ispSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

