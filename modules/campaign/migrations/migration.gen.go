// Code generated by go-bindata.
// sources:
// db/20180325065941_campaigns.sql
// db/20180326061249_perm.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20180325065941_campaignsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x51\x93\xa2\x38\x10\x7e\xe7\x57\xf4\x9b\x5a\xe7\x56\x89\x77\x7b\xb7\x57\x53\xfb\xc0\x6a\x66\x97\x3a\xc5\x39\xc4\xab\x99\x27\x88\xd0\x6a\x4a\x0c\x14\x09\x3a\xde\xaf\xbf\x42\x14\xc1\x61\x30\x7a\xb3\x4f\x96\xc9\xd7\xe9\xee\x7c\x5f\x9a\x4e\xb4\x4f\x9f\xe0\x97\x0d\x5b\x26\x54\x22\xcc\xe2\xec\xef\xf4\xef\x11\x30\x0e\x02\x7d\xc9\x22\x0e\xad\x59\xdc\x02\x26\x00\x5f\xd1\x4f\x25\x06\xb0\x5b\x21\x07\xb9\x62\x02\x72\xbb\x0c\xc4\x04\xd0\x38\x0e\x19\x06\xda\xc0\x26\x86\x43\xc0\x31\xbe\x8d\x08\x98\x8f\x60\x4d\x1c\x20\xcf\xe6\xd4\x99\x82\xe7\xd3\x4d\x4c\xd9\x92\x0b\x0f\xda\x9a\xc7\x02\x0f\x4c\xcb\x69\xeb\xbd\x0e\xcc\xac\xa9\xf9\xdd\x22\xc3\x03\xdc\x9a\x8d\x46\x60\xcc\x9c\x89\x6b\x5a\x03\x9b\x8c\x89\xe5\x74\x35\x2f\x15\x98\xb8\x8d\x36\x5d\xcd\x0b\xa2\x0d\x65\xfc\x2a\x6c\xcd\x78\xe0\x01\xb1\x66\xe3\x76\x6b\x87\xf3\x56\x17\x5a\x34\x8e\x5b\x9d\x32\x46\x48\x2a\x53\x71\x42\x09\x49\x13\x99\xe1\x62\x9a\x0a\x2c\x21\x61\x30\x19\x67\x11\x42\x8b\x2d\xe0\x94\xe0\x61\x43\x7c\xc9\xb6\x08\x51\x02\x3c\x92\xad\x7c\xc1\x44\xba\x54\x7a\x30\x34\x1c\xe2\x98\x63\x72\x5e\x64\x48\x1e\x8d\xd9\xc8\x81\xc1\xcc\xb6\x89\xe5\xb8\xd9\xec\xd4\x31\xc6\x4f\x5d\xcd\x43\x1e\x5c\x58\x95\x2d\x8e\xd1\x4a\x26\x43\xf4\xe0\x1f\xc3\x1e\xfc\x30\xec\x76\xff\xf3\xe7\x4a\x32\x32\x0c\x2e\x27\x2f\x17\x39\x27\x22\xa3\x18\x42\xdc\x62\x08\xf9\x76\x66\xc1\xcb\x48\xd2\xd0\x9d\xa7\xc1\x12\xe5\x15\x0a\x28\x0b\xf7\x4a\x48\x19\x05\x74\xef\x8a\x18\x79\xa3\x12\x4e\x41\xf6\x8a\x30\x6e\x32\xd9\xd0\x57\x77\x5e\x16\x44\x2d\x4a\xc8\xec\x08\x2c\xf7\x27\xbe\xfd\xd8\xcf\xd8\xf6\x63\x9a\xff\x6c\xaa\xe2\x88\x93\x68\x99\xa0\x28\xe4\xc1\xf8\x69\x24\x83\x2f\x18\xa7\x21\xfb\x17\x83\x5a\x9d\x04\x28\x31\xd9\x30\x8e\xc0\x16\x90\xa9\x3a\x53\x4b\x10\x71\x84\x1d\x93\x2b\xc0\x80\x49\xc6\x97\xd9\xa6\x33\xbe\x45\x2e\xa3\x64\xff\x8e\xa0\x6b\x74\x70\x36\x91\xfb\x18\x4f\xe1\xcd\x43\xea\xaf\xdd\x90\x89\x83\x84\x77\x2b\x26\x31\xff\x57\xa3\x83\xca\x22\xb9\x00\x84\x07\x0e\x79\x76\x6a\xb1\xf8\xea\xaf\x28\x5f\xa2\x07\x8e\x69\xbd\x1c\x62\xac\xec\x14\x4d\xfc\x15\xdb\xa2\x82\x84\xfd\x04\xa9\x7c\x03\x54\x39\x21\x69\x1c\xdc\x63\x09\x13\x0b\x66\x4f\x99\x41\xdd\xaa\x4f\xb6\x39\x36\xec\x17\xf8\x8b\xbc\x40\x3b\x2b\x56\x9d\x8e\x46\xac\xef\xa6\x45\xe0\x2b\x98\x9c\x47\xc3\x6f\x5a\xb1\xf4\x0f\xc3\x36\x06\x0e\xb1\x61\x4a\x1c\xf8\x0a\xa9\x5c\x7c\x79\xd0\x94\x6a\xa1\x1b\xa0\xa4\x2c\xcc\x2a\x22\x94\x46\xaf\x54\x30\x80\xe3\x39\xbb\x8e\x5b\x45\xe9\xd5\xba\x09\xe0\x2d\xe8\x1a\x5d\xb6\x89\x8f\x38\xbd\xe6\x9c\xb4\x7a\xad\x33\xd4\x0f\x99\xbf\x56\x00\xab\x2d\xa9\xba\x9a\x1f\xf1\xad\x0a\x2c\xf6\x95\x50\x1b\x25\x14\x55\x41\xdd\x2b\x5e\x80\x7b\xe5\x9b\xd9\x56\x45\x5a\x56\x4f\xf7\xcc\x7c\x27\x43\x9a\xd6\x90\x3c\xbf\x91\x9d\x5b\x32\x71\x4f\x8a\x72\x19\x0f\xf0\xd5\xbb\x58\x10\x8c\xe9\xa0\x5b\x96\x9d\x31\x1d\x74\x3a\x1a\xc0\xe5\xa1\x00\xf8\x88\x63\xc1\x23\xc9\x16\xfb\xdb\x8f\x85\x4a\x9b\x70\x3f\x5f\x1f\x9e\xaf\xf0\x57\x18\xa4\x21\x8a\x63\xa6\xb7\x35\x45\x37\x6e\xcd\xfd\x3a\xf3\x56\xbd\xde\xb9\x81\xd0\x7b\xbd\xda\x0f\xc7\x01\xa7\x2b\xe2\xfa\x8a\xb8\x5f\x15\x71\xbf\x29\xe2\x3e\x2b\xe2\x7e\x57\xc4\xfd\xa1\x88\xfb\xa2\x88\xfb\x53\x0d\xa7\x2b\xf2\xa1\x2b\xf2\xa1\x2b\xf2\xa1\x2b\xf2\xa1\x2b\xf2\xa1\x2b\xf2\xa1\x2b\xf2\xa1\x2b\xf2\xa1\x2b\xf2\xa1\x2b\xf2\xd1\x57\xe4\xa3\xaf\xc8\x47\x5f\x91\x8f\xbe\x12\x1f\x75\xcd\xcc\xcf\xaa\xdc\x54\xca\x84\xcd\x53\x59\xd4\xb4\x5b\x9a\x1a\xdc\x32\x1f\xdf\x6f\x37\x01\xbc\x0d\xe5\xe9\x82\xfa\x32\x4d\x30\x69\x04\x46\x0d\x6d\x2b\x80\x37\x4f\xa2\x9d\xb8\xb2\x04\xa3\xf3\xc6\xf9\x04\x97\x2c\xe2\x8d\x10\x1f\xc3\x30\x0d\xe9\x15\x3f\x22\x6e\x9a\x7f\xff\x2b\x7f\x1f\x8d\xc6\x28\x1b\xca\x59\x2c\xee\xe4\x1a\x80\x31\x1c\xc2\x60\x62\x4d\x1d\xdb\x30\x2d\x07\xce\xbd\xc2\xe9\x56\xed\x2e\xd6\xda\xe3\xc4\x26\xe6\x77\x2b\x0f\xa6\x98\xe9\x80\x4d\x1e\x89\x4d\xac\x01\x99\x1e\xaf\x8d\x02\xda\x2c\xe8\xdc\xe1\xee\xf0\x09\xbf\xf4\x74\xfc\xae\x57\xfc\x64\x63\xb7\x7a\xf1\x2e\xb3\x5a\xac\x3d\xa8\x78\x2a\x3d\x22\x54\xbc\x79\xc5\x65\x28\x3f\x41\x0f\xb7\xbb\x3c\x26\x51\xe3\xf3\xd4\xb6\x54\x3d\x1e\x12\x3c\xfb\xab\x75\x78\xec\x94\x9a\xdc\xe6\x88\xa2\xd7\x13\xf5\x21\x54\x74\x55\x09\xa3\xfc\x6e\xd3\x90\xba\x7a\x24\x87\xbc\x3e\x7c\x23\xce\x85\xa7\x29\x84\x02\x75\xee\x7d\xff\xef\x66\xd4\x87\x93\x77\xd8\x8d\x0a\xac\xf6\xe0\x3f\x8d\x17\xe5\x48\xb2\xfe\xd0\x95\x74\x1e\x62\x7d\x28\x45\xf3\x7f\x71\x30\x0a\xb3\x8f\x0a\xe4\x70\x75\x69\x08\xa4\xb8\xda\x54\xe2\x38\x5b\xbd\xc3\x4d\xd1\x6d\xbf\x0d\xa1\x98\xaa\x5c\x89\x2e\xab\x50\x69\xae\xe2\xba\x60\xe2\x54\x8d\x2a\x0f\xab\xc3\x68\xc7\x4f\x4f\xab\xc5\xbb\x6a\x36\xa8\xf4\xb2\x9a\x44\x61\x88\x01\xcc\xa9\xbf\xd6\x86\xf6\xe4\xe9\x7d\xd9\x3f\x94\xe7\x8b\x84\x1e\x6a\xad\xf2\x93\x58\x3f\x97\x93\x50\x3b\x27\x1e\x34\xed\xbf\x00\x00\x00\xff\xff\x7d\x60\x12\x5e\x35\x16\x00\x00"

func db20180325065941_campaignsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325065941_campaignsSql,
		"db/20180325065941_campaigns.sql",
	)
}

func db20180325065941_campaignsSql() (*asset, error) {
	bytes, err := db20180325065941_campaignsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325065941_campaigns.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180326061249_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\xcb\x6a\xc3\x30\x10\x45\xf7\xf9\x8a\x8b\x37\x71\xa8\xb3\x48\xb7\x5d\x15\xa2\x52\x83\xeb\x50\x3f\xda\x65\x90\xad\xa9\x33\xd4\x0f\x21\xc9\xa4\x9f\x5f\x94\xe2\x42\xf0\xa6\x50\x67\xa9\xcb\xe8\x70\x18\xee\xac\xb6\x5b\xdc\x75\xdc\x18\xe9\x08\xa5\xf6\xcf\xfc\x35\x01\xf7\xb0\x54\x3b\x1e\x7a\xac\x4b\xbd\x06\x5b\xd0\x17\xd5\xa3\x23\x85\xf3\x89\x7a\xb8\x13\x5b\xfc\xfc\xf3\x43\x6c\x21\xb5\x6e\x99\xd4\x2a\x4e\x73\x91\x15\x88\xd3\xe2\x00\x33\xb4\x74\xd4\x64\x3a\xb6\xd6\x8f\x85\x97\x80\x55\x04\x1f\x46\xb0\xf5\xa0\x69\x83\xb7\xc7\xa4\x14\x39\xc2\x5d\x14\x90\x62\x77\xac\x65\xa7\x25\x37\x7d\x10\x05\x96\xda\x8f\x60\xf3\xf0\x1f\xea\xfd\x4d\xa8\xbb\x28\x68\xe8\x06\xaa\xcb\x43\xa7\xad\x4a\xe7\x0c\x57\xa3\x23\xbb\xec\x5e\x97\xe6\x4e\xbe\xd5\xa8\x1a\x72\xcb\xba\xce\x98\x57\xfd\xdf\x0f\xe7\x7e\xba\x80\xdf\xfa\xfb\xf0\x4f\x07\x60\x86\xb6\x25\x85\x4a\xd6\x9f\xab\xbd\x48\x44\x21\xf0\x94\x1d\x5e\x66\xaa\xef\xcf\x22\x13\x17\x4d\xc4\x29\xc2\x59\x39\xaf\x1a\xe0\x15\xbf\x03\x00\x00\xff\xff\x1c\x8f\x5c\xda\xa4\x03\x00\x00"

func db20180326061249_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180326061249_permSql,
		"db/20180326061249_perm.sql",
	)
}

func db20180326061249_permSql() (*asset, error) {
	bytes, err := db20180326061249_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180326061249_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20180325065941_campaigns.sql": db20180325065941_campaignsSql,
	"db/20180326061249_perm.sql":      db20180326061249_permSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20180325065941_campaigns.sql": &bintree{db20180325065941_campaignsSql, map[string]*bintree{}},
		"20180326061249_perm.sql":      &bintree{db20180326061249_permSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
