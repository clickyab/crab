// Code generated by go-bindata.
// sources:
// db/20180325065941_campaigns.sql
// db/20180326061249_perm.sql
// db/20180404125701_add_tld_field.sql
// db/20180404130855_alter_exchange_enum.sql
// db/20180406191652_campaign_report_receivers.sql
// db/20180415094625_shadow.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20180325065941_campaignsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x51\x93\xa2\x38\x10\x7e\xe7\x57\xf4\x9b\x5a\xe7\x56\x89\x77\x73\xb7\x57\x53\xfb\xc0\x6a\x66\x96\x3a\xc5\x39\xc4\xab\x99\x27\x88\xd0\x6a\x4a\x0c\x14\x09\xe3\x78\xbf\xfe\x0a\x51\x04\x87\xc1\xe8\xcd\x3e\x59\x92\xaf\xd3\x5f\xe7\xeb\x74\x3a\xd1\xbe\x7c\x81\x5f\x36\x6c\x99\x50\x89\x30\x8b\xb3\xbf\xd3\xbf\x47\xc0\x38\x08\xf4\x25\x8b\x38\xb4\x66\x71\x0b\x98\x00\x7c\x43\x3f\x95\x18\xc0\x76\x85\x1c\xe4\x8a\x09\xc8\xed\x32\x10\x13\x40\xe3\x38\x64\x18\x68\x03\x9b\x18\x0e\x01\xc7\xf8\x3e\x22\x60\x3e\x80\x35\x71\x80\x3c\x9b\x53\x67\x0a\x9e\x4f\x37\x31\x65\x4b\x2e\x3c\x68\x6b\x1e\x0b\x3c\x30\x2d\xa7\xad\xf7\x3a\x30\xb3\xa6\xe6\xa3\x45\x86\x7b\xb8\x35\x1b\x8d\xc0\x98\x39\x13\xd7\xb4\x06\x36\x19\x13\xcb\xe9\x6a\x5e\x2a\x30\x71\x1b\x6d\xba\x9a\x17\x44\x1b\xca\xf8\x45\xd8\x9a\xf1\xc0\x03\x62\xcd\xc6\xed\xd6\x16\xe7\xad\x2e\xb4\x68\x1c\xb7\x3a\x65\x8c\x90\x54\xa6\xe2\x88\x12\x92\x26\x32\xc3\xc5\x34\x15\x58\x42\xc2\x60\x32\xce\x18\x42\x8b\x2d\xe0\x18\xe0\x7e\x41\x7c\xc9\x5e\x11\xa2\x04\x78\x24\x5b\xf9\x84\x89\x74\xa9\xf4\x60\x68\x38\xc4\x31\xc7\xe4\x34\xc9\x90\x3c\x18\xb3\x91\x03\x83\x99\x6d\x13\xcb\x71\xb3\xd1\xa9\x63\x8c\x9f\xba\x9a\x87\x3c\x38\xb3\x2a\x5b\x1c\xd8\x4a\x26\x43\xf4\xe0\x1f\xc3\x1e\xfc\x30\xec\x76\xff\xee\xae\x12\x8c\x8c\x24\x0d\xdd\x79\x1a\x2c\x51\x5e\x58\x41\xca\xc2\x9d\x12\x52\x46\x01\xdd\xb9\x22\x46\xde\x28\xe4\x91\x68\xaf\xa0\x71\x95\xc9\x86\xbe\xb9\xf3\xb2\x9e\xb5\x28\x21\xb3\x0c\x5e\xee\x8e\x72\xf9\xb1\x9f\x89\xe5\xc7\x34\xff\xd9\x54\xb5\x8d\x93\x68\x99\xa0\x28\xd4\x65\xfc\xf8\x25\x83\x2f\x18\xa7\x21\xfb\x17\x83\x5a\x99\x03\x94\x98\x6c\x18\x47\x60\x0b\xc8\x92\x32\x13\x3b\x88\x38\xc2\x96\xc9\x15\x60\xc0\x24\xe3\xcb\x4c\x70\xc6\x5f\x91\xcb\x28\xd9\x7d\x90\x8f\x35\x32\x9e\x4c\xe4\x2e\xc6\x23\xbd\x79\x48\xfd\xb5\x1b\x32\xb1\xcf\xc0\xed\x8a\x49\xcc\xff\x75\x2e\x4c\x92\x6f\x07\xe1\x81\x43\x9e\x9d\x5a\x2c\xbe\xf9\x2b\xca\x97\xe8\x81\x63\x5a\x2f\x7b\x8e\x95\x95\xa2\x89\xbf\x62\xaf\xa8\x90\x81\x7e\x82\x54\xbe\x03\xaa\x24\x78\x1a\x07\xb7\x58\xc2\xc4\x82\xd9\x53\x66\x50\x37\xeb\x93\x6d\x8e\x0d\xfb\x05\xfe\x22\x2f\xd0\xce\x6a\x4d\xa7\xa3\x11\xeb\xd1\xb4\x08\x7c\x03\x93\xf3\x68\xf8\x5d\x2b\xa6\xfe\x61\xd8\xc6\xc0\x21\x36\x4c\x89\x03\xdf\x20\x95\x8b\xaf\xf7\x9a\x52\x29\x73\x03\x94\x94\x85\x59\x41\x83\xd2\xd7\x0b\x05\x08\xe0\xb0\xcf\x2e\xe3\x56\x51\x7a\xb1\xec\x01\x78\x0b\xba\x46\x97\x6d\xe2\x03\x4e\xaf\xd9\x27\xad\x5e\xeb\x04\xf5\x43\xe6\xaf\x15\xc0\x6a\x53\xaa\xce\xe6\x47\xfc\x55\x05\x16\xfb\x4a\xa8\x8d\x12\x8a\xaa\xa0\x6e\x4d\x5e\x80\x5b\xd3\x37\xb3\xad\x26\x69\x39\x7b\xba\x27\xe5\x3b\x19\xd2\xb4\x86\xe4\xf9\x5d\xda\xb9\x25\x13\xf7\x98\x51\x2e\xe3\x01\xbe\x79\x67\x13\x82\x31\x1d\x74\xcb\x69\x67\x4c\x07\x9d\x8e\x06\x70\xbe\x29\x00\x3e\x63\x5b\xf0\x48\xb2\xc5\xee\xfa\x6d\xa1\x72\xca\xdf\xae\xd7\xa7\xc7\x2b\xfc\x15\x06\x69\x88\xe2\x10\xe9\x75\x3d\xcd\x95\x4b\x73\x7b\x9e\x79\xab\x5e\xef\xd4\x1c\xe8\xbd\x5e\xed\xc1\xb1\xc7\xe9\x8a\xb8\xbe\x22\xee\x57\x45\xdc\x6f\x8a\xb8\x3b\x45\xdc\xef\x8a\xb8\x3f\x14\x71\x5f\x15\x71\x7f\xaa\xe1\x74\x45\x3d\x74\x45\x3d\x74\x45\x3d\x74\x45\x3d\x74\x45\x3d\x74\x45\x3d\x74\x45\x3d\x74\x45\x3d\x74\x45\x3d\x74\x45\x3d\xfa\x8a\x7a\xf4\x15\xf5\xe8\x2b\xea\xd1\x57\xd2\xa3\xae\x99\xf9\x59\x95\x9b\x4a\x99\xb0\x79\x2a\x8b\x9a\x76\x4d\x53\x83\xaf\xcc\xc7\x8f\xdb\x4d\x00\x6f\x43\x79\xba\xa0\xbe\x4c\x13\x4c\x1a\x81\x51\x43\xdb\x0a\xe0\xcd\x93\x68\x2b\x2e\x4c\xc1\xe8\xbc\x71\x3c\xc1\x25\x8b\x78\x23\xc4\xc7\x30\x4c\x43\x7a\xc1\x8f\x88\x9b\xc6\x3f\x3e\xe5\x6f\x93\xd1\x18\x65\x9f\x72\x15\x8b\x2b\xb5\x06\x60\x0c\x87\x30\x98\x58\x53\xc7\x36\x4c\xcb\x81\x53\xaf\x70\xbc\x14\xbb\x8b\xb5\xf6\x30\xb1\x89\xf9\x68\xe5\x64\x8a\x91\x0e\xd8\xe4\x81\xd8\xc4\x1a\x90\x29\x1c\x6e\x0d\xd0\x66\x41\xe7\x06\x77\xfb\x23\xfc\xdc\xd3\xe1\x5c\xaf\xf8\xc9\xbe\x5d\xeb\xc5\x3b\x8f\x6a\xb1\xf6\xa0\xe2\xa9\xf4\x06\x50\xf1\xe6\x15\x97\xa1\x7c\x07\xdd\x5f\xef\xf2\x10\x44\x8d\xcf\x63\xdb\x52\xf5\xb8\x0f\xf0\xe4\xaf\xd6\xe1\xa1\x53\x6a\x72\x9b\x23\x8a\x5e\x4f\xd4\x53\xa8\xe4\x55\x85\x46\xf9\xd9\xa5\x21\x74\x75\x26\xfb\xb8\x3e\x7d\x21\x4e\x85\xa7\x89\x42\x81\x3a\xf5\xbe\xff\x77\x31\xea\xe9\xe4\x1d\x76\x63\x06\x56\x7b\xf0\x9f\xa6\x8b\x32\x93\xac\x3f\x74\x25\x9d\x87\x58\x4f\xa5\x68\xfe\xcf\x36\x46\x61\xf6\x59\x44\xf6\x57\x97\x06\x22\xc5\xd5\xa6\xc2\xe3\x64\xf5\x81\x36\x45\xb7\xfd\x9e\x42\x31\x54\xb9\x12\x9d\x57\xa1\xd2\x58\xc5\x75\xa1\xc4\xb1\x1a\x55\xde\x45\x87\xd1\x96\x1f\x5f\x46\x8b\x67\xd1\xec\xa3\xd2\xc3\x68\x12\x85\x21\x06\x30\xa7\xfe\x5a\x1b\xda\x93\xa7\x8f\xd3\xfe\xbe\x3c\x5e\x04\x74\x5f\x6b\x95\xef\xc4\xfa\xb1\x5c\x84\xda\x31\x71\xaf\x69\xff\x05\x00\x00\xff\xff\xeb\x09\x87\x0b\xf4\x15\x00\x00"

func db20180325065941_campaignsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325065941_campaignsSql,
		"db/20180325065941_campaigns.sql",
	)
}

func db20180325065941_campaignsSql() (*asset, error) {
	bytes, err := db20180325065941_campaignsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325065941_campaigns.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180326061249_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\xcb\x6a\xc3\x30\x10\x45\xf7\xf9\x8a\x8b\x37\x71\xa8\xb3\x48\xb7\x5d\x15\xa2\x52\x83\xeb\x50\x3f\xda\x65\x90\xad\xa9\x33\xd4\x0f\x21\xc9\xa4\x9f\x5f\x94\xe2\x42\xf0\xa6\x50\x67\xa9\xcb\xe8\x70\x18\xee\xac\xb6\x5b\xdc\x75\xdc\x18\xe9\x08\xa5\xf6\xcf\xfc\x35\x01\xf7\xb0\x54\x3b\x1e\x7a\xac\x4b\xbd\x06\x5b\xd0\x17\xd5\xa3\x23\x85\xf3\x89\x7a\xb8\x13\x5b\xfc\xfc\xf3\x43\x6c\x21\xb5\x6e\x99\xd4\x2a\x4e\x73\x91\x15\x88\xd3\xe2\x00\x33\xb4\x74\xd4\x64\x3a\xb6\xd6\x8f\x85\x97\x80\x55\x04\x1f\x46\xb0\xf5\xa0\x69\x83\xb7\xc7\xa4\x14\x39\xc2\x5d\x14\x90\x62\x77\xac\x65\xa7\x25\x37\x7d\x10\x05\x96\xda\x8f\x60\xf3\xf0\x1f\xea\xfd\x4d\xa8\xbb\x28\x68\xe8\x06\xaa\xcb\x43\xa7\xad\x4a\xe7\x0c\x57\xa3\x23\xbb\xec\x5e\x97\xe6\x4e\xbe\xd5\xa8\x1a\x72\xcb\xba\xce\x98\x57\xfd\xdf\x0f\xe7\x7e\xba\x80\xdf\xfa\xfb\xf0\x4f\x07\x60\x86\xb6\x25\x85\x4a\xd6\x9f\xab\xbd\x48\x44\x21\xf0\x94\x1d\x5e\x66\xaa\xef\xcf\x22\x13\x17\x4d\xc4\x29\xc2\x59\x39\xaf\x1a\xe0\x15\xbf\x03\x00\x00\xff\xff\x1c\x8f\x5c\xda\xa4\x03\x00\x00"

func db20180326061249_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180326061249_permSql,
		"db/20180326061249_perm.sql",
	)
}

func db20180326061249_permSql() (*asset, error) {
	bytes, err := db20180326061249_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180326061249_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180404125701_add_tld_fieldSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\x31\x4f\xc3\x30\x10\x05\xe0\xbd\xbf\xe2\x6d\x01\xa1\x4a\x65\x43\xea\x64\x12\x57\x0c\x6e\x03\xa9\xc3\x5a\x9b\xe4\x48\x4f\x38\x8e\x15\xbb\x94\x9f\x8f\x4c\x05\x12\x03\x12\xdb\xbd\xd3\xbd\x93\xbe\xc5\x72\x89\x9b\x91\x87\xd9\x26\x42\x1b\x72\xdc\x3f\x29\xb0\x47\xa4\x2e\xf1\xe4\x51\xb4\xa1\x00\x47\xd0\x07\x75\xa7\x44\x3d\xce\x47\xf2\x48\x47\x8e\xb8\xf4\xf2\x11\x47\xd8\x10\x1c\x53\xbf\x10\x4a\xcb\x06\x5a\xdc\x2b\x09\xd3\xd9\x31\x58\x1e\x7c\x34\x10\x55\x05\x93\x5c\x6f\xf0\x2c\x9a\xf2\x41\x34\x57\xb7\xab\xd5\x35\xf2\x24\xca\x5c\xd9\x4b\x8d\x53\x7a\xbd\x43\x59\x2b\x25\xb4\xfc\x0a\x87\x81\x3c\xcd\xd6\x1d\x3a\x46\x25\x37\xa2\x55\x1a\xbb\x56\x29\x94\xf5\x76\x2b\x77\x1a\x45\x9a\x02\x1c\xbd\x93\x43\x3f\x8d\x96\x7d\x01\xb1\xc9\xef\x4c\xe2\xe4\xc8\xac\x17\xbf\x88\xd5\x74\xf6\xdf\xc8\x1f\x61\x5e\xfe\xcb\x38\x4f\xce\x51\x8f\x17\xdb\xbd\xfd\xe9\xac\x9a\xfa\xf1\x02\x5d\x7f\x06\x00\x00\xff\xff\x48\x4e\x84\xd4\x5d\x01\x00\x00"

func db20180404125701_add_tld_fieldSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180404125701_add_tld_fieldSql,
		"db/20180404125701_add_tld_field.sql",
	)
}

func db20180404125701_add_tld_fieldSql() (*asset, error) {
	bytes, err := db20180404125701_add_tld_fieldSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180404125701_add_tld_field.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180404130855_alter_exchange_enumSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\xbd\x4e\x03\x31\x10\x04\xe0\xde\x4f\x31\x9d\x13\x41\x0a\xea\x54\x07\x31\x10\xc9\x18\x01\x76\x41\x95\x73\x9c\xd5\xdd\x2a\x8e\xcf\x8a\x8d\x72\xbc\x3d\x3a\x21\x7e\xd2\x21\xba\xdd\xd1\x4c\xf1\x89\xc5\x02\x17\x07\xee\x8e\xbe\x12\x5c\x9e\xde\x97\x27\x0d\x4e\x28\x14\x2a\x0f\x09\xd2\x65\x09\x2e\xa0\x91\xc2\x5b\xa5\x1d\x4e\x3d\x25\xd4\x9e\x0b\x3e\x77\x53\x89\x0b\x7c\xce\x91\x69\x27\x1a\x6d\xd5\x33\x6c\x73\xad\x15\xda\xe0\x0f\xd9\x73\x97\x4a\x8b\x9b\xfb\xc6\xdc\x29\xb4\x34\x86\xde\xa7\x8e\xda\xdf\xa7\x32\xee\x61\x26\x43\xe4\xb0\x7f\xf7\x5b\x79\x29\x7d\x8c\x1b\x1a\x03\xe5\xba\x39\x4f\xe5\x1c\x2b\x75\xdb\x38\x6d\xf1\xd3\x5f\x0a\x71\x06\x59\x0d\xa7\xf4\x45\xf9\x76\x4c\xe1\x9f\x24\xc7\x21\x46\xda\x61\xeb\xc3\xfe\x7f\x1a\xbb\x36\xaf\x6b\x63\x67\x57\x73\x98\x47\x0b\xe3\xb4\x5e\x8a\x8f\x00\x00\x00\xff\xff\x8a\x63\x4b\xc7\x6a\x01\x00\x00"

func db20180404130855_alter_exchange_enumSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180404130855_alter_exchange_enumSql,
		"db/20180404130855_alter_exchange_enum.sql",
	)
}

func db20180404130855_alter_exchange_enumSql() (*asset, error) {
	bytes, err := db20180404130855_alter_exchange_enumSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180404130855_alter_exchange_enum.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180406191652_campaign_report_receiversSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x31\x6f\xdb\x30\x14\x84\x77\xfe\x8a\xdb\x62\xa3\x0d\xd0\x6e\x05\x8c\x0c\x8c\xf8\xec\x12\x55\xe8\x94\xa2\x80\x76\x92\x54\x89\x4e\x88\x38\x94\x40\xd1\x4d\xfb\xef\x0b\x26\x90\x62\x0f\x2e\xb2\x64\xd4\xbb\xef\x09\xf7\x8e\xc7\x2e\x2f\xf1\xe1\xd1\xdd\x85\x26\x5a\x94\x43\xfa\x2c\xbe\xe7\x70\x1e\xa3\x6d\xa3\xeb\x3d\x2e\xca\xe1\x02\x6e\x84\xfd\x63\xdb\x43\xb4\x1d\x9e\xee\xad\x47\xbc\x77\x23\x5e\xf6\x12\xe4\x46\x34\xc3\xb0\x77\xb6\x63\x42\x6f\x6f\x61\xf8\x75\x4e\x90\x6b\xd0\x0f\x59\x98\x02\x6d\xf3\x38\x34\xee\xce\x57\xbe\x8f\x6e\xf7\x77\xc5\x58\xa6\x89\x1b\x7a\x05\xd5\xd6\x4c\x70\x3d\xd3\xc1\x0e\x7d\x88\x55\xb0\xad\x75\xbf\x6d\x18\x6b\x2c\x18\x8e\x74\xd7\xd5\x90\xca\x2c\x3e\x7f\x5a\xa2\x54\x85\xdc\x28\x12\xcf\x7f\x52\x65\x9e\x7f\x4c\xe8\x61\xb4\xe1\x0d\x58\x1b\x6c\x13\x6d\x57\x35\xb1\x86\xe0\x86\x8c\xbc\xa1\x99\x80\xa0\x35\x2f\x73\x83\xac\xd4\x9a\x94\xa9\x92\x5a\x18\x7e\x73\xbb\x64\xa4\x36\x52\x11\xae\x20\xbd\xef\xc5\x35\x9b\xd1\xaf\x5c\xf3\xcc\x90\x46\x41\x06\x57\x38\xc4\xdd\x97\x15\x63\x3c\x4f\xa3\x97\xa3\xcf\x5e\xc9\x00\x2e\x04\xb2\xad\x2a\x8c\xe6\x52\x99\xff\x24\x52\x4d\xca\x58\xb9\xae\xda\x3d\xd4\x58\x6f\x35\xc9\x8d\xc2\x37\xfa\x89\xc5\x49\x54\x4b\x68\x5a\x93\x26\x95\xd1\x51\xc8\x29\xd4\x3a\xa9\xab\x77\x70\x97\xe2\x3f\xe3\x6c\x7a\x99\x53\x57\xcf\x0b\xaf\x8e\xd8\x49\x3f\x45\xff\xe4\xa7\x86\xce\xf5\x4c\xc3\x37\x15\x34\xf4\xfb\xbd\xed\xf0\xab\x69\x1f\x8e\x4b\x7a\xd6\xfc\xea\x5f\x00\x00\x00\xff\xff\x1b\x5d\xbb\x16\x1c\x03\x00\x00"

func db20180406191652_campaign_report_receiversSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180406191652_campaign_report_receiversSql,
		"db/20180406191652_campaign_report_receivers.sql",
	)
}

func db20180406191652_campaign_report_receiversSql() (*asset, error) {
	bytes, err := db20180406191652_campaign_report_receiversSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180406191652_campaign_report_receivers.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180415094625_shadowSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\x4d\x8f\xda\x40\x0c\xbd\xcf\xaf\xb0\xb8\x2c\xa8\xec\x61\x77\xb5\xed\x81\x53\x16\x52\x15\x35\x04\x1a\x92\x4a\x7b\x8a\x4c\xc6\x10\x8b\x7c\x8c\x66\x86\xd2\xfd\xf7\x55\x42\x0b\xa4\x21\xdb\x0a\x55\x95\xaa\x1e\xfd\xde\x1b\x4b\x7e\xb6\xc7\xe2\xf6\x16\xde\xe4\xbc\xd1\x68\x09\x22\x55\x85\xcb\x4f\x1e\x70\x01\x86\x12\xcb\x65\x01\x37\x91\xba\x01\x36\x40\x5f\x29\xd9\x59\x92\xb0\x4f\xa9\x00\x9b\xb2\x81\xc3\xbb\x4a\xc4\x06\x50\xa9\x8c\x49\x8a\x71\xe0\x3a\xa1\x0b\xa1\xf3\xe4\xb9\xc0\xb9\xd2\x64\x0c\x97\x85\x11\x7d\x01\xc0\x12\x3e\x3b\xc1\xf8\x83\x13\xf4\xdf\x3e\x0c\xc0\x9f\x87\xe0\x47\x9e\x37\x14\x00\x09\xe6\x0a\x79\x53\xc4\x2c\x61\xea\x87\x4d\x4e\x13\x5a\xfe\x42\x17\x39\x95\x5c\xc0\xf2\x16\x26\x29\xc3\x97\x16\x6a\x52\xd4\xd4\xd6\xf2\x7a\x5d\x83\x13\xf7\xbd\x13\x79\x07\x02\x2a\x46\xed\x56\x19\x9b\x94\x74\x5c\x60\x4e\x9d\xc5\x9c\x64\xf6\x45\x11\xb8\x7e\x34\xeb\xf7\x50\xa9\xde\x10\x7a\x7b\x5a\xf5\x9a\x6a\xb3\xab\xbd\xd3\x9d\xe9\x0c\xa1\x8d\x5f\xf3\xae\xf2\x87\x64\x8c\x16\xc2\xe9\xcc\x5d\x86\xce\x6c\xd1\x10\x8c\xe7\xfe\x32\x0c\x9c\xaa\xa4\xb3\x96\xc4\x26\x45\x59\xee\xe3\xd3\xf3\x98\x65\xac\xb6\xb0\x08\xa6\x33\x27\x78\x86\x8f\xee\x33\xf4\x4f\xec\x10\x58\x0e\xc4\x60\x24\xba\x9a\x1c\x4b\xb2\xc8\xd9\x2f\x7b\xad\x69\x7d\xe4\xee\xee\xdf\x0d\x6a\xcb\x70\x43\x2d\x90\xd5\x11\x7a\xb8\x6b\xe6\xd8\xe1\x91\xba\x7f\x7c\xfc\x89\x33\xa4\x5f\xf3\x2b\x43\x0b\x93\x79\xf4\xe4\xb9\x75\x54\x16\x67\xd1\x75\x5e\x7e\xaf\xbc\x61\x65\xae\xae\xb2\x33\xc9\x38\xd9\xfe\xd5\x75\xe9\x58\x82\x8b\x0b\xf3\xef\x2f\x40\xed\xef\x1f\x1a\xfd\x43\xae\xff\x6c\xea\xcf\x8b\xbe\x72\xe0\xcf\xaf\xce\xa4\xdc\x17\x3f\xee\xce\xf1\xe8\x54\xe0\x6f\x9d\x1d\x5d\x66\x19\x49\x58\x61\xb2\x15\x93\x60\xbe\xb8\xd4\x98\x51\x8b\x69\x42\xed\x0f\xac\x83\x36\x23\x21\xbe\x05\x00\x00\xff\xff\x78\xb0\xc2\x38\x32\x07\x00\x00"

func db20180415094625_shadowSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180415094625_shadowSql,
		"db/20180415094625_shadow.sql",
	)
}

func db20180415094625_shadowSql() (*asset, error) {
	bytes, err := db20180415094625_shadowSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180415094625_shadow.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20180325065941_campaigns.sql":                 db20180325065941_campaignsSql,
	"db/20180326061249_perm.sql":                      db20180326061249_permSql,
	"db/20180404125701_add_tld_field.sql":             db20180404125701_add_tld_fieldSql,
	"db/20180404130855_alter_exchange_enum.sql":       db20180404130855_alter_exchange_enumSql,
	"db/20180406191652_campaign_report_receivers.sql": db20180406191652_campaign_report_receiversSql,
	"db/20180415094625_shadow.sql":                    db20180415094625_shadowSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20180325065941_campaigns.sql":                 &bintree{db20180325065941_campaignsSql, map[string]*bintree{}},
		"20180326061249_perm.sql":                      &bintree{db20180326061249_permSql, map[string]*bintree{}},
		"20180404125701_add_tld_field.sql":             &bintree{db20180404125701_add_tld_fieldSql, map[string]*bintree{}},
		"20180404130855_alter_exchange_enum.sql":       &bintree{db20180404130855_alter_exchange_enumSql, map[string]*bintree{}},
		"20180406191652_campaign_report_receivers.sql": &bintree{db20180406191652_campaign_report_receiversSql, map[string]*bintree{}},
		"20180415094625_shadow.sql":                    &bintree{db20180415094625_shadowSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
