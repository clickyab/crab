// Code generated by go-bindata.
// sources:
// db/20170829140330_time.sql
// db/20170903102708_campaign.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20170829140330_timeSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xbd\x6e\xf2\x30\x18\x85\x77\x5f\xc5\xd9\x00\x7d\x5f\x24\x9c\xfe\x8b\x29\x80\x87\xa8\xf9\x81\xe0\x0c\x4c\x91\x1b\x5b\xc4\x6a\x08\x16\x09\xa2\x97\x5f\xa5\x88\x88\xb6\xc3\xdb\x33\x5a\x8f\x6d\xe9\x91\xce\xf1\x3c\xfc\xdb\xdb\xdd\x51\x75\x06\xb9\x63\x9e\x87\xcd\x3a\x82\x6d\xd0\x9a\xb2\xb3\x87\x06\xa3\xdc\x8d\x60\x5b\x98\x0f\x53\x9e\x3a\xa3\x71\xae\x4c\x83\xae\xb2\x2d\x2e\xf7\x7a\xc8\xb6\x50\xce\xd5\xd6\x68\xb6\xc8\x44\x20\x05\x64\x30\x8f\x04\xda\xb2\x32\xfa\x54\x9b\x16\x63\x06\x58\x8d\x21\x61\x22\x11\xe4\x32\x2d\xc2\x64\x91\x89\x58\x24\x12\xab\x2c\x8c\x83\x6c\x8b\x57\xb1\xfd\xcf\x80\x52\xb9\xbd\xb2\xbb\xa6\xb0\xfa\x8b\xbe\x24\x49\x25\x92\x3c\x8a\x7a\xe2\xe4\xb4\xea\x8c\x2e\x54\x07\xc8\x30\x16\x1b\x19\xc4\xab\x6f\x44\x35\x9d\x0e\x3f\xce\xd3\x34\xfa\xfd\x46\x35\xe5\x24\xe1\x93\xc4\x1d\x49\xdc\x93\xc4\x03\x49\x3c\x92\xc4\x13\x49\x3c\x93\xc4\x0b\x45\x70\xd2\x29\x27\x9d\x72\xd2\x29\x27\x9d\x72\xd2\x29\x27\x9d\x72\xd2\x29\x27\x9d\x72\xd2\x29\x27\x9d\xfa\xa4\x53\x9f\x74\xea\x93\x4e\x7d\xca\xe9\x22\x4d\x36\x32\x0b\xfa\xba\x0d\xd5\x2d\x4a\xb5\x77\xd7\x22\xe6\x49\xb8\xce\x05\xc6\x37\xe5\x9c\xb0\xc9\x8c\xb1\xdb\x1d\x59\x1e\xce\xcd\x75\x49\x86\x19\xe9\x0f\xff\x34\x24\xc7\x43\x5d\x1b\x8d\x37\x55\xbe\xb3\x65\x96\xae\x7e\x4e\xc9\x8c\xb1\xcf\x00\x00\x00\xff\xff\x25\xf8\x63\xda\xb5\x04\x00\x00"

func db20170829140330_timeSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170829140330_timeSql,
		"db/20170829140330_time.sql",
	)
}

func db20170829140330_timeSql() (*asset, error) {
	bytes, err := db20170829140330_timeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170829140330_time.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20170903102708_campaignSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x41\x6f\xea\x38\x10\xbe\xe7\x57\x8c\xb8\x00\xda\x72\x59\xe9\x9d\x38\xe5\x81\xdf\x2e\x5a\x48\xda\x10\x56\xdb\x53\xe4\x38\x53\xb0\x70\x12\xcb\x76\xa0\xfd\xf7\x2b\x87\x40\xe3\x34\xa9\x68\x5f\x2e\xad\xf2\xf1\x7d\xe3\x99\xf9\x66\xe2\xd9\x0c\xfe\xc8\xf9\x5e\x51\x83\xb0\x93\xde\x6c\x06\xdb\xa7\x35\xf0\x02\x34\x32\xc3\xcb\x02\xc6\x3b\x39\x06\xae\x01\x5f\x91\x55\x06\x33\x38\x1f\xb0\x00\x73\xe0\x1a\x2e\x3c\xfb\x23\xae\x81\x4a\x29\x38\x66\xde\x22\x22\x7e\x4c\x20\xf6\x7f\xae\x09\x30\x9a\x4b\xca\xf7\x85\x86\x89\x07\xc0\x33\xe8\x3c\xab\x20\x06\x7f\x17\x87\xc9\x2a\x58\x44\x64\x43\x82\x18\x1e\xa3\xd5\xc6\x8f\x9e\xe1\x1f\xf2\xfc\xe0\x01\x30\x85\xd4\x60\x96\x50\x73\xe5\xc4\xab\x0d\xd9\xc6\xfe\xe6\xb1\x2b\x76\x7b\x82\x30\x86\x60\xb7\x5e\x5b\x7e\x25\xb3\xdf\xe2\x53\x66\xf8\x09\xdb\xe8\xcf\x30\x5c\x0f\x52\x3f\xc6\xd7\xa8\x12\x27\x71\x9b\xf3\xfd\xfc\xac\xcc\x29\x2f\xda\x0a\x5f\xe3\x1f\x79\xd1\xa9\x3a\x09\x76\x1b\x98\x8c\xce\x98\x8e\x1e\x60\x44\xa5\x1c\x4d\x3f\xe1\x9b\x37\x89\xbd\xfc\x13\xd5\xc6\x0a\x14\xd4\x16\xc8\xfe\x97\xd2\xa2\x40\x35\x9a\x3a\x7c\x6d\xa8\xa9\x74\x9b\x7f\x7f\xfd\x3c\x80\x45\xb8\xa9\x5d\x31\xe6\x2f\x37\x33\xd5\x6e\xbb\xb4\xa5\x54\x50\x94\x66\xdc\x04\x52\xa6\xd5\xe6\xaf\x36\x1a\x8b\xcc\x61\xb7\xf8\x75\x1d\xb8\x11\x6e\x21\xfe\xf5\xa3\xc5\xdf\x7e\x34\xf9\xf3\xc7\x8f\x6e\x01\x7b\xe4\xd3\x2a\xdb\xa3\x23\xff\x45\x1f\x50\x2e\xde\x12\xc1\x73\x6e\xbe\xc5\x67\xa5\x36\x89\xd3\xcc\xa6\x8f\x4c\xe6\xb6\x79\x4c\xb2\xcb\x1f\xfa\x6e\x07\x87\x2f\x59\x62\x35\xbe\x7b\xfe\xf3\x81\x1b\x4c\x52\x41\xd9\xb1\x31\xf3\x2a\x88\xbb\xc0\xe5\x7c\xd6\x20\x5d\xe4\x44\x45\x85\x10\x93\xff\x6a\xce\x22\x0c\xb6\x71\xe4\xdb\x13\x5c\x4d\x91\x34\x83\xf2\x72\x84\x5f\x61\x44\x56\x7f\x05\x76\x83\xc0\xe4\x36\x3f\x53\x88\xc8\x2f\x12\x91\x60\x41\xb6\xcd\x54\x69\x98\xf0\x6c\x3a\x24\x58\x4f\x6e\x57\xae\x19\x67\x47\xcc\xbe\xfb\x5c\xca\x4d\xfe\x83\xa8\x0b\x7f\xd0\x4e\xce\x22\x15\x89\x54\xa8\xd1\x5c\xe2\x78\xde\x74\xee\xf5\x6f\xda\x84\x1a\xa3\x78\x5a\x19\xec\xd9\xb9\x77\xac\xdb\xab\x8c\xe5\xd5\x1d\x76\x66\x24\xa7\x5c\x5c\xc5\x6c\x33\xde\xed\x89\x27\xce\xb0\x0f\xc9\x69\x51\xbd\x50\x66\x2a\x85\xca\x45\xca\xf6\x5a\x70\x90\x54\x95\x67\x8d\xaa\x07\xe1\x34\x1d\xe0\x28\xdc\xdb\x2f\x51\x0f\xc2\x50\x88\x4a\x50\xd5\xa3\xa6\x65\xaf\xda\x40\x1b\x6f\xa5\x4d\x6e\xaf\x86\x0c\xe2\x01\xf4\x7b\xc4\x02\x43\x36\xb1\xbb\x3a\x69\x75\x20\xa9\x78\xf6\x0a\xbb\x60\xf5\xb4\x23\x30\x69\xb7\x66\x49\xb6\x8b\x87\x7a\xb7\x4f\x6b\x2b\xf8\xeb\x98\x44\x8d\x13\x34\x3b\x60\x56\x09\xd4\x1e\x80\xbf\x5c\xb6\x23\xdd\x20\x27\x4a\x37\x05\x46\x65\xde\x60\x4e\x0e\xad\x8f\x39\xcf\x6c\xd4\xf6\xdd\x61\x59\x9e\x8b\xeb\xed\xe1\x76\x75\xb0\x2f\xef\xba\x3c\xa8\x52\x08\xcc\x20\xa5\xec\x38\x98\xcb\x32\x0a\x1f\x07\x33\x98\x7b\x5e\x8d\x0f\x0e\xc3\xbc\x0f\xd7\x73\xcf\xf3\xfe\x0f\x00\x00\xff\xff\xba\xb1\x44\x27\x02\x09\x00\x00"

func db20170903102708_campaignSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170903102708_campaignSql,
		"db/20170903102708_campaign.sql",
	)
}

func db20170903102708_campaignSql() (*asset, error) {
	bytes, err := db20170903102708_campaignSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170903102708_campaign.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20170829140330_time.sql": db20170829140330_timeSql,
	"db/20170903102708_campaign.sql": db20170903102708_campaignSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20170829140330_time.sql": &bintree{db20170829140330_timeSql, map[string]*bintree{}},
		"20170903102708_campaign.sql": &bintree{db20170903102708_campaignSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

