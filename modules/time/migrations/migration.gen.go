// Code generated by go-bindata.
// sources:
// db/20180325063758_times.sql
// db/20180325064133_seed.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20180325063758_timesSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\xb1\x6e\xdb\x30\x14\xdc\xf9\x15\xb7\x45\x46\x13\xa0\xdd\x0a\x18\x19\x18\xe9\xd9\x25\xaa\x50\x29\x45\x01\xce\x44\x31\x16\x53\xd3\xb1\x25\x43\xa6\x91\xe4\xef\x0b\x45\x71\x15\x20\x85\xe2\xa1\x28\x3a\x8a\xba\x7b\xf7\xde\x3b\xf2\xd8\xc5\x05\x3e\x6d\xfd\xcf\xd6\x06\x87\x62\xd7\x7d\xe6\x3f\x52\xf8\x1a\x7b\xb7\x0c\xbe\xa9\x71\x56\xec\xce\xe0\xf7\x70\x4f\x6e\x79\x08\xae\xc2\xe3\xca\xd5\x08\x2b\xbf\x47\xcf\xeb\x40\x7e\x0f\xbb\xdb\x6d\xbc\xab\x58\xac\x88\x6b\x82\xe6\x57\x29\x41\xcc\x20\x33\x0d\x5a\x88\x5c\xe7\x28\x2b\x1b\x9c\x09\xf6\x6e\xe3\x4a\x44\xac\xf4\x55\x09\x21\x75\xf4\xe5\xf3\x04\x85\xcc\xc5\x5c\x52\xf2\x82\x97\x45\x9a\x82\x17\x3a\x33\x42\xc6\x8a\xae\x49\xea\x73\x56\x3e\x3b\xdb\x8e\x10\xce\x59\xb9\x6d\xea\xb0\x1a\x87\x54\xf6\x79\x1c\xb0\x36\x1f\xeb\xac\xcd\x09\x4a\x6b\xf3\xa1\x96\x7b\x0a\xad\x2d\xa1\x69\xf1\x3a\x73\x42\x33\x5e\xa4\xc7\xff\x37\x4a\x5c\x73\x75\x8b\xef\x74\x8b\xa8\xdb\xd6\x64\xc2\x48\xce\x85\x24\x5c\x42\xd4\x75\x93\x5c\xb1\x23\x23\xfe\xc6\x15\x8f\x35\x29\xe4\xa4\x71\x89\x43\xb8\xff\x3a\x65\xa3\x6e\xac\x9a\x43\xfb\xbf\xbb\xd1\xf5\xf8\x27\xc4\xfb\x65\xfd\x53\xe3\x5e\x2e\xf2\xe8\xc2\xfe\xa6\x7b\x42\x26\xb4\x40\x6f\x97\xdf\x3a\x33\x3c\x23\xe3\x2b\x73\xff\xc0\x80\x4c\x62\xb0\x13\xd1\x6b\x7f\x93\x29\x63\x3c\xed\xca\xf6\x17\x60\x80\x30\x80\x27\x09\xe2\x4c\xe6\x5a\x71\x21\xf5\x58\xf9\x59\xa6\x48\xcc\x65\x3f\xc9\xb1\x34\x14\xcd\x48\x91\x8c\x29\xc7\xc0\x40\xd4\xab\xbe\x8d\x95\xa4\x79\xac\x8f\xc1\xf2\x3b\x55\xba\xc3\x93\x72\xa5\x6d\x36\x1b\x57\xe1\xce\x2e\x1f\x58\xa2\xb2\x9b\x77\xa3\x4c\xdf\x1e\x0f\x9d\x4c\x19\xfb\x15\x00\x00\xff\xff\x41\x24\x62\x9a\xdd\x04\x00\x00"

func db20180325063758_timesSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325063758_timesSql,
		"db/20180325063758_times.sql",
	)
}

func db20180325063758_timesSql() (*asset, error) {
	bytes, err := db20180325063758_timesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325063758_times.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180325064133_seedSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\x31\x0a\x02\x31\x14\x04\xd0\xfe\x9f\x62\xba\x2d\x64\x6f\x61\x69\x23\xb2\x07\x88\xc9\xe0\x7e\x8c\x49\xd8\xff\x25\x1e\x5f\x82\x28\xd8\x6d\x39\xc3\xcc\x93\x79\xc6\xe1\xa1\xb7\x2d\x38\xb1\xb4\x11\x2f\xe7\x13\xb4\xc0\x18\x5d\x6b\xc1\xb4\xb4\x09\x6a\xe0\x8b\xf1\xe9\x4c\xe8\x2b\x0b\x7c\x55\xc3\xe7\x37\x46\x6a\x08\xad\x65\x65\x12\xf9\x23\x8f\xb5\x97\x2f\xfa\x13\x47\xb9\xcb\xdc\x6a\xce\x4c\xb8\x86\x78\x17\x91\x77\x00\x00\x00\xff\xff\x45\xac\x97\x00\xac\x00\x00\x00"

func db20180325064133_seedSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325064133_seedSql,
		"db/20180325064133_seed.sql",
	)
}

func db20180325064133_seedSql() (*asset, error) {
	bytes, err := db20180325064133_seedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325064133_seed.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20180325063758_times.sql": db20180325063758_timesSql,
	"db/20180325064133_seed.sql":  db20180325064133_seedSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20180325063758_times.sql": &bintree{db20180325063758_timesSql, map[string]*bintree{}},
		"20180325064133_seed.sql":  &bintree{db20180325064133_seedSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
