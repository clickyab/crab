// Code generated by go-bindata.
// sources:
// db/20180325060232_users.sql
// db/20180325061015_roles.sql
// db/20180325073312_role_seed.sql
// db/20180423080834_audit_logs.sql
// db/20180425142843_fixssn.sql
// db/20180426105326_addbalance.sql
// db/20180506081006_add_to_whitelabel_user_perm.sql
// db/20180506124131_advantage.sql
// db/20180506133103_fullname_virtual.sql
// db/20180507054057_user_list_perm.sql
// db/20180507070211_adminperm.sql
// db/20180515071142_impersonate_perm.sql
// db/20180519110201_super_admmin_role.sql
// db/20180519144035_god_perm.sql
// db/20180520060223_user_detail_perm.sql
// db/20180530124433_domainless.sql
// db/20180530125151_superglobal.sql
// db/20180530125342_rols.sql
// db/20180530130551_roleseed.sql
// db/20180530131001_permseed.sql
// db/20180530141920_role.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20180325060232_usersSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x51\x6f\xa3\x38\x10\x7e\xf7\xaf\x98\xb7\x04\x5d\x56\x6a\x4f\xd7\xd3\x9d\xaa\x7d\x60\xc1\xed\xa2\x4b\x9c\x2e\x98\x53\xf7\x09\x5c\x3c\x69\xad\x12\x1b\xd9\xa6\xdd\xfd\xf7\x27\x42\x92\x42\x9b\x6c\x73\x7d\x0a\x99\xf9\x06\x3e\x7f\x33\xdf\x98\x7c\xfa\x04\xbf\xad\xd5\xbd\x15\x1e\x21\x6f\xba\xbf\xd9\xb7\x39\x28\x0d\x0e\x2b\xaf\x8c\x86\x49\xde\x4c\x40\x39\xc0\x1f\x58\xb5\x1e\x25\x3c\x3f\xa0\x06\xff\xa0\x1c\xf4\x75\x1d\x48\x39\x10\x4d\x53\x2b\x94\x24\x4a\x69\xc8\x29\xf0\xf0\xcb\x9c\x42\x72\x05\x6c\xc9\x81\xde\x26\x19\xcf\xa0\x6c\x1d\x5a\x57\xc2\x94\x94\x4a\x96\x90\x30\x3e\x3d\x3f\x0b\x20\x67\x59\x72\xcd\x68\xbc\x81\xb2\x7c\x3e\x87\x30\xe7\xcb\x22\x61\x51\x4a\x17\x94\xf1\x19\x29\x71\x2d\x54\x5d\xc2\xbf\x61\x1a\x7d\x0d\xd3\xe9\xc5\x59\xb0\x07\xcf\x48\xd9\x08\xe7\x9e\x8d\x95\x2f\x80\x3f\xc7\x00\x51\x55\xe8\x5c\xe1\xcd\x23\xea\xe3\xa0\x27\xe1\x85\x7d\x49\x9f\xff\x7d\x1e\xf4\x74\x62\x7a\x15\xe6\xf3\x3d\xd0\x79\xe1\x5b\x57\x02\x65\xf9\x62\x3a\xb1\x78\xaf\x9c\x47\x8b\x72\x32\x83\xc9\x5d\x6d\xaa\xc7\xfe\x51\x54\x5e\x3d\xe1\xe4\xe5\x1b\xfb\xf7\x8c\x6a\x48\x69\x6a\x59\xbc\x3d\xc2\xef\x17\x17\x87\x3f\x5f\x29\xff\xb3\x38\xac\xdf\x21\xb2\x4e\x9f\x82\x84\x68\xb9\xe8\xb4\x86\x49\x66\x2a\x25\x6a\xc8\xb0\x6a\xad\xf2\x3f\x81\xb5\xeb\x3b\xb4\x1d\xcf\x5a\x68\x59\xd4\x4a\xe3\x80\xe4\xd9\x11\x8e\x58\xd7\xcd\x83\x39\x05\xda\x18\xe7\x45\x5d\x54\x46\x0e\xc0\xe7\x47\xc0\x2b\x65\x9d\x2f\xb4\x58\x0f\xb0\x7f\x8c\xdb\x58\x8b\xf7\x10\x42\x4a\x8b\xce\x9d\x20\xf5\x3d\x6a\x89\x76\xd7\xe9\xb5\xa8\xb1\x6b\xec\x0a\x77\x4f\xda\xf8\xc2\x35\x58\xa9\x95\x42\x39\x19\x7f\xc4\x7b\xab\xee\x5a\x8f\xae\x04\x4e\x6f\xf9\x61\x99\x2c\x0a\x8f\xb2\x10\xbe\x84\x38\xe4\x94\x27\x0b\xfa\x76\x5c\xa2\x3c\x4d\x29\xe3\x45\x97\xcd\x78\xb8\xb8\x99\x91\xb2\x6d\xe4\xc7\x2a\x6f\xd2\x64\x11\xa6\xdf\xe1\x1f\xfa\x1d\xa6\x9d\x0d\x83\x19\xc9\x59\xf2\x2d\xa7\x90\xb0\x98\xde\x6e\x4d\x5a\x6c\x1c\x57\xb4\x4a\x4b\xfc\x51\xc2\x74\xe7\xc0\x30\x8b\x8e\x14\x6c\xcc\x35\x28\x18\x7b\xee\x50\xdd\x66\x34\xa7\xfd\x4f\x97\x0f\x08\x65\xd7\x09\xa3\xf0\x19\x12\xad\x4d\xfc\x85\xec\xcf\xf1\x35\x4c\xc3\x88\xd3\x14\x32\xca\xe1\x33\xb4\x7e\xf5\xd7\x25\x21\xbf\xdc\x35\x95\xb1\x8d\xe9\xd7\xd3\x66\xe5\x40\x4f\xf4\x88\x73\xf6\x8d\x03\x28\x6b\xbc\x17\xf5\xab\x11\x1a\x6f\x9c\x3d\x68\x67\xe4\x57\xc0\xb7\xad\x06\x28\xb1\x32\xda\xac\x55\xf5\x6a\xd4\x8f\x16\x8c\x3b\xb5\xe3\x1e\x04\x04\xe0\xb5\x4e\x00\xef\x28\xf5\x2b\xa1\x84\x7c\x52\xce\xd8\xff\x29\xd2\xb6\xea\x04\xa4\x34\x6b\xa1\xf4\x09\xc0\x0f\xbb\xe1\x98\x56\xb3\x11\xcd\xd9\x90\xca\xc7\x64\x0c\xe7\x5d\xa8\x57\x71\x38\x5f\x04\x20\x8c\x63\x88\x96\x2c\xe3\x69\x98\x30\x3e\xca\x16\x5b\x3e\xc5\xea\x91\x5c\x2d\x53\x9a\x5c\xb3\x9e\xe8\x36\x1e\x40\x4a\xaf\x68\x4a\x59\x44\x33\xd8\x98\x09\xa6\x4a\x06\x2f\x6d\xeb\xfd\xb2\x41\x6f\x97\x7f\xf7\x2a\x80\x25\xdb\xc1\xb7\xe1\xae\x66\x78\xa1\xc7\xe6\x59\xef\xae\xf4\xfd\x7d\xde\x05\x4f\xba\xd1\xad\xa9\x6b\x94\x70\x27\xaa\x47\x12\xa7\xcb\x9b\x03\x07\xbf\x1c\x26\x76\x83\x34\x0a\x6e\x08\x5e\x12\xf2\x5f\x00\x00\x00\xff\xff\x82\x30\x0b\x7c\x69\x08\x00\x00"

func db20180325060232_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325060232_usersSql,
		"db/20180325060232_users.sql",
	)
}

func db20180325060232_usersSql() (*asset, error) {
	bytes, err := db20180325060232_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325060232_users.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180325061015_rolesSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x51\x6f\x9b\x3c\x14\x7d\xf7\xaf\xb8\x6f\x01\x7d\x54\xea\x57\xad\xd3\xa4\xaa\x0f\x2e\x38\xad\x35\x62\x32\x63\xa6\xf6\x09\x53\x70\x5b\xab\x04\x10\x26\x6b\x7f\xfe\x04\x24\xb0\x34\xe9\x9a\x66\xdd\xc3\x5e\x10\xf8\x9e\x7b\xcf\xbd\xe7\x18\x5d\x74\x74\x04\xff\x2d\xf4\x7d\x9d\x34\x0a\xa2\xaa\xfd\x0c\xbf\xf9\xa0\x0b\x30\x2a\x6d\x74\x59\xc0\x24\xaa\x26\xa0\x0d\xa8\x67\x95\x2e\x1b\x95\xc1\xd3\x83\x2a\xa0\x79\xd0\x06\xfa\xbc\x16\xa4\x0d\x24\x55\x95\x6b\x95\x21\x97\x13\x2c\x08\x08\x7c\xe1\x13\xa0\x53\x60\x81\x00\x72\x4d\x43\x11\x82\xac\xcb\x5c\x19\x09\x16\x92\x3a\x93\x40\x99\xb0\xfe\x3f\xb6\x21\x62\x21\xbd\x64\xc4\xeb\xa0\x2c\xf2\x7d\xc0\x91\x08\x62\xca\x5c\x4e\x66\x84\x09\x07\xc9\x22\x59\x28\x09\xdf\x31\x77\xaf\x30\xb7\x3e\x1d\xdb\x03\xd6\x41\x32\x53\x26\xad\x75\xd5\x36\x32\x62\x4e\x4e\x4f\xed\xbe\x98\x47\xa6\x38\xf2\x47\x74\xb9\x48\x74\x11\xff\xb6\x01\x07\xc9\xb4\x56\x49\xa3\xb2\x38\x69\x24\x78\x58\x10\x41\x67\x64\x6c\x70\x5d\xd3\x8d\x38\x27\x4c\xc4\x6d\x34\x14\x78\x36\x77\x90\x5c\x56\xd9\x21\x99\x10\x30\x88\xe6\x6d\xc2\xae\xaa\x73\x4e\x67\x98\xdf\xc0\x57\x72\x03\x56\xab\x9e\x6d\x23\xc2\x2e\x29\x23\x70\x0e\xb4\x28\x4a\xef\x02\x0d\xa5\xaf\x30\xc7\xae\x20\x1c\x42\x22\xe0\x1c\x96\xcd\xdd\x97\x33\xf4\xa6\x31\x71\xa5\xea\x85\x36\xa6\x93\xf1\xfd\x16\x75\x25\xde\x52\xb5\xa5\x18\x3d\xfa\xbc\xe9\xa3\x49\xcb\x4a\x49\x20\x2c\x9a\x59\x13\xa3\xf2\xbb\x89\x03\x93\xfb\xbc\xbc\x4d\xf2\x89\xfd\x4f\x79\xe3\x20\xca\x3c\x72\xbd\xa5\x6b\xdc\xfd\x00\xb1\xce\x9e\x25\x58\xa3\x62\x38\x74\xff\x82\x9d\x4b\xa3\xea\xce\xc8\xf6\xe5\x4d\x67\xf6\xb2\xef\x60\xe1\x37\x25\x5a\x37\xe4\xc0\x40\xfb\xfe\xf9\xb1\xdf\x1e\xf5\xe3\x27\xd9\x0f\x6d\xca\xda\x20\x00\xec\x79\xe0\x06\x2c\x14\x1c\x53\x26\xa0\x4a\x6a\x55\x34\x27\x9d\x18\xdd\xa3\x55\x3f\xbe\x7b\x44\xd3\x80\x13\x7a\xc9\xfa\x8e\x56\x0d\xd9\xc0\xc9\x94\x70\xc2\x5c\x12\x42\x07\x06\x4b\x67\xf6\xde\x64\xeb\xc8\xeb\x44\x2b\xc4\xde\x5c\x83\x91\xdb\x64\x43\xe8\x83\xc6\x7a\x71\x55\x5f\x21\xdc\x71\x97\xb7\x68\x57\x9e\x6e\xd0\x76\xe0\x83\x27\xfc\x18\xaa\x3d\x8c\xeb\x97\xc3\x4e\xaa\x61\x6f\x6c\x90\xad\x12\x5e\x9b\x6c\x07\x57\x3f\xcb\x9f\x12\xfd\xba\xb6\xbd\xf2\xa9\x58\x2f\xee\x61\x6b\xb7\x87\x7b\xed\xed\xba\xcc\x73\x95\xc1\x6d\x92\x3e\x22\x8f\x07\xf3\x97\xbe\x9c\x6d\x9d\x8e\x77\x60\x2b\x66\xce\x10\xfa\x19\x00\x00\xff\xff\x31\x26\x30\xf8\x53\x08\x00\x00"

func db20180325061015_rolesSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325061015_rolesSql,
		"db/20180325061015_roles.sql",
	)
}

func db20180325061015_rolesSql() (*asset, error) {
	bytes, err := db20180325061015_rolesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325061015_roles.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180325073312_role_seedSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xcb\x4e\xc3\x30\x10\x45\xf7\xf9\x8a\xbb\x4b\x23\xd2\x45\xbb\xed\xaa\x52\x8d\x88\x14\x52\x91\x07\x2c\x91\xc9\x0c\x74\x44\x62\x5b\xb6\x4b\xf9\x7c\xe4\xf2\x10\xec\x2a\xb1\xbc\xa3\xb9\x73\x34\x27\x5b\x2e\x71\x35\xcb\x8b\xd7\x91\x31\xb8\x14\xbb\xbb\x1a\x62\x10\x78\x8c\x62\x0d\xf2\xc1\xe5\x90\x00\x7e\xe7\xf1\x18\x99\x70\x3a\xb0\x41\x3c\x48\xc0\x67\x2f\x2d\x49\x80\x76\x6e\x12\xa6\xac\x6a\x3a\xd5\xf6\xa8\x9a\x7e\x0f\x6f\x27\x0e\x58\x08\x95\x46\xcf\x5c\x82\x38\x8c\x5e\x5c\xaa\x94\x20\x3b\x6b\x31\x8f\x42\x05\xee\xb7\xf5\xa0\x3a\x2c\x56\x65\xbe\xa5\x37\xf6\x51\x02\xfb\xfc\x77\x38\x9f\xc2\x82\xf8\x59\x1f\xa7\x58\xe4\xe5\xaa\xd8\xfc\x0b\xb5\xbe\x1c\xb5\x2e\x36\xd9\x1f\x4f\x3b\x7b\x32\xdf\xa6\x7e\x34\xa5\xe1\x45\xa2\xbc\x9d\x26\x26\x3c\xe9\xf1\x35\xdb\xa9\x5a\xf5\x0a\xd7\xed\xfe\xf6\xeb\x83\x87\x1b\xd5\x2a\x08\xa1\x6a\x92\x8f\x33\xfb\x23\x00\x00\xff\xff\x94\x44\x24\x59\xa5\x01\x00\x00"

func db20180325073312_role_seedSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325073312_role_seedSql,
		"db/20180325073312_role_seed.sql",
	)
}

func db20180325073312_role_seedSql() (*asset, error) {
	bytes, err := db20180325073312_role_seedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325073312_role_seed.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180423080834_audit_logsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x5f\x6f\x9b\x3e\x14\x7d\xe7\x53\xdc\x37\x40\xbf\x56\x6a\x7f\x52\xa7\x49\x55\x1f\x68\x70\x3a\xb4\xd4\xe9\xf8\x33\xad\x4f\xe0\xe2\xdb\xd4\x2a\x60\x84\x9d\xb5\x1f\x7f\x72\x08\x09\x09\x69\x96\x64\xd3\xde\x92\x7b\xcf\xf5\xb9\x3e\x3e\xbe\xc6\x3a\x3f\x87\xff\x4a\x31\x6b\x98\x46\x48\x6a\xf3\x37\xfa\x36\x01\x51\x81\xc2\x5c\x0b\x59\x81\x9d\xd4\x36\x08\x05\xf8\x8e\xf9\x5c\x23\x87\xb7\x17\xac\x40\xbf\x08\x05\x6d\x9d\x01\x09\x05\xac\xae\x0b\x81\xdc\xf2\xc3\xe9\x03\xc4\xde\xed\x84\x40\x30\x06\xf2\x23\x88\xe2\x08\x32\x36\xe7\x42\xa7\x85\x9c\xa9\xec\xda\xb2\x46\x21\xf1\x62\xb2\x44\xf5\x73\xe0\x58\x00\x99\xe0\x19\x04\x34\x76\x2e\x2f\x5c\x48\x68\x14\xdc\x51\xe2\x03\x9d\xc6\x40\x93\xc9\x04\xbc\x24\x9e\xa6\x01\x1d\x85\xe4\x9e\xd0\xf8\xcc\x14\x70\x59\x32\x51\xa5\xa6\x4e\x54\xda\xb9\xbc\xec\xd5\xf9\x64\xec\x25\x93\xb6\x76\x01\x9e\x2b\x6c\x8e\x81\xd6\xd8\x94\x19\x7c\xf7\xc2\xd1\x17\x2f\x74\x3e\x5d\xb8\xab\x56\x16\x18\x93\x4e\x55\x2e\x6b\xcc\x80\xd0\xe4\xde\xb1\x15\x16\xcf\xf6\x19\xd8\xb3\x42\x3e\xb1\xc2\xde\xc2\xb3\x85\xac\x1d\x56\x54\x0a\x1b\x6d\xd0\xf3\x9a\x33\x8d\xe6\x17\xc7\x02\x35\xda\xee\xb0\x1f\xcd\x9a\x19\xea\xb4\x94\x1c\x8b\x0c\x7e\xb2\x26\x7f\x61\x8d\xf3\xff\xd5\xd5\x16\xc7\x12\x77\xd8\x26\xe5\x5b\x75\xb0\x20\xa2\xac\xb1\x51\xb2\x62\x1a\x33\x88\x03\xfa\xb8\x38\xa6\x1d\x15\x17\x5b\x70\x79\x28\x03\x47\x95\x37\xa2\x6e\x35\xd2\xf8\xae\x17\xd1\xbc\x41\xa6\x91\xa7\x4c\x67\xa0\x45\x89\x4a\xb3\xb2\xde\xdc\x73\xab\xdf\x00\x62\x1c\xb3\x4d\xf2\x10\x06\xf7\x5e\xf8\x08\x5f\xc9\x23\x38\xc6\x6d\xae\x6b\x01\x10\x7a\x17\x50\x02\x37\x10\x54\x95\xf4\x6f\x2d\x58\xd5\x99\x83\xf7\x46\x31\x09\x21\x22\x31\xdc\xc0\x5c\x3f\x7f\xbe\xb6\x7e\xe7\xf4\x94\xa3\x66\xa2\xd8\x67\xf8\x15\x64\xed\xfb\x81\x42\xfb\x7c\xbf\x5e\x68\x6f\x69\x2b\x2c\xd3\xec\x1f\x2a\x6a\xb9\xc7\x0b\xea\x4d\x4c\xa8\x15\x69\x3d\x14\x2c\x00\xcf\xf7\x61\x34\xa5\x51\x1c\x7a\x01\x8d\x7b\xb9\x74\x75\xf3\xd3\xe7\x57\x6b\x3c\x0d\x49\x70\x47\xdb\x2e\x56\x19\x17\x42\x32\x26\x21\xa1\x23\x12\x41\x1b\x55\xe0\x08\xee\x9e\xc6\xb8\x1c\x1f\x03\xbe\x65\x7c\x83\xcd\xc4\xfe\x84\xab\xbb\x9a\x03\xb2\x2e\xf1\x57\xd9\xb6\x6e\xeb\x80\x74\x2b\x7f\x24\x77\xe7\xf5\x3d\x2d\x74\x90\xb4\x8d\xec\x68\xa1\x6f\xf8\x0d\xfe\xf5\x36\xba\x26\xfa\x0f\x9b\x2f\xdf\xaa\xee\x69\x5b\xbd\x6b\x26\x78\xd0\xcb\xd6\xc8\xa2\x40\x0e\x4f\x2c\x7f\xfd\x40\x56\x58\x8c\x82\x7e\xa7\x1f\x58\xf4\xfa\x94\x05\xd6\x8e\x3b\xa9\xbc\x67\xa2\x93\xea\x87\xb6\xf8\x60\x99\xee\xf8\xf6\xac\xb6\xeb\x84\x37\x27\xe9\xe6\x97\xc2\xce\xc4\x7a\xb0\xfe\x0a\x00\x00\xff\xff\x6e\xf8\x03\x87\xbe\x08\x00\x00"

func db20180423080834_audit_logsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180423080834_audit_logsSql,
		"db/20180423080834_audit_logs.sql",
	)
}

func db20180423080834_audit_logsSql() (*asset, error) {
	bytes, err := db20180423080834_audit_logsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180423080834_audit_logs.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180425142843_fixssnSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xce\xc1\x4a\xc3\x40\x10\xc6\xf1\x7b\x9e\xe2\xbb\x45\x91\x82\x9e\x8b\x87\xd8\xac\x1a\xd8\x6c\xb5\xbb\x7b\xf0\x98\x6e\x06\x3b\x98\x6e\xc2\xce\x86\xea\xdb\x4b\x90\x0a\xde\x8a\xc7\x99\xf9\x0f\xfc\x8a\xd5\x0a\x37\x47\x7e\x4f\x5d\x26\xf8\x69\x19\xed\xab\x06\x47\x08\x85\xcc\x63\x44\xe9\xa7\x12\x2c\xa0\x4f\x0a\x73\xa6\x1e\xa7\x03\x45\xe4\x03\x0b\x7e\xfe\x96\x88\x05\xdd\x34\x0d\x4c\x7d\xe1\x5f\xea\xca\x29\xcc\x42\x49\x60\x95\x83\x48\xbc\x37\x5e\xeb\x75\x51\x69\xa7\x76\x70\xd5\x83\x3e\xdf\xdb\x6d\xdd\x3c\xbe\x2d\x09\x36\xcf\xd5\xee\xea\xee\xf6\x1a\x9b\x6d\xdb\x2a\xe3\x50\xda\x31\x70\x37\xc0\x52\x98\x13\xe7\x2f\x98\xf9\xb8\xa7\x54\xae\x8b\x3f\xe8\x7a\x3c\xc5\x33\xfb\xd7\xbc\x2c\x2f\x52\xa7\x71\x18\xa8\xc7\xbe\x0b\x1f\xff\x96\x37\xc6\xc1\x1b\xdb\x3c\x19\x55\x5f\xa2\xff\x0e\x00\x00\xff\xff\x56\xab\xd5\xa5\x74\x01\x00\x00"

func db20180425142843_fixssnSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180425142843_fixssnSql,
		"db/20180425142843_fixssn.sql",
	)
}

func db20180425142843_fixssnSql() (*asset, error) {
	bytes, err := db20180425142843_fixssnSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180425142843_fixssn.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180426105326_addbalanceSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\x41\x4a\xc5\x30\x18\x04\xe0\x7d\x4e\x31\xbb\xb7\x90\x07\xee\xbb\x8a\x26\x4a\x21\xa6\xda\x26\x07\x48\xd3\x1f\x1b\x8c\x69\x68\x52\xea\xf1\xa5\x48\x05\xc1\xc5\x5b\xce\x30\x03\x1f\xbb\x5e\x71\xf7\x19\xde\x57\x57\x09\x36\x1f\x71\x78\x53\x08\x09\x85\x7c\x0d\x4b\xc2\xc5\xe6\x0b\x42\x01\x7d\x91\xdf\x2a\x4d\xd8\x67\x4a\xa8\x73\x28\xf8\xf9\x1d\xa3\x50\xe0\x72\x8e\x81\x26\xc6\x95\x91\x3d\x0c\x7f\x50\x12\x5b\xa1\xb5\x80\x0b\x81\xd1\x45\x97\x3c\xa1\xd5\x06\x56\x0f\xed\xb3\x96\x02\x42\x3e\x71\xab\x0c\xee\xa1\x3b\x03\x6d\x95\x6a\xd8\x1f\x90\x58\xf6\x74\x92\x7e\x3d\x47\x79\x93\x68\x5d\x62\xa4\x09\xa3\xf3\x1f\xff\xa8\x44\xdf\xbd\xe2\xb1\x53\xf6\x45\xe3\xe4\x35\x8c\x7d\x07\x00\x00\xff\xff\x63\x13\xeb\x9c\x11\x01\x00\x00"

func db20180426105326_addbalanceSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180426105326_addbalanceSql,
		"db/20180426105326_addbalance.sql",
	)
}

func db20180426105326_addbalanceSql() (*asset, error) {
	bytes, err := db20180426105326_addbalanceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180426105326_addbalance.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180506081006_add_to_whitelabel_user_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x4d\x6f\xe2\x30\x18\x84\xef\xf9\x15\xa3\x5c\x92\x68\xcd\x61\x17\x6e\x9c\x90\xc8\xaa\x91\x68\x50\xf9\x68\x8f\xc1\xc4\x6f\xe1\x55\x9d\xd8\x8a\x8d\xe8\xcf\xaf\x1c\x4a\xd5\x4f\x95\xaa\x27\xcb\xa3\x19\x8f\x1e\x4f\x34\x18\xe0\x4f\xc3\xbb\x4e\x7a\xc2\xda\x86\xeb\xf2\x66\x06\x6e\xe1\xa8\xf6\x6c\x5a\x24\x6b\x9b\x80\x1d\xe8\x91\xea\x83\x27\x85\xe3\x9e\x5a\xf8\x3d\x3b\x9c\x72\xc1\xc4\x0e\xd2\x5a\xcd\xa4\xa2\xa2\x5c\xe6\x8b\x15\x8a\x72\x35\x47\x67\x34\x39\xa4\xac\x44\x2b\x1b\x12\x50\xe4\xea\x8e\x6d\x88\x08\x28\xd3\x48\x6e\x2b\x56\x19\x6e\x27\xb3\x75\xbe\x44\x3a\x14\xc9\x44\x35\xdc\x26\xcf\x67\xff\x00\x52\x45\xf7\xf2\xa0\x7d\x96\x88\xbf\xd9\xf8\x57\x05\xa3\xef\x0a\xfe\x65\xe3\xe8\x43\x43\x65\xa9\x6b\xd8\xb9\x40\x9a\xf6\x02\x2b\x81\x20\x0a\xb8\xda\x58\x7a\x4d\x10\x4b\xa5\x2a\x6f\xaa\xe3\x9e\x3d\x69\xb9\x25\x5d\x1d\x1c\x75\xb1\x88\x77\xda\x6c\xa5\x8e\x3f\x41\xf8\x41\xc1\xe8\xa2\x82\x37\xb3\x4e\xcd\xb1\x3d\x0f\xfb\xb2\x6a\x10\x2f\xda\xb5\x33\x5a\x93\xc2\x56\xd6\x0f\xd1\x34\x9f\xe5\xab\x1c\xf8\xbf\x98\x5f\x63\xd3\x7f\xfe\x06\x77\x57\xf9\x22\x07\x2b\x14\x65\x3a\x14\xa3\x6c\x7c\xb6\xf5\xae\xf7\x78\x27\x77\x10\x50\x94\x48\xbf\x82\x09\x0c\xd1\x53\x00\x00\x00\xff\xff\xbe\xca\x64\xb4\x9d\x02\x00\x00"

func db20180506081006_add_to_whitelabel_user_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180506081006_add_to_whitelabel_user_permSql,
		"db/20180506081006_add_to_whitelabel_user_perm.sql",
	)
}

func db20180506081006_add_to_whitelabel_user_permSql() (*asset, error) {
	bytes, err := db20180506081006_add_to_whitelabel_user_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180506081006_add_to_whitelabel_user_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180506124131_advantageSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xc1\x4a\xc4\x30\x18\x04\xe0\x7b\x9e\x62\x6e\x3d\x48\xc1\x7b\x4f\x91\xd4\x53\x68\xb5\x26\x0f\x10\x9b\x9f\xf6\xc7\xfa\x37\x34\xa9\xf5\xf1\xa5\x88\x2e\x0b\x7b\xd8\xe3\x0c\x33\xf0\xa9\xba\xc6\xc3\x27\x4f\x5b\x28\x04\x9f\xce\xf8\xf6\x6a\xc1\x82\x4c\x63\xe1\x55\x50\xf9\x54\x81\x33\xe8\x9b\xc6\xbd\x50\xc4\x31\x93\xa0\xcc\x9c\xf1\xfb\x3b\x47\x9c\x11\x52\x5a\x98\xa2\xd2\xd6\xb5\x03\x9c\x7e\xb2\x2d\xf6\x4c\x5b\x86\x36\x06\x21\x7e\x05\x29\x61\x22\xb0\x14\xec\x92\x79\x12\x8a\x30\xed\xb3\xf6\xd6\xe1\x11\x5d\xef\xd0\x79\x6b\x1b\x75\x45\x32\xeb\x21\x7f\xa8\x7f\xd1\x59\xde\x65\xda\xd6\x65\xa1\x88\xf7\x30\x7e\xdc\x70\x99\xa1\x7f\xb9\xc0\x1a\xa5\x7e\x02\x00\x00\xff\xff\xeb\x61\xea\x02\x0d\x01\x00\x00"

func db20180506124131_advantageSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180506124131_advantageSql,
		"db/20180506124131_advantage.sql",
	)
}

func db20180506124131_advantageSql() (*asset, error) {
	bytes, err := db20180506124131_advantageSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180506124131_advantage.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180506133103_fullname_virtualSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\xcd\x4a\xc3\x40\x14\x05\xe0\x7d\x9e\xe2\xd0\x4d\x5a\x6c\xa1\xb8\xed\xea\x9a\x8c\x3f\x30\x4d\x74\x32\xa9\xb8\x92\x31\x99\xd8\x8b\xd3\x24\x64\x26\xd6\xc7\x97\xf8\x53\x11\x5c\xb8\x3c\x97\x7b\xe0\x7c\xd1\x6a\x85\xb3\x03\x3f\x0f\x26\x58\x94\xfd\x14\x8b\x3b\x09\x6e\xe1\x6d\x15\xb8\x6b\x11\x97\x7d\x0c\xf6\xb0\x6f\xb6\x1a\x83\xad\x71\xdc\xdb\x16\x61\xcf\x1e\x9f\xbd\xe9\x89\x3d\x4c\xdf\x3b\xb6\x75\x44\x52\x0b\x05\x4d\x17\x52\x60\xf4\x76\xf0\xa0\x34\x45\x33\x3a\xf7\xd8\x9a\x83\xc5\x8e\x54\x72\x4d\x6a\x7e\xbe\x5e\x2f\x80\x2b\x91\x09\x45\x5a\xa4\x20\x79\x4f\x0f\x05\xa8\xc0\x3c\xc9\xb3\x84\xf4\xbc\xe1\xc1\x87\x8f\xd2\x72\x86\xd9\x12\xce\x7c\xc5\xc5\x02\xbb\x1b\xa5\x4b\x92\x48\xf2\xed\x56\x64\x1a\x31\x87\x69\xc4\x2b\x0f\x61\x34\x0e\x0d\x5b\x57\xc7\xa0\xcb\x69\xcb\xa9\xb7\x89\x7e\x71\xd3\xee\xd8\x7e\x83\x4f\xda\xe9\xf8\x2f\xef\xd0\x39\x67\x6b\x3c\x99\xea\xe5\x0f\x73\xaa\xf2\x5b\x24\xb9\x2c\xb7\xd9\x8f\x7d\x13\xbd\x07\x00\x00\xff\xff\xfb\xbb\x6d\x55\x6f\x01\x00\x00"

func db20180506133103_fullname_virtualSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180506133103_fullname_virtualSql,
		"db/20180506133103_fullname_virtual.sql",
	)
}

func db20180506133103_fullname_virtualSql() (*asset, error) {
	bytes, err := db20180506133103_fullname_virtualSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180506133103_fullname_virtual.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180507054057_user_list_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8f\x4f\x4b\xc3\x40\x10\xc5\xef\xf9\x14\x8f\x5c\x9a\x60\x7a\xd2\x5b\x4f\x42\x57\x0c\xc4\x14\xf3\x47\x8f\x25\xcd\x0e\xed\xe0\x76\x77\xd9\xd9\x52\x3f\xbe\x6c\x45\x51\x44\x10\x3c\xce\xe3\xcd\xe3\xf7\xcb\x96\x4b\x5c\x1d\x79\x1f\xa6\x48\x18\x7d\x3a\xfb\xc7\x06\x6c\x21\x34\x47\x76\x16\x8b\xd1\x2f\xc0\x02\x7a\xa5\xf9\x14\x49\xe3\x7c\x20\x8b\x78\x60\xc1\xfb\x5f\x2a\xb1\x60\xf2\xde\x30\xe9\x2c\xab\xdb\x5e\x75\x03\xea\x76\xd8\x20\x38\x43\x5b\x4f\xe1\xc8\x22\xa9\x57\x5c\x02\xd6\x15\x52\x58\x41\x66\xe7\xa9\xc4\xd3\x6d\x33\xaa\x1e\xc5\x75\x95\x9f\x84\xc2\xd6\xb0\xc4\xbc\xca\xf7\xc6\xed\x26\x93\x97\xab\xff\x6c\xde\xfc\xb6\xf9\x4d\x7d\xed\xce\xf6\x43\xfe\xd3\x3c\x85\x7f\x72\x0f\xce\x18\xd2\xd8\x4d\xf3\x4b\xb6\x56\x8d\x1a\x14\xee\xba\xcd\xc3\x0f\xd4\xe7\x7b\xd5\xa9\x0b\x26\xea\x16\xc5\x17\xb0\x72\xf5\x16\x00\x00\xff\xff\xb8\x5d\x9f\x75\x8a\x01\x00\x00"

func db20180507054057_user_list_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180507054057_user_list_permSql,
		"db/20180507054057_user_list_perm.sql",
	)
}

func db20180507054057_user_list_permSql() (*asset, error) {
	bytes, err := db20180507054057_user_list_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180507054057_user_list_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180507070211_adminpermSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x4f\x6b\x32\x31\x10\x87\xef\xfb\x29\x86\x5c\xd6\xe5\x8d\x87\xb7\x55\x2f\xd2\x83\x60\x4a\x05\xbb\x52\xff\xb4\xc7\x25\x26\xd3\x75\x68\x36\x09\x9b\x15\xdb\x6f\x5f\x62\xb5\x28\x2a\x58\xbc\x25\xc3\xcc\xc3\x33\xc9\x2f\x69\xb7\xe1\x5f\x45\x65\x2d\x1b\x84\x85\x8f\xd7\xd9\xcb\x18\xc8\x42\x40\xd5\x90\xb3\x90\x2e\x7c\x0a\x14\x00\x3f\x51\xad\x1b\xd4\xb0\x59\xa1\x85\x66\x45\x01\x7e\xe6\x62\x13\x05\x90\xde\x1b\x42\x9d\x8c\xf2\x99\x98\xce\x61\x94\xcf\x27\x50\x3b\x83\x01\x5a\xa4\xb9\x95\x15\x72\xd0\x18\x54\x4d\x3e\x8e\x70\xd0\xae\x92\x64\x0b\xd2\x19\xbc\x0e\xc6\x0b\x31\x83\x56\x97\xa7\x83\x12\xad\xfa\x4a\xf7\x87\x2d\x22\xe5\xff\xb3\xfe\x4d\xe0\xde\x25\xf0\x5d\xd6\x4f\x4e\xc8\x85\xc7\xba\xa2\x10\xe2\x66\xad\x6d\x81\x34\x87\x58\xe4\x10\x94\xf3\x78\x68\xcc\x94\xb4\x45\x25\xad\x2c\x91\x71\x16\xd0\xbc\xb3\x33\xb2\x7f\x40\xf6\x2e\x20\x6f\x61\xde\x73\x86\x9a\x9a\x62\x1d\xb0\x66\x9c\x95\xc6\x2d\xa5\xb9\xd1\xb3\x73\x89\x79\x94\xa9\xa1\xdb\xd8\x7d\xaa\x7e\x23\x15\x8b\x57\x85\xaa\x76\xc6\xa0\x86\xa5\x54\x1f\xc9\x50\x8c\xc5\x5c\xc0\xe3\x74\xf2\x7c\xa2\xfa\xf6\x24\xa6\x62\xab\xf9\x70\x20\x05\x83\x7c\x08\xbb\x25\x60\x94\xc7\x67\xe8\x64\xfd\xab\x41\x07\xbf\x70\x42\xea\xf2\xde\x19\x52\xd8\xcd\x1f\x35\x25\xc9\x77\x00\x00\x00\xff\xff\x8a\xd3\xbd\x43\x65\x03\x00\x00"

func db20180507070211_adminpermSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180507070211_adminpermSql,
		"db/20180507070211_adminperm.sql",
	)
}

func db20180507070211_adminpermSql() (*asset, error) {
	bytes, err := db20180507070211_adminpermSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180507070211_adminperm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180515071142_impersonate_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xbd\x6a\xc3\x30\x14\x85\x77\x3f\xc5\xc1\x8b\x13\xea\x4c\xcd\x16\x3a\x04\xac\x52\x83\xeb\x50\xff\xb4\x63\xa2\xd8\x97\xe4\x52\x59\x12\x92\x42\xfa\xf8\x45\xe9\x0f\x34\x4b\x0b\x1d\x75\x38\x3a\x7c\xf7\x4b\x16\x0b\xdc\x4c\x7c\x70\x32\x10\x7a\x1b\x9f\xed\x53\x05\xd6\xf0\x34\x04\x36\x1a\x59\x6f\x33\xb0\x07\xbd\xd1\x70\x0a\x34\xe2\x7c\x24\x8d\x70\x64\x8f\x8f\x7f\xb1\xc4\x1e\xd2\x5a\xc5\x34\x26\x49\x59\xb7\xa2\xe9\x50\xd6\xdd\x06\xce\x28\xda\x5a\x72\x13\x7b\x1f\x7b\xb3\x4b\xc0\x63\x8e\x18\xe6\xf0\x83\xb1\x34\xc7\xf3\xba\xea\x45\x8b\xd9\x6d\x9e\xf2\x64\xc9\x79\xa3\x65\xa0\xed\xc9\x93\x4b\xf3\xf4\xa0\xcc\x5e\xaa\x74\xbe\xfa\xcf\xf4\xf2\x97\xe9\x1f\x22\x0a\x73\xd6\x5f\x2a\xbe\x3d\xc4\xf0\x4f\x26\x9c\x51\x8a\x46\xec\xe5\xf0\x9a\x14\xa2\x12\x9d\xc0\x7d\xb3\x79\xc4\xee\x0a\x79\x87\x97\x07\xd1\x88\x0b\xef\x5d\x76\x4d\x97\x61\x5d\x17\xf8\x3c\x0a\x65\x1d\xed\x2c\xe7\xab\xf7\x00\x00\x00\xff\xff\x73\x98\x7e\x94\xb1\x01\x00\x00"

func db20180515071142_impersonate_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180515071142_impersonate_permSql,
		"db/20180515071142_impersonate_perm.sql",
	)
}

func db20180515071142_impersonate_permSql() (*asset, error) {
	bytes, err := db20180515071142_impersonate_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180515071142_impersonate_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180519110201_super_admmin_roleSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x4d\x4b\x33\x31\x14\x85\xf7\xf9\x15\x67\x97\x0e\x6f\xba\x78\xdd\x58\x98\x55\xa1\x11\x07\xc6\x29\xce\x87\x2e\x25\x4e\x2e\xf6\xe2\x4c\x12\x92\x29\xf5\xe7\x4b\x6a\x15\x5c\x29\xb8\x7c\x42\xce\x3d\xf7\x3e\x62\xbd\xc6\xbf\x99\x5f\xa2\x59\x08\x43\xc8\xd8\xdd\xd7\x60\x87\x44\xe3\xc2\xde\x41\x0e\x41\x82\x13\xe8\x8d\xc6\xe3\x42\x16\xa7\x03\x39\x2c\x07\x4e\xf8\xc8\xe5\x4f\x9c\x60\x42\x98\x98\xac\xa8\x9a\x4e\xb7\x3d\xaa\xa6\xdf\x23\xfa\x89\x12\x56\x6c\x95\x33\x33\x29\x58\x4a\x63\xe4\x90\x23\x0a\xd6\xcf\x86\xdd\x13\xdb\x02\x0f\xdb\x7a\xd0\x1d\x56\xd7\x4a\x76\xc7\x40\x71\x6b\x67\x76\xf2\x02\x38\xd3\x79\x96\x54\xff\x8b\xf2\x4f\x0d\x9b\x1f\x1b\xae\x8a\x52\x7c\xb3\xb2\xf3\x27\xf7\xe9\xe5\x4b\x4a\x7e\xfc\x95\x96\xe8\xa7\x89\x2c\x9e\xcd\xf8\x2a\x76\xba\xd6\xbd\xc6\x4d\xbb\xbf\xbb\x2c\xfe\x78\xab\x5b\x0d\xb6\xa8\x9a\x7c\xfd\xa6\x28\xc5\x7b\x00\x00\x00\xff\xff\x15\xe0\x41\xb4\x92\x01\x00\x00"

func db20180519110201_super_admmin_roleSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180519110201_super_admmin_roleSql,
		"db/20180519110201_super_admmin_role.sql",
	)
}

func db20180519110201_super_admmin_roleSql() (*asset, error) {
	bytes, err := db20180519110201_super_admmin_roleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180519110201_super_admmin_role.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180519144035_god_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x3f\x6b\xc3\x30\x10\x47\x77\x7f\x8a\x1f\x5e\x92\x50\x67\x6e\xa0\x64\x08\x58\xa5\x06\xd7\xa1\xfe\xd3\x8e\xc5\xb1\x0e\xe7\xa8\x62\x09\x49\x25\xfd\xf8\x45\x4a\x53\x28\x5e\x0a\x19\xf5\x38\x1d\xef\x5d\xb2\x5e\xe3\xee\xc4\xa3\xed\x3d\xa1\x33\xe1\xd9\xbc\x94\xe0\x09\x8e\x06\xcf\x7a\xc2\xa2\x33\x0b\xb0\x03\x7d\xd1\xf0\xe9\x49\xe2\x7c\xa4\x09\xfe\xc8\x0e\x97\x7f\x61\x88\x1d\x7a\x63\x14\x93\x4c\x8a\xaa\x11\x75\x8b\xa2\x6a\xf7\xb0\x5a\xd1\xbb\x21\x7b\x62\xe7\xc2\xd8\x32\x02\x96\x19\x02\xcc\xe0\x06\x6d\x68\x85\xd7\x5d\xd9\x89\x06\xcb\xfb\x2c\x1d\xb5\x4c\xb3\x74\x54\xfa\xd0\xab\x74\xf5\x70\xcb\xb6\xcd\x7c\xdb\x9f\xda\x5c\x9f\xa7\x6b\xef\x6f\x6c\x80\xff\xca\xb5\x5a\x29\x92\x38\xf4\xc3\x47\x92\x8b\x52\xb4\x02\x8f\xf5\xfe\x79\x26\xf9\xf6\x24\x6a\x11\x05\xb7\x51\x07\xbb\x2a\xbf\x98\x6e\xaf\x62\x11\xfd\xb4\xa0\xa8\xc2\x1d\x36\x41\xf6\x3b\x00\x00\xff\xff\x55\xac\x48\x2f\x9c\x01\x00\x00"

func db20180519144035_god_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180519144035_god_permSql,
		"db/20180519144035_god_perm.sql",
	)
}

func db20180519144035_god_permSql() (*asset, error) {
	bytes, err := db20180519144035_god_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180519144035_god_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180520060223_user_detail_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x3f\x6b\xc3\x30\x10\x47\xf7\x7c\x8a\x1f\x5e\x92\x50\x67\x6a\xb6\x92\x21\x60\x95\x1a\x5c\x87\xfa\x4f\x3b\x1a\xc5\x3a\x9c\xa3\x8a\x25\x24\x85\xf4\xe3\x17\x39\x4d\xa1\x04\x4a\xa1\xa3\x1e\xa7\xe3\xdd\x9b\xad\x56\xb8\x3b\xf2\xe0\x64\x20\xb4\x36\x3e\xeb\x97\x02\x3c\xc2\x53\x1f\xd8\x8c\x98\xb7\x76\x0e\xf6\xa0\x0f\xea\x4f\x81\x14\xce\x07\x1a\x11\x0e\xec\x71\xf9\x17\x87\xd8\x43\x5a\xab\x99\xd4\x2c\x2f\x6b\x51\x35\xc8\xcb\x66\x07\x67\x34\x75\x96\xdc\x91\xbd\x8f\x63\x8b\x09\xb0\x4a\x11\x61\x0a\xdf\x1b\x4b\x4b\xbc\x6e\x8b\x56\xd4\x58\xdc\xa7\xc9\x40\xa1\x53\x14\x24\xeb\xee\xe4\xc9\x25\x69\x32\x68\xb3\x97\x3a\x59\x3e\xfc\x67\xf3\xfa\xf7\xcd\x3f\x2a\x64\xe6\x3c\x5e\x3b\x7c\x47\x88\xf0\x4f\x19\x9c\xd1\x9a\x14\xf6\xb2\x7f\x9f\x65\xa2\x10\x8d\xc0\x63\xb5\x7b\xbe\x11\x7e\x7b\x12\x95\x98\x64\x37\x37\x6a\xd8\x96\xd9\xe5\x82\xcd\x55\x72\x42\x5f\x37\x22\x2f\x63\xab\x75\x14\xff\x0c\x00\x00\xff\xff\x7b\x54\x57\x35\xc0\x01\x00\x00"

func db20180520060223_user_detail_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180520060223_user_detail_permSql,
		"db/20180520060223_user_detail_perm.sql",
	)
}

func db20180520060223_user_detail_permSql() (*asset, error) {
	bytes, err := db20180520060223_user_detail_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180520060223_user_detail_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180530124433_domainlessSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xbf\x6e\x03\x21\x0c\xc7\xf1\x9d\xa7\xf8\x6d\x19\xaa\xf4\x05\x32\x5d\xc4\x75\x42\xb9\x36\x85\x39\x22\xe0\x36\x56\x09\x20\x4c\x74\x7d\xfc\x0a\xf5\x8f\xd4\x2d\xa3\x2d\x7f\xad\x8f\xda\x6e\xf1\x70\xe5\xf7\xe6\x3b\xc1\xd5\x31\xbe\xbe\x18\x70\x86\x50\xe8\x5c\x32\x36\xae\x6e\xc0\x02\xfa\xa4\x70\xeb\x14\xb1\x5e\x28\xa3\x5f\x58\xf0\xdd\x8d\x23\x16\xf8\x5a\x13\x53\x54\x93\xb1\xf3\x11\x76\xda\x9b\x19\x37\xa1\x26\x98\xb4\x46\x2c\x57\xcf\xf9\x94\x48\x04\xfb\x65\x31\xd0\xf3\xd3\xe4\x8c\xc5\x9b\x4f\x42\xc0\x61\xb1\x38\x38\x63\x76\x4a\x1f\x97\xe7\x9f\x3c\x34\x7f\x7e\x6c\x25\xd1\x69\x3c\xda\xa9\x7f\x58\x5d\xd6\xfc\xcb\xfd\xb3\x8e\xe5\x5d\xda\x56\x52\xa2\x88\xb3\x0f\x1f\x4a\xa9\xaf\x00\x00\x00\xff\xff\xc4\xf1\x3b\xf2\x06\x01\x00\x00"

func db20180530124433_domainlessSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180530124433_domainlessSql,
		"db/20180530124433_domainless.sql",
	)
}

func db20180530124433_domainlessSql() (*asset, error) {
	bytes, err := db20180530124433_domainlessSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180530124433_domainless.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180530125151_superglobalSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\xb1\x4e\xc3\x30\x10\x06\xe0\xdd\x4f\xf1\x2b\x4b\x41\x50\x5e\xa0\x53\xa0\x01\x21\xb9\xa9\x28\xf6\xc0\x84\x1c\xe7\x68\x4f\xb8\xb6\xe5\x4b\x55\x1e\x1f\x59\x01\x24\x98\xd8\xee\xbf\xfb\x6f\xf8\xd4\x72\x89\xab\x23\xef\x8b\x9b\x08\x36\xd7\xf8\xfc\xa4\xc1\x11\x42\x7e\xe2\x14\xb1\xb0\x79\x01\x16\xd0\x07\xf9\xd3\x44\x23\xce\x07\x8a\x98\x0e\x2c\x98\xff\x6a\x89\x05\x2e\xe7\xc0\x34\x2a\xb3\xb3\xfd\x5d\x6b\x3a\x98\xf6\x56\x77\xf0\xc5\x0d\x37\x25\x05\x7a\xcd\x54\x8e\x2c\xc2\x29\xae\x54\xab\x4d\xb7\xfb\x6a\xfc\x39\x62\xb3\x5d\x3f\xde\xbf\x40\x7c\xca\x84\xae\xb7\x9b\x8b\x46\x28\xbc\x35\xd7\x68\xf6\x21\x0d\x2e\xd4\x49\x4e\x99\xca\xc3\x1c\x2f\xd1\x6f\x0d\x7a\xab\xf5\x4a\xfd\xf2\xac\xd3\x39\x7e\x8b\x7e\x38\x75\xf9\x2f\x50\x49\x21\xd0\x88\xc1\xf9\x77\xa5\xd4\x67\x00\x00\x00\xff\xff\xe0\x06\xe0\x4f\x29\x01\x00\x00"

func db20180530125151_superglobalSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180530125151_superglobalSql,
		"db/20180530125151_superglobal.sql",
	)
}

func db20180530125151_superglobalSql() (*asset, error) {
	bytes, err := db20180530125151_superglobalSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180530125151_superglobal.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180530125342_rolsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x4f\x83\x30\x18\x86\xef\xfd\x15\xef\x6d\x07\xb3\xc4\x9d\x89\x07\x84\xa2\x84\x06\x14\x4a\xe2\x4e\x05\x69\x75\x5f\xd6\x15\x42\xd1\xf9\xf3\x0d\xe2\xd4\x25\x9a\x78\x6c\xf3\x3c\x6f\xf2\x3d\x6c\xbd\xc6\xc5\x81\x9e\xc7\x76\x32\xa8\x87\xf9\x59\xdd\x0b\x90\x83\x37\xdd\x44\xbd\xc3\xaa\x1e\x56\x20\x0f\xf3\x66\xba\x97\xc9\x68\x1c\x77\xc6\x61\xda\x91\xc7\xe2\xcd\x10\x79\xb4\xc3\x60\xc9\x68\x56\x71\x89\xa4\x28\x79\x7a\x93\xab\x8c\x6f\x55\x74\xcb\xa3\xac\xba\xba\x0c\x58\x28\x24\x2f\x21\xc3\x6b\xc1\xd1\x8c\xbd\x35\xbe\x41\x5c\x16\x77\x27\x1c\x19\xdf\x22\x4d\xc0\x1f\xd2\x4a\x56\x9f\x88\xd2\xfd\xa1\x25\xe7\x15\x69\xf5\xb4\x6f\xce\x57\x3e\x88\x65\xe3\xdb\x5b\x04\x45\xfa\x37\x36\x8c\x63\x58\xf3\x6a\x2c\xc8\x4d\x88\x79\x12\xd6\x42\x62\x83\xbc\x90\xc8\x6b\x21\x02\x26\xcb\x3a\x8f\x42\xc9\x7f\x6a\xc1\x5f\x57\x6d\x02\x76\x56\x30\xee\x8f\xee\xd4\xf0\x2b\xe0\xfc\xf9\xaf\x84\x63\x6f\xad\xd1\x78\x6c\xbb\x3d\x63\xec\x3d\x00\x00\xff\xff\x38\xb5\xa9\xfd\x9b\x01\x00\x00"

func db20180530125342_rolsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180530125342_rolsSql,
		"db/20180530125342_rols.sql",
	)
}

func db20180530125342_rolsSql() (*asset, error) {
	bytes, err := db20180530125342_rolsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180530125342_rols.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180530130551_roleseedSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x3d\x6b\xc3\x30\x18\x84\x77\xfd\x8a\xc3\x4b\x62\xaa\x0c\xfd\x9a\x32\x05\x9a\x21\x10\x12\x5a\xc7\xdd\x5d\xe9\xa5\x79\xa9\x2c\x09\x49\x8e\xfb\xf3\x8b\x6a\xdc\xd6\x74\x09\x9e\xa4\x13\xa7\x87\x1b\x1e\xb1\x5a\xe1\xa6\xe5\xf7\xd0\x24\x42\xed\x73\xac\x9e\xf7\x60\x8b\x48\x2a\xb1\xb3\x58\xd4\x7e\x01\x8e\xa0\x4f\x52\x5d\x22\x8d\xfe\x4c\x16\xe9\xcc\x11\xc3\xbf\x5c\xe2\x88\xc6\x7b\xc3\xa4\xc5\xee\x50\x6d\x5f\x4e\xd8\x1d\x4e\x47\x04\x67\x28\x62\x69\x9b\x96\x24\x34\x45\x15\xd8\xe7\xbe\x34\x74\x21\x53\xe2\x75\xb3\xaf\xb7\x15\x96\x45\xd5\x79\x0a\x1b\xdd\xb2\x2d\xe4\x9f\x00\x4f\xa1\xe5\x18\xd9\xd9\x42\x3e\x96\xeb\x79\xf0\x63\x6f\x29\x14\x72\x38\x27\xc8\x87\xb9\xc8\x71\xea\xff\x95\xf7\xf3\x91\x17\x0a\x89\xe3\xf7\xd4\xdf\x30\x81\xdf\xce\x86\x2b\xe5\x3a\x9b\x32\x79\xb8\x4d\xb0\x77\xe5\x5a\x4c\x44\x78\x72\xbd\x1d\x55\xf8\xf1\x20\x3f\x5e\x65\x42\x70\xc6\x90\xc6\x5b\xa3\x3e\x84\x10\x5f\x01\x00\x00\xff\xff\x32\xd8\x76\x58\x62\x02\x00\x00"

func db20180530130551_roleseedSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180530130551_roleseedSql,
		"db/20180530130551_roleseed.sql",
	)
}

func db20180530130551_roleseedSql() (*asset, error) {
	bytes, err := db20180530130551_roleseedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180530130551_roleseed.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180530131001_permseedSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9b\x31\x6f\xdb\x30\x10\x85\x77\xff\x0a\x6e\x4e\x50\xa7\x80\x13\x7a\xea\x54\xa0\x41\x11\x20\x48\xd1\x26\xe9\x4a\x9c\xa4\x8b\xc4\x86\xa2\x04\x92\xb2\xeb\x7f\x5f\x50\xb1\x65\x37\x96\xd3\x02\xe5\xf3\xd4\x31\x42\xfc\x3d\xf9\xdd\xf9\x78\x3c\x4a\x93\x8b\x0b\xf1\xae\xd6\xa5\xa3\xc0\xe2\xb1\x8d\x7f\xde\x7f\xbd\x15\xda\x0a\xcf\x79\xd0\x8d\x15\xd3\xc7\x76\x2a\xb4\x17\xfc\x93\xf3\x2e\x70\x21\x56\x15\x5b\x11\x2a\xed\xc5\xcb\xe7\xe2\x3f\x69\x2f\xa8\x6d\x8d\xe6\x62\x72\x73\x77\x7f\xfd\xed\x41\xdc\xdc\x3d\x7c\x11\xb9\xa3\xec\xbd\x6b\x0c\xab\x96\x5d\xad\xbd\x8f\xff\x7b\xd6\x5f\xd0\xc5\x4c\xc4\x8b\x33\xe1\xf3\xa6\xe5\x73\xf1\xfd\xe3\xed\xe3\xf5\xbd\x38\xbb\x9c\x89\x69\x5e\x91\x2d\x59\x75\x9e\x9d\xf2\x81\x42\xe7\xa7\x33\x31\x2d\x4d\x93\x91\x99\x9e\x7f\xf8\x67\x8d\xab\x13\x68\xc4\xef\xc1\x85\x0e\xbd\x42\xfa\xdb\x07\xa1\xe3\x5d\x97\x1c\x54\xc1\x81\xb4\x01\xdd\x3b\x54\x60\x3e\x13\x53\x5d\xb7\xec\x7c\x63\x29\xf0\xa0\xe0\xbb\x96\xdd\xe7\xa4\x46\x8d\xc9\xa4\x75\x0a\xab\x20\x8f\x59\xc5\xe6\x29\x05\x7f\x01\xe6\xc7\x18\x50\x51\xa8\xd0\xa8\x55\xa5\x03\x1b\xca\x18\x95\xb3\xa7\xd0\x89\xf1\xc8\xc9\xaa\x8a\x96\xac\x28\xcf\x9b\xce\x86\xd4\x7e\x19\xed\x51\x25\x09\x84\x5e\xbc\x46\xa7\xb2\x23\x56\x8a\xdc\x71\xcc\xcc\xa2\xa9\x49\x5b\x40\x99\x98\xef\x56\x9a\x17\x8d\xbd\xb5\x06\x50\x91\x62\x65\x25\xef\x75\x69\x15\x15\xb5\xb6\x2a\x7e\x04\xb0\x78\x9e\x42\x47\xee\xc2\x93\x53\xdd\x92\x2e\x6d\xca\xe8\xcb\xcd\xd7\x40\xb0\x17\x40\xf6\xd5\x08\x3b\x71\xa9\x73\x79\xa5\x97\x0c\x52\x90\x47\x14\x52\x7a\x8f\xe4\x5f\xc2\x1d\xba\x84\x46\x78\xe8\x4b\x71\x09\x04\xc4\xcb\x31\x7c\xca\xd4\x81\xc1\x07\xdf\x29\x04\xa7\xb3\x2e\x20\xea\x32\x54\x60\x31\x2e\x90\xb2\x20\x03\xf1\x83\xff\x59\x57\x94\x1c\x40\xde\x23\xe0\xf2\x10\x9e\x3c\xe3\xd3\xa3\xfb\x7d\x7c\xd3\xae\x81\x75\x06\x88\x97\x63\xf8\x94\xae\xc3\xe0\x43\x93\x8f\xf3\x1d\x88\x97\x63\xf8\x94\xbe\xc3\xe0\xd1\xf7\x82\xb4\x41\x26\x3c\x92\x2f\x47\xf9\x29\xad\xc7\xd1\xfb\x8e\xc9\x51\x5b\x29\x74\x04\xf0\x2a\xf2\x0d\x95\xa4\xfb\x13\xb0\x86\x44\x6d\xdb\xfb\x02\xd7\x94\xc8\xfa\x06\xa3\xcb\x11\x7a\xd2\xea\x06\x62\xf7\x8b\xf9\x86\xab\xda\x2e\x33\xda\x57\x88\x11\x12\x5a\x43\x1e\xd5\x48\xba\xb6\x43\x15\x76\xc5\x0e\x5d\xe6\xd0\x05\x0e\x5b\xda\x60\x0b\x4d\xdc\x9a\x3b\xa6\xa0\x97\x8c\x99\xac\x61\xe8\x72\x84\x9e\x7c\xe0\x05\x60\xef\xcd\x01\xb5\x5d\xb2\x0d\x8d\x5b\x27\x6f\xdc\xba\xd6\xe8\xfc\x40\x22\x71\xf7\x86\x16\x91\xc7\x45\x92\xf6\x71\x58\x89\x18\x8f\xa1\x70\xaa\x8c\x3c\xf7\x33\x73\xed\x83\xce\x01\x23\x93\x13\x49\xc9\x3f\x49\xa5\x8c\xd0\x49\x84\x86\x81\x0a\xf0\x27\x83\xe4\xcb\x51\x7e\xf2\xc9\x0a\xec\x37\xd2\x37\xd7\xc0\x5e\x0c\xc9\x97\xa3\xfc\xe4\xfb\x7c\x58\xff\xd5\xd3\x81\x79\x8f\xe4\xcb\x51\x7e\x72\xef\x21\xf4\xfd\x33\x41\x40\xab\xb1\x77\x5a\xbb\xc5\xe3\xce\x6b\x47\xc4\x3c\xf6\x74\x78\xd8\x97\xe0\xda\x57\xb0\x84\x3c\x26\x01\xd9\xbe\x21\x04\x76\xc7\x6f\xb0\x18\x00\xf1\x72\x0c\x9f\xfe\xf8\x0d\xe4\xfb\xff\x9d\xdb\x69\x77\x6e\xaf\x3d\x57\x8e\x7f\x70\x1e\x94\x63\xf2\x0d\x62\x6a\x71\x22\xad\xd7\xf1\x38\xd4\x42\x45\x07\xa7\x34\xdf\x3c\xe3\x56\x52\xe0\x15\xad\x01\x2b\x50\x74\xad\xa6\x67\x56\x8d\x35\xda\xb2\x6a\x69\x5d\x73\xda\x07\xdc\xf6\xda\x83\x8c\xec\xb3\xf2\x96\x5a\x44\x42\x67\xda\x18\x6d\x4b\x4c\x06\x43\xe0\xf2\x10\x9e\x3a\x47\x01\xe8\xf9\x76\x45\xc0\x65\xe5\x36\xa4\x9b\xa4\x0c\x8e\xac\xa7\xfe\xc9\x77\x4c\x74\xd1\x3a\xf2\x4d\x9d\xd4\x31\xc7\xaa\xcc\x7b\x56\x50\x05\x3f\x51\x67\xde\xca\x82\xdf\x5e\x63\xf8\xd4\xac\xec\xf6\x45\x86\xe1\x2d\x86\x78\xf1\xaf\xde\x63\x70\x8d\x31\x5c\x88\x8c\xf2\xe7\xc9\x64\xf2\x2b\x00\x00\xff\xff\xc9\xf3\x30\xc4\x20\x31\x00\x00"

func db20180530131001_permseedSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180530131001_permseedSql,
		"db/20180530131001_permseed.sql",
	)
}

func db20180530131001_permseedSql() (*asset, error) {
	bytes, err := db20180530131001_permseedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180530131001_permseed.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180530141920_roleSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xc1\x8a\xc2\x30\x10\xc6\xf1\x7b\x9e\xe2\xbb\x75\x97\xa5\x4f\xb0\x27\xb1\x39\x14\xa4\x52\x35\xe0\xad\xc4\x66\xb0\x83\x69\x12\x9a\x94\xf6\xf1\x25\x14\x05\x6f\x1e\xe7\xcf\x7c\xf0\x13\x65\x89\xbf\x91\xef\x93\x4e\x04\x15\xf2\x79\x6e\x0f\x60\x87\x48\x7d\x62\xef\x50\xa8\x50\x80\x23\x68\xa5\x7e\x4e\x64\xb0\x0c\xe4\x90\x06\x8e\xd8\x76\xf9\x89\x23\x74\x08\x96\xc9\x88\xfd\x49\xee\x2e\x12\xaa\xa9\x5b\x25\x51\x37\x95\xbc\x62\xf2\x96\x62\xe7\xf4\x48\xdd\xcc\xce\xd0\x8a\x63\xb3\x45\xfc\xe4\xfa\xfb\x2f\x3e\x20\x95\x5f\xdc\x8b\xf2\x76\xe4\xf8\x95\x64\xf2\xd6\x92\xc1\x4d\xf7\x0f\x21\xc4\x33\x00\x00\xff\xff\x97\x07\x1f\xb8\xe2\x00\x00\x00"

func db20180530141920_roleSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180530141920_roleSql,
		"db/20180530141920_role.sql",
	)
}

func db20180530141920_roleSql() (*asset, error) {
	bytes, err := db20180530141920_roleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180530141920_role.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20180325060232_users.sql":                       db20180325060232_usersSql,
	"db/20180325061015_roles.sql":                       db20180325061015_rolesSql,
	"db/20180325073312_role_seed.sql":                   db20180325073312_role_seedSql,
	"db/20180423080834_audit_logs.sql":                  db20180423080834_audit_logsSql,
	"db/20180425142843_fixssn.sql":                      db20180425142843_fixssnSql,
	"db/20180426105326_addbalance.sql":                  db20180426105326_addbalanceSql,
	"db/20180506081006_add_to_whitelabel_user_perm.sql": db20180506081006_add_to_whitelabel_user_permSql,
	"db/20180506124131_advantage.sql":                   db20180506124131_advantageSql,
	"db/20180506133103_fullname_virtual.sql":            db20180506133103_fullname_virtualSql,
	"db/20180507054057_user_list_perm.sql":              db20180507054057_user_list_permSql,
	"db/20180507070211_adminperm.sql":                   db20180507070211_adminpermSql,
	"db/20180515071142_impersonate_perm.sql":            db20180515071142_impersonate_permSql,
	"db/20180519110201_super_admmin_role.sql":           db20180519110201_super_admmin_roleSql,
	"db/20180519144035_god_perm.sql":                    db20180519144035_god_permSql,
	"db/20180520060223_user_detail_perm.sql":            db20180520060223_user_detail_permSql,
	"db/20180530124433_domainless.sql":                  db20180530124433_domainlessSql,
	"db/20180530125151_superglobal.sql":                 db20180530125151_superglobalSql,
	"db/20180530125342_rols.sql":                        db20180530125342_rolsSql,
	"db/20180530130551_roleseed.sql":                    db20180530130551_roleseedSql,
	"db/20180530131001_permseed.sql":                    db20180530131001_permseedSql,
	"db/20180530141920_role.sql":                        db20180530141920_roleSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20180325060232_users.sql":                       &bintree{db20180325060232_usersSql, map[string]*bintree{}},
		"20180325061015_roles.sql":                       &bintree{db20180325061015_rolesSql, map[string]*bintree{}},
		"20180325073312_role_seed.sql":                   &bintree{db20180325073312_role_seedSql, map[string]*bintree{}},
		"20180423080834_audit_logs.sql":                  &bintree{db20180423080834_audit_logsSql, map[string]*bintree{}},
		"20180425142843_fixssn.sql":                      &bintree{db20180425142843_fixssnSql, map[string]*bintree{}},
		"20180426105326_addbalance.sql":                  &bintree{db20180426105326_addbalanceSql, map[string]*bintree{}},
		"20180506081006_add_to_whitelabel_user_perm.sql": &bintree{db20180506081006_add_to_whitelabel_user_permSql, map[string]*bintree{}},
		"20180506124131_advantage.sql":                   &bintree{db20180506124131_advantageSql, map[string]*bintree{}},
		"20180506133103_fullname_virtual.sql":            &bintree{db20180506133103_fullname_virtualSql, map[string]*bintree{}},
		"20180507054057_user_list_perm.sql":              &bintree{db20180507054057_user_list_permSql, map[string]*bintree{}},
		"20180507070211_adminperm.sql":                   &bintree{db20180507070211_adminpermSql, map[string]*bintree{}},
		"20180515071142_impersonate_perm.sql":            &bintree{db20180515071142_impersonate_permSql, map[string]*bintree{}},
		"20180519110201_super_admmin_role.sql":           &bintree{db20180519110201_super_admmin_roleSql, map[string]*bintree{}},
		"20180519144035_god_perm.sql":                    &bintree{db20180519144035_god_permSql, map[string]*bintree{}},
		"20180520060223_user_detail_perm.sql":            &bintree{db20180520060223_user_detail_permSql, map[string]*bintree{}},
		"20180530124433_domainless.sql":                  &bintree{db20180530124433_domainlessSql, map[string]*bintree{}},
		"20180530125151_superglobal.sql":                 &bintree{db20180530125151_superglobalSql, map[string]*bintree{}},
		"20180530125342_rols.sql":                        &bintree{db20180530125342_rolsSql, map[string]*bintree{}},
		"20180530130551_roleseed.sql":                    &bintree{db20180530130551_roleseedSql, map[string]*bintree{}},
		"20180530131001_permseed.sql":                    &bintree{db20180530131001_permseedSql, map[string]*bintree{}},
		"20180530141920_role.sql":                        &bintree{db20180530141920_roleSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
