// Code generated by go-bindata.
// sources:
// db/20170727210828_users.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20170727210828_usersSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x6f\xdb\x38\x10\x3d\x4b\xbf\x62\x6e\xb6\xb1\x0e\x10\x04\xeb\xbd\xe4\x94\xdd\xe4\xb0\x40\xd2\xa6\x89\x73\x16\x68\x72\x64\x13\xa6\x48\x95\x43\x25\xf1\xbf\x2f\x48\xc9\xb4\x64\x49\x6d\xbe\x8a\xc6\x27\x69\x66\xde\x98\x7c\xef\x91\x9a\xf4\xe4\x04\xfe\x2a\xe4\xda\x32\x87\xf0\x50\xfa\xd7\xfb\x6f\xd7\x20\x35\x10\x72\x27\x8d\x86\xc9\x43\x39\x01\x49\x80\xcf\xc8\x2b\x87\x02\x9e\x36\xa8\xc1\x6d\x24\x41\x8d\xf3\x45\x92\x80\x95\xa5\x92\x28\x52\x6e\xd1\xf7\x72\x6c\xa5\x10\x2a\x42\x4b\xe9\x34\x4d\xa4\x00\xa9\x1d\xb0\xca\x99\x4c\x6a\x6e\xb1\x40\xed\xd2\x24\x29\xad\x2c\x98\xdd\xc1\x16\x77\xf3\x34\xc1\x82\x49\x05\x8f\xcc\xf2\x0d\xb3\xd3\xc5\xe9\x0c\xb4\x71\xa0\x2b\xa5\xe6\x69\x52\x32\xa2\x27\x63\x45\xcc\xff\xd3\xcd\x33\xce\x91\x28\x73\x66\x8b\x7a\xb4\xe6\x91\x39\x66\x63\xf6\x6c\xb1\x98\xed\x53\x7e\xa9\x99\xdb\x95\x08\xa8\xab\x62\x3a\x29\xd1\x92\xd1\x4c\x4d\xe6\x30\xe1\xc6\x96\xa6\xde\xea\xa4\xd3\x2f\x2c\x38\xe3\x46\xe7\xd2\x16\x28\x1a\xe8\x0e\xc9\xa3\xb4\x99\xcc\x40\x60\xce\x2a\xe5\xc2\x5b\x1b\x59\x98\x95\x54\xf8\x26\x28\x39\xe6\x2a\x6a\x00\x16\xd7\x92\x1c\x5a\x14\x1e\xb7\x52\x86\x6f\x51\xb4\xc1\xad\x82\x76\x93\x5a\x26\x91\x31\x07\x4e\x16\x48\x8e\x15\x65\x04\xfd\xf7\x70\x77\x77\xf5\x65\x99\x2d\xff\xbf\xb9\xba\x5f\x5e\xdc\xdc\xb6\x91\x55\x29\xde\x88\xe4\x46\x93\xb3\xcc\x1b\x21\x18\x23\xab\xe9\xab\xa4\x16\xf8\x9c\x26\x49\xa5\xe5\xf7\x0a\x61\x1a\xc2\xb3\x74\x96\x9e\xa7\x7d\x3b\x65\x7b\x61\x5e\x6e\xab\x00\x6b\x4a\x5b\xcb\xc9\xa5\x25\x97\x69\x56\x60\x34\xc4\xdf\xa7\xd1\x0f\x8a\xfd\x24\xb9\x46\x2d\xd0\x36\x12\x14\x4c\xa1\x27\x3f\xc7\xf0\x14\x8b\x38\x2a\x55\x6e\x8c\x3e\x74\x38\x3b\x74\x18\x4d\x30\x21\x2c\x12\x0d\x7a\x94\x4b\xb7\x8b\x1b\xf9\x34\x3a\x46\x45\xb2\x86\xe8\xbe\xa2\x4d\x62\xf6\x2b\x30\x79\x74\xbe\x4d\x93\x24\x37\x16\xe5\x5a\x7b\x05\x0f\x70\xb0\x98\xa3\x45\xcd\x91\x6a\x07\xc1\x54\x8a\x51\xa3\xb4\x4e\xed\xbb\xbd\xd2\x31\xc2\xe2\xf4\x37\x6a\x8c\xdc\x68\x53\x48\x9e\x71\x23\x06\xbd\xb7\x3f\xd0\xa3\x05\x9f\xd4\x25\x2d\x39\x7a\x46\x79\x81\x4f\x8e\xe1\xd1\x2a\xef\x73\x8a\x35\x0a\x5f\xf1\x85\xea\x5f\x08\x87\x0d\x0b\x24\x6e\x65\x19\x3e\x88\x43\xca\x0a\x53\x30\xa9\x07\xcc\xf5\x87\xd5\x09\x14\x84\xab\xae\xa7\x87\x0f\x76\x59\x0b\x05\x0d\xa4\xde\x50\x14\xc2\xe8\x3a\x0e\xd3\xb8\xd3\x80\x1c\x60\x3c\x28\xe8\x59\x1f\x39\x6e\xa1\xe6\x23\x89\x6a\xa9\x18\x4d\x32\x87\xe6\x6f\x66\x7d\x3e\x6a\x87\xbe\xd5\x67\x63\xfd\x6a\xda\x86\xfa\xed\x57\xd2\xee\xd7\x90\x79\xec\xdb\x83\x02\x03\x4d\x1b\x0d\x42\xe6\xd0\x75\xd0\xf5\xfe\xe6\x2d\x24\xd1\xab\xae\xc7\x11\x61\x7c\xab\xb1\x99\x8b\xb8\x89\x43\x15\xa1\xca\xfd\xa7\xb2\x64\x16\xb5\xf3\x4f\x6b\x65\x56\x4c\x75\xa7\xaa\x4f\x70\x1e\x5a\xe4\x7c\xb8\x6a\x63\xad\xf7\xda\x1d\xf2\x5d\x05\xfd\xaf\x3d\xae\x5f\x9a\x27\xbd\x1f\xd8\xe3\xb4\xee\x83\x2f\x9a\xd7\xad\x51\x0a\x05\xac\x18\xdf\xa6\x97\x77\x5f\x6f\x61\x79\xf1\xef\xf5\xd5\xf1\x0a\xce\x8f\x73\xd4\x89\x34\x07\xdd\xbb\x6d\x20\xde\xad\x3d\xbe\xc5\xfb\xc9\xfd\x28\xd0\xcb\xd0\x79\xfa\x23\x00\x00\xff\xff\xc8\x74\x62\x1d\xa9\x0c\x00\x00"

func db20170727210828_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170727210828_usersSql,
		"db/20170727210828_users.sql",
	)
}

func db20170727210828_usersSql() (*asset, error) {
	bytes, err := db20170727210828_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170727210828_users.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20170727210828_users.sql": db20170727210828_usersSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20170727210828_users.sql": &bintree{db20170727210828_usersSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

