// Code generated by go-bindata.
// sources:
// db/20170727210828_users.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20170727210828_usersSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x97\xcf\x52\xeb\x36\x14\xc6\xd7\xf6\x53\x9c\x5d\xe2\x69\xe8\x30\x4c\xd3\x0d\x2b\x5a\x58\x74\x06\x5a\x0a\x61\xed\x51\xa4\xe3\x44\x13\x59\x52\x25\x39\x90\xb7\xef\xc8\xff\x1d\x5b\x4c\xe0\xc2\xbd\xcc\x65\xc1\xc4\x3a\xfa\x3e\x49\xe7\xfc\x2c\x59\xf1\xd9\x19\xfc\x92\xf3\x8d\x21\x0e\xe1\x49\xfb\xc7\xc7\x7f\x6f\x81\x4b\xb0\x48\x1d\x57\x12\x66\x4f\x7a\x06\xdc\x02\xbe\x20\x2d\x1c\x32\x78\xde\xa2\x04\xb7\xe5\x16\x2a\x9d\xef\xc4\x2d\x10\xad\x05\x47\x16\x53\x83\xde\xcb\x91\xb5\x40\x28\x2c\x1a\x1b\xcf\xe3\x88\x33\xe0\xd2\x01\x29\x9c\x4a\xb9\xa4\x06\x73\x94\x2e\x8e\x22\x6d\x78\x4e\xcc\x01\x76\x78\x58\xc4\x11\xe6\x84\x0b\xd8\x13\x43\xb7\xc4\xcc\x97\xe7\x09\x48\xe5\x40\x16\x42\x2c\xe2\x48\x13\x6b\x9f\x95\x61\x6d\xfc\xf7\x61\x9c\x50\x8a\xd6\xa6\x4e\xed\x50\x86\xfa\x68\x62\x50\xba\xb4\x9e\x4d\x23\xdc\x13\x47\x4c\x2b\xb9\x58\x2e\x93\x26\xe4\xe7\x9f\xba\x83\x46\x40\x59\xe4\xf3\x99\x46\x63\x95\x24\x62\xb6\x80\x19\x55\x46\xab\x6a\xfd\xb3\xc1\x20\xe5\x2a\x52\xaa\x64\xc6\x4d\x8e\xac\x96\x1e\xd0\x7a\x95\x54\xb3\x04\x18\x66\xa4\x10\xae\x7c\xea\x2b\x73\xb5\xe6\x02\xdf\x25\xb5\x8e\xb8\xc2\xd6\x02\x83\x1b\x6e\x1d\x1a\x64\x5e\xb7\x16\x8a\xee\x90\xf5\xc5\xbd\x0e\x7d\x93\xaa\x76\x2c\x25\x0e\x1c\xcf\xd1\x3a\x92\xeb\x56\xf4\xe7\xd3\xc3\xc3\xcd\xdf\xab\x74\xf5\xd7\xdd\xcd\xe3\xea\xea\xee\xbe\xaf\x2c\x34\x7b\xa7\x92\x2a\x69\x9d\x21\xbe\x1e\x25\x2d\x69\x95\xbe\x82\x4b\x86\x2f\x71\x14\x15\x92\xff\x57\x20\xcc\xcb\xe6\x64\x4a\x50\xfd\xe7\x2c\xcd\x76\x71\x14\x65\xca\x20\xdf\x48\x4f\x14\xcc\xdb\x7a\x27\x60\x30\x43\x83\x92\xa2\x05\x6a\xc8\xfa\xd7\x52\x05\x73\xce\x92\x38\x89\x2f\xe3\x86\xdb\x72\xd8\x29\x63\x25\xa1\x96\x74\xa6\x3d\x5d\xc7\x7b\xda\x40\x72\x3a\xf7\xa5\xac\x81\xb2\x4b\x4d\xc6\x8d\x75\xa9\x24\x39\xb6\x70\xfe\x76\xde\xb2\x29\xc8\x2b\xc1\x0d\x4a\x86\xa6\xc6\x21\x27\x02\x3d\x08\x19\x96\xbf\xda\x4e\x14\x85\xd0\x5b\x25\x3b\x87\x8b\xce\x21\x18\x20\x8c\x19\xb4\x76\xf2\x7d\xa1\xaa\x90\xce\x1c\x8e\x5e\x30\x6d\xd4\x9e\x4b\x8a\x47\xcd\x94\xbb\xe3\x9e\x5f\x00\xc0\xb6\x7c\x69\x5d\x95\x31\x8a\x75\x60\x02\xc6\xa1\x38\x00\x65\x23\x3f\x15\xc9\x1e\x5a\xbd\x3d\xe7\x9b\xe9\x1a\xa0\xb3\x3c\xff\x44\x2a\x90\x2a\xa9\x72\x4e\x53\xaa\xd8\x24\xad\xcd\x76\x14\xec\xf0\x33\x70\xd5\xab\xdd\x08\xad\x13\xc8\x3a\x96\xb7\x70\x7d\x00\x5b\x4c\xe5\x84\xcb\x37\x1c\xd4\xe3\x6d\xa7\x5b\x37\x43\x4b\x0d\xd7\xe5\x77\xc1\x14\x0d\x84\x3a\xbe\xc7\xd7\x8e\x36\xdf\xf8\x85\x8e\xa5\x3a\x3b\xe5\x5e\x3b\xaa\x98\x6f\x0c\xa7\xb4\xac\x94\x4f\x6b\xfd\x38\x7e\x0b\x03\x2f\x67\x2f\xdd\x30\x6f\xc5\x0b\x98\x06\xa4\x37\x58\xda\xcc\x76\x8a\x8e\xd6\x68\xcc\x47\x2d\x2b\x09\x09\x9b\x7f\x1c\x78\xd5\x39\x1b\xf4\x56\xb2\x1f\xeb\xec\x47\x79\x36\x4a\xe0\x77\x02\xf7\x07\x63\x58\xae\xf4\x6d\x10\x7a\x49\x8b\x60\x80\xb4\xb2\xcf\xb8\xf9\xfd\x8b\x1d\xa0\x5b\x0f\xba\x80\x7a\x98\x64\xbc\xa6\x0f\x20\x2b\x64\x5a\xa5\x6c\xca\xb4\x99\xce\xc8\xb4\x94\x84\x70\x0d\x38\x2b\xd9\x45\x3a\xeb\xe9\x6a\x68\x34\x39\xb7\xf6\x4d\x07\x78\xa0\x44\xde\x2a\x74\xd1\xb1\x54\xb5\x97\x16\x8b\x22\xf3\x9b\x6c\xf5\xdd\xea\x7f\x6d\x84\x5a\x13\x31\xbc\xb5\x7c\x01\xba\x7b\xc9\xf9\x9c\xd2\x85\xfc\x9b\x02\x76\xf1\x61\x19\xfd\x5f\xff\xa2\x7c\xad\x9e\x65\x73\x55\x6e\xef\xc9\xbe\xf1\xa4\x9b\xb2\x51\x42\x20\x83\x35\xa1\xbb\xf8\xfa\xe1\x9f\x7b\x58\x5d\xfd\x71\x7b\x73\x3c\x83\xcb\xe3\x98\x1d\xb4\xf4\x76\xc7\x89\xf6\x61\xdf\xe3\xef\x87\x71\xb0\xf9\x6c\x1d\x45\xec\x65\xfc\x7f\x00\x00\x00\xff\xff\xca\x54\xd6\xb7\x23\x10\x00\x00"

func db20170727210828_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170727210828_usersSql,
		"db/20170727210828_users.sql",
	)
}

func db20170727210828_usersSql() (*asset, error) {
	bytes, err := db20170727210828_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170727210828_users.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20170727210828_users.sql": db20170727210828_usersSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20170727210828_users.sql": &bintree{db20170727210828_usersSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

