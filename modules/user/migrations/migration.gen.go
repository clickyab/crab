// Code generated by go-bindata.
// sources:
// db/20180325060232_users.sql
// db/20180325061015_roles.sql
// db/20180325073312_role_seed.sql
// db/20180426105326_addbalance.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20180325060232_usersSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x51\x6f\xa3\x38\x10\x7e\xf7\xaf\x98\xb7\x04\x5d\x56\x6a\x4f\xd7\xd3\x9d\xaa\x7d\x60\xc1\xed\xa2\x4b\x9c\x2e\x98\x53\xf7\x09\x5c\x3c\x69\xad\x12\x1b\xd9\xa6\xdd\xfd\xf7\x27\x42\x92\x42\x9b\x6c\x73\x7d\x0a\x99\xf9\x06\x3e\x7f\x33\xdf\x98\x7c\xfa\x04\xbf\xad\xd5\xbd\x15\x1e\x21\x6f\xba\xbf\xd9\xb7\x39\x28\x0d\x0e\x2b\xaf\x8c\x86\x49\xde\x4c\x40\x39\xc0\x1f\x58\xb5\x1e\x25\x3c\x3f\xa0\x06\xff\xa0\x1c\xf4\x75\x1d\x48\x39\x10\x4d\x53\x2b\x94\x24\x4a\x69\xc8\x29\xf0\xf0\xcb\x9c\x42\x72\x05\x6c\xc9\x81\xde\x26\x19\xcf\xa0\x6c\x1d\x5a\x57\xc2\x94\x94\x4a\x96\x90\x30\x3e\x3d\x3f\x0b\x20\x67\x59\x72\xcd\x68\xbc\x81\xb2\x7c\x3e\x87\x30\xe7\xcb\x22\x61\x51\x4a\x17\x94\xf1\x19\x29\x71\x2d\x54\x5d\xc2\xbf\x61\x1a\x7d\x0d\xd3\xe9\xc5\x59\xb0\x07\xcf\x48\xd9\x08\xe7\x9e\x8d\x95\x2f\x80\x3f\xc7\x00\x51\x55\xe8\x5c\xe1\xcd\x23\xea\xe3\xa0\x27\xe1\x85\x7d\x49\x9f\xff\x7d\x1e\xf4\x74\x62\x7a\x15\xe6\xf3\x3d\xd0\x79\xe1\x5b\x57\x02\x65\xf9\x62\x3a\xb1\x78\xaf\x9c\x47\x8b\x72\x32\x83\xc9\x5d\x6d\xaa\xc7\xfe\x51\x54\x5e\x3d\xe1\xe4\xe5\x1b\xfb\xf7\x8c\x6a\x48\x69\x6a\x59\xbc\x3d\xc2\xef\x17\x17\x87\x3f\x5f\x29\xff\xb3\x38\xac\xdf\x21\xb2\x4e\x9f\x82\x84\x68\xb9\xe8\xb4\x86\x49\x66\x2a\x25\x6a\xc8\xb0\x6a\xad\xf2\x3f\x81\xb5\xeb\x3b\xb4\x1d\xcf\x5a\x68\x59\xd4\x4a\xe3\x80\xe4\xd9\x11\x8e\x58\xd7\xcd\x83\x39\x05\xda\x18\xe7\x45\x5d\x54\x46\x0e\xc0\xe7\x47\xc0\x2b\x65\x9d\x2f\xb4\x58\x0f\xb0\x7f\x8c\xdb\x58\x8b\xf7\x10\x42\x4a\x8b\xce\x9d\x20\xf5\x3d\x6a\x89\x76\xd7\xe9\xb5\xa8\xb1\x6b\xec\x0a\x77\x4f\xda\xf8\xc2\x35\x58\xa9\x95\x42\x39\x19\x7f\xc4\x7b\xab\xee\x5a\x8f\xae\x04\x4e\x6f\xf9\x61\x99\x2c\x0a\x8f\xb2\x10\xbe\x84\x38\xe4\x94\x27\x0b\xfa\x76\x5c\xa2\x3c\x4d\x29\xe3\x45\x97\xcd\x78\xb8\xb8\x99\x91\xb2\x6d\xe4\xc7\x2a\x6f\xd2\x64\x11\xa6\xdf\xe1\x1f\xfa\x1d\xa6\x9d\x0d\x83\x19\xc9\x59\xf2\x2d\xa7\x90\xb0\x98\xde\x6e\x4d\x5a\x6c\x1c\x57\xb4\x4a\x4b\xfc\x51\xc2\x74\xe7\xc0\x30\x8b\x8e\x14\x6c\xcc\x35\x28\x18\x7b\xee\x50\xdd\x66\x34\xa7\xfd\x4f\x97\x0f\x08\x65\xd7\x09\xa3\xf0\x19\x12\xad\x4d\xfc\x85\xec\xcf\xf1\x35\x4c\xc3\x88\xd3\x14\x32\xca\xe1\x33\xb4\x7e\xf5\xd7\x25\x21\xbf\xdc\x35\x95\xb1\x8d\xe9\xd7\xd3\x66\xe5\x40\x4f\xf4\x88\x73\xf6\x8d\x03\x28\x6b\xbc\x17\xf5\xab\x11\x1a\x6f\x9c\x3d\x68\x67\xe4\x57\xc0\xb7\xad\x06\x28\xb1\x32\xda\xac\x55\xf5\x6a\xd4\x8f\x16\x8c\x3b\xb5\xe3\x1e\x04\x04\xe0\xb5\x4e\x00\xef\x28\xf5\x2b\xa1\x84\x7c\x52\xce\xd8\xff\x29\xd2\xb6\xea\x04\xa4\x34\x6b\xa1\xf4\x09\xc0\x0f\xbb\xe1\x98\x56\xb3\x11\xcd\xd9\x90\xca\xc7\x64\x0c\xe7\x5d\xa8\x57\x71\x38\x5f\x04\x20\x8c\x63\x88\x96\x2c\xe3\x69\x98\x30\x3e\xca\x16\x5b\x3e\xc5\xea\x91\x5c\x2d\x53\x9a\x5c\xb3\x9e\xe8\x36\x1e\x40\x4a\xaf\x68\x4a\x59\x44\x33\xd8\x98\x09\xa6\x4a\x06\x2f\x6d\xeb\xfd\xb2\x41\x6f\x97\x7f\xf7\x2a\x80\x25\xdb\xc1\xb7\xe1\xae\x66\x78\xa1\xc7\xe6\x59\xef\xae\xf4\xfd\x7d\xde\x05\x4f\xba\xd1\xad\xa9\x6b\x94\x70\x27\xaa\x47\x12\xa7\xcb\x9b\x03\x07\xbf\x1c\x26\x76\x83\x34\x0a\x6e\x08\x5e\x12\xf2\x5f\x00\x00\x00\xff\xff\x82\x30\x0b\x7c\x69\x08\x00\x00"

func db20180325060232_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325060232_usersSql,
		"db/20180325060232_users.sql",
	)
}

func db20180325060232_usersSql() (*asset, error) {
	bytes, err := db20180325060232_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325060232_users.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180325061015_rolesSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x51\x6f\x9b\x3c\x14\x7d\xf7\xaf\xb8\x6f\x01\x7d\x54\xea\x57\xad\xd3\xa4\xaa\x0f\x2e\x38\xad\x35\x62\x32\x63\xa6\xf6\x09\x53\x70\x5b\xab\x04\x10\x26\x6b\x7f\xfe\x04\x24\xb0\x34\xe9\x9a\x66\xdd\xc3\x5e\x10\xf8\x9e\x7b\xcf\xbd\xe7\x18\x5d\x74\x74\x04\xff\x2d\xf4\x7d\x9d\x34\x0a\xa2\xaa\xfd\x0c\xbf\xf9\xa0\x0b\x30\x2a\x6d\x74\x59\xc0\x24\xaa\x26\xa0\x0d\xa8\x67\x95\x2e\x1b\x95\xc1\xd3\x83\x2a\xa0\x79\xd0\x06\xfa\xbc\x16\xa4\x0d\x24\x55\x95\x6b\x95\x21\x97\x13\x2c\x08\x08\x7c\xe1\x13\xa0\x53\x60\x81\x00\x72\x4d\x43\x11\x82\xac\xcb\x5c\x19\x09\x16\x92\x3a\x93\x40\x99\xb0\xfe\x3f\xb6\x21\x62\x21\xbd\x64\xc4\xeb\xa0\x2c\xf2\x7d\xc0\x91\x08\x62\xca\x5c\x4e\x66\x84\x09\x07\xc9\x22\x59\x28\x09\xdf\x31\x77\xaf\x30\xb7\x3e\x1d\xdb\x03\xd6\x41\x32\x53\x26\xad\x75\xd5\x36\x32\x62\x4e\x4e\x4f\xed\xbe\x98\x47\xa6\x38\xf2\x47\x74\xb9\x48\x74\x11\xff\xb6\x01\x07\xc9\xb4\x56\x49\xa3\xb2\x38\x69\x24\x78\x58\x10\x41\x67\x64\x6c\x70\x5d\xd3\x8d\x38\x27\x4c\xc4\x6d\x34\x14\x78\x36\x77\x90\x5c\x56\xd9\x21\x99\x10\x30\x88\xe6\x6d\xc2\xae\xaa\x73\x4e\x67\x98\xdf\xc0\x57\x72\x03\x56\xab\x9e\x6d\x23\xc2\x2e\x29\x23\x70\x0e\xb4\x28\x4a\xef\x02\x0d\xa5\xaf\x30\xc7\xae\x20\x1c\x42\x22\xe0\x1c\x96\xcd\xdd\x97\x33\xf4\xa6\x31\x71\xa5\xea\x85\x36\xa6\x93\xf1\xfd\x16\x75\x25\xde\x52\xb5\xa5\x18\x3d\xfa\xbc\xe9\xa3\x49\xcb\x4a\x49\x20\x2c\x9a\x59\x13\xa3\xf2\xbb\x89\x03\x93\xfb\xbc\xbc\x4d\xf2\x89\xfd\x4f\x79\xe3\x20\xca\x3c\x72\xbd\xa5\x6b\xdc\xfd\x00\xb1\xce\x9e\x25\x58\xa3\x62\x38\x74\xff\x82\x9d\x4b\xa3\xea\xce\xc8\xf6\xe5\x4d\x67\xf6\xb2\xef\x60\xe1\x37\x25\x5a\x37\xe4\xc0\x40\xfb\xfe\xf9\xb1\xdf\x1e\xf5\xe3\x27\xd9\x0f\x6d\xca\xda\x20\x00\xec\x79\xe0\x06\x2c\x14\x1c\x53\x26\xa0\x4a\x6a\x55\x34\x27\x9d\x18\xdd\xa3\x55\x3f\xbe\x7b\x44\xd3\x80\x13\x7a\xc9\xfa\x8e\x56\x0d\xd9\xc0\xc9\x94\x70\xc2\x5c\x12\x42\x07\x06\x4b\x67\xf6\xde\x64\xeb\xc8\xeb\x44\x2b\xc4\xde\x5c\x83\x91\xdb\x64\x43\xe8\x83\xc6\x7a\x71\x55\x5f\x21\xdc\x71\x97\xb7\x68\x57\x9e\x6e\xd0\x76\xe0\x83\x27\xfc\x18\xaa\x3d\x8c\xeb\x97\xc3\x4e\xaa\x61\x6f\x6c\x90\xad\x12\x5e\x9b\x6c\x07\x57\x3f\xcb\x9f\x12\xfd\xba\xb6\xbd\xf2\xa9\x58\x2f\xee\x61\x6b\xb7\x87\x7b\xed\xed\xba\xcc\x73\x95\xc1\x6d\x92\x3e\x22\x8f\x07\xf3\x97\xbe\x9c\x6d\x9d\x8e\x77\x60\x2b\x66\xce\x10\xfa\x19\x00\x00\xff\xff\x31\x26\x30\xf8\x53\x08\x00\x00"

func db20180325061015_rolesSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325061015_rolesSql,
		"db/20180325061015_roles.sql",
	)
}

func db20180325061015_rolesSql() (*asset, error) {
	bytes, err := db20180325061015_rolesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325061015_roles.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180325073312_role_seedSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xcb\x4e\xc3\x30\x10\x45\xf7\xf9\x8a\xbb\x4b\x23\xd2\x45\xbb\xed\xaa\x52\x8d\x88\x14\x52\x91\x07\x2c\x91\xc9\x0c\x74\x44\x62\x5b\xb6\x4b\xf9\x7c\xe4\xf2\x10\xec\x2a\xb1\xbc\xa3\xb9\x73\x34\x27\x5b\x2e\x71\x35\xcb\x8b\xd7\x91\x31\xb8\x14\xbb\xbb\x1a\x62\x10\x78\x8c\x62\x0d\xf2\xc1\xe5\x90\x00\x7e\xe7\xf1\x18\x99\x70\x3a\xb0\x41\x3c\x48\xc0\x67\x2f\x2d\x49\x80\x76\x6e\x12\xa6\xac\x6a\x3a\xd5\xf6\xa8\x9a\x7e\x0f\x6f\x27\x0e\x58\x08\x95\x46\xcf\x5c\x82\x38\x8c\x5e\x5c\xaa\x94\x20\x3b\x6b\x31\x8f\x42\x05\xee\xb7\xf5\xa0\x3a\x2c\x56\x65\xbe\xa5\x37\xf6\x51\x02\xfb\xfc\x77\x38\x9f\xc2\x82\xf8\x59\x1f\xa7\x58\xe4\xe5\xaa\xd8\xfc\x0b\xb5\xbe\x1c\xb5\x2e\x36\xd9\x1f\x4f\x3b\x7b\x32\xdf\xa6\x7e\x34\xa5\xe1\x45\xa2\xbc\x9d\x26\x26\x3c\xe9\xf1\x35\xdb\xa9\x5a\xf5\x0a\xd7\xed\xfe\xf6\xeb\x83\x87\x1b\xd5\x2a\x08\xa1\x6a\x92\x8f\x33\xfb\x23\x00\x00\xff\xff\x94\x44\x24\x59\xa5\x01\x00\x00"

func db20180325073312_role_seedSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325073312_role_seedSql,
		"db/20180325073312_role_seed.sql",
	)
}

func db20180325073312_role_seedSql() (*asset, error) {
	bytes, err := db20180325073312_role_seedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325073312_role_seed.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180426105326_addbalanceSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\x41\x4a\xc5\x30\x18\x04\xe0\x7d\x4e\x31\xbb\xb7\x90\x07\xee\xbb\x8a\x26\x4a\x21\xa6\xda\x26\x07\x48\xd3\x1f\x1b\x8c\x69\x68\x52\xea\xf1\xa5\x48\x05\xc1\xc5\x5b\xce\x30\x03\x1f\xbb\x5e\x71\xf7\x19\xde\x57\x57\x09\x36\x1f\x71\x78\x53\x08\x09\x85\x7c\x0d\x4b\xc2\xc5\xe6\x0b\x42\x01\x7d\x91\xdf\x2a\x4d\xd8\x67\x4a\xa8\x73\x28\xf8\xf9\x1d\xa3\x50\xe0\x72\x8e\x81\x26\xc6\x95\x91\x3d\x0c\x7f\x50\x12\x5b\xa1\xb5\x80\x0b\x81\xd1\x45\x97\x3c\xa1\xd5\x06\x56\x0f\xed\xb3\x96\x02\x42\x3e\x71\xab\x0c\xee\xa1\x3b\x03\x6d\x95\x6a\xd8\x1f\x90\x58\xf6\x74\x92\x7e\x3d\x47\x79\x93\x68\x5d\x62\xa4\x09\xa3\xf3\x1f\xff\xa8\x44\xdf\xbd\xe2\xb1\x53\xf6\x45\xe3\xe4\x35\x8c\x7d\x07\x00\x00\xff\xff\x63\x13\xeb\x9c\x11\x01\x00\x00"

func db20180426105326_addbalanceSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180426105326_addbalanceSql,
		"db/20180426105326_addbalance.sql",
	)
}

func db20180426105326_addbalanceSql() (*asset, error) {
	bytes, err := db20180426105326_addbalanceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180426105326_addbalance.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20180325060232_users.sql":      db20180325060232_usersSql,
	"db/20180325061015_roles.sql":      db20180325061015_rolesSql,
	"db/20180325073312_role_seed.sql":  db20180325073312_role_seedSql,
	"db/20180426105326_addbalance.sql": db20180426105326_addbalanceSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20180325060232_users.sql":      &bintree{db20180325060232_usersSql, map[string]*bintree{}},
		"20180325061015_roles.sql":      &bintree{db20180325061015_rolesSql, map[string]*bintree{}},
		"20180325073312_role_seed.sql":  &bintree{db20180325073312_role_seedSql, map[string]*bintree{}},
		"20180426105326_addbalance.sql": &bintree{db20180426105326_addbalanceSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
