// Code generated by go-bindata.
// sources:
// db/20170805135715_notification.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20170805135715_notificationSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcd\x8e\xda\x30\x14\x85\xf7\x7e\x8a\xb3\x4b\xa2\x82\x44\xd7\xac\xdc\x60\xda\xa8\xf9\xa1\x8e\x53\x95\x55\xe4\x26\x17\xb0\xc8\x8f\x15\x1b\xd1\xbe\x7d\x15\xa0\x55\x87\x99\xc5\xec\xec\x7b\xcf\xb1\xfc\xe9\x63\xcb\x25\x3e\xf4\xe6\x38\x69\x4f\xa8\xec\x7c\x2d\xbf\xa5\x30\x03\x1c\x35\xde\x8c\x03\x82\xca\x06\x30\x0e\xf4\x8b\x9a\x8b\xa7\x16\xd7\x13\x0d\xf0\x27\xe3\x70\xef\xcd\x21\xe3\xa0\xad\xed\x0c\xb5\x2c\x96\x82\x2b\x01\xc5\x3f\xa5\x02\xc3\xe8\xcd\xc1\x34\xb7\x10\x0b\x19\x00\x98\x16\x49\xae\xb0\x93\x49\xc6\xe5\x1e\x5f\xc5\x7e\x71\x9b\x5f\x1c\x4d\xf5\x63\x99\x17\x0a\x79\x95\xa6\xf7\x8d\x37\xbe\x23\x7c\xe7\x32\xfe\xc2\x65\xf8\x71\xb5\x8a\x9e\x02\x3d\x39\xa7\x8f\x04\x25\x7e\xbc\xea\xfe\xb6\x04\x91\x57\x59\x18\xb8\xde\x05\x0b\x04\xd4\x6b\xd3\xcd\x07\x6d\x6d\xf0\xfc\x52\x33\x91\xf6\xd4\xd6\xda\x43\x25\x99\x28\x15\xcf\x76\xd8\x88\x2d\xaf\x52\x85\xe6\x32\x4d\x34\xf8\xda\x9b\x9e\x9c\xd7\xbd\xbd\x77\xe2\x22\x2f\x95\xe4\xf3\xbf\xff\xc7\xad\x67\x20\x57\x9b\xb6\x3e\x9c\xb1\x2d\xa4\x48\x3e\xe7\x33\x2d\xc2\x07\x69\x04\x29\xb6\x42\x8a\x3c\x16\xe5\x8d\xde\x21\x34\x6d\xc4\x22\xb6\x66\x2f\xb4\x6c\xc6\xeb\xf0\x57\xcc\x3f\x2b\xf3\xf0\x5d\x5e\xa6\xb1\xeb\xa8\xc5\x4f\xdd\x9c\xd9\x46\x16\xbb\x37\xcc\xac\xd9\x9f\x00\x00\x00\xff\xff\xfd\xc9\x3e\xdd\x07\x02\x00\x00"

func db20170805135715_notificationSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170805135715_notificationSql,
		"db/20170805135715_notification.sql",
	)
}

func db20170805135715_notificationSql() (*asset, error) {
	bytes, err := db20170805135715_notificationSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170805135715_notification.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20170805135715_notification.sql": db20170805135715_notificationSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20170805135715_notification.sql": &bintree{db20170805135715_notificationSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

