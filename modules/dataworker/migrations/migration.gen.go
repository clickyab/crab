// Code generated by go-bindata.
// sources:
// db/20180423055535_conv.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20180423055535_convSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4d\x4f\xdb\x40\x10\xbd\xef\xaf\x18\xe5\x42\xa2\xc2\x01\x10\xed\x21\x27\x93\x18\x35\xaa\xf3\x51\xc7\xae\xca\xc9\x6c\xbc\x93\x78\x14\x7f\xac\x76\x37\xa4\xfc\xfb\xca\x0e\x24\x36\xb6\xa1\x4d\x2b\xa4\x8a\x1e\xf7\xbd\xe7\x95\xe6\xcd\xbc\xf5\xb0\xb3\x33\xf8\x90\xd0\x4a\x71\x83\xe0\xcb\xfc\x38\xff\xea\x00\xa5\xa0\x31\x34\x94\xa5\x70\xe2\xcb\x13\x20\x0d\xf8\x03\xc3\x8d\x41\x01\xdb\x08\x53\x30\x11\x69\xd8\x7d\x97\x8b\x48\x03\x97\x32\x26\x14\x6c\xe8\x4e\x67\xe0\x59\xd7\x8e\x0d\xa3\x1b\xb0\xbf\x8f\xe6\xde\x1c\xee\x28\x91\x0a\xb5\xa6\x2c\xd5\x77\x7d\x36\x70\x6d\xcb\xb3\x1f\x55\x25\x8a\x75\x19\x00\x09\xf8\x66\xb9\x83\xcf\x96\xdb\xfd\x78\xd9\x83\xc9\xd4\x83\x89\xef\x38\xa7\x0c\x20\xe4\x89\xe4\xb4\x4a\x03\x12\x30\x9a\x78\x55\x4e\x21\x37\x74\x8f\x8d\x9c\x0c\x1b\xb0\xa4\x86\x09\x8c\xf9\x43\x0d\xd5\x11\x57\x58\xd7\xd2\x72\x59\x80\x43\xfb\xc6\xf2\x9d\x1d\x01\x39\x23\x37\x8b\x98\x74\x84\x2a\x48\x79\x82\xad\xc5\x1c\x64\xe6\x41\x22\xd8\x13\x7f\xdc\xed\x70\x29\x3b\xa7\xd0\xd9\xe2\xa2\x53\x55\xeb\x4d\xe1\xaf\x6a\xbd\x4e\x23\x37\xc1\x4b\xde\xe5\xfe\xa0\x08\xb8\x01\x6f\x34\xb6\xe7\x9e\x35\x9e\x55\x04\x83\xe9\x64\xee\xb9\x56\x5e\x52\xa9\x25\x81\x8e\xb8\xc8\xb6\xc1\xe1\xf3\x80\x44\x20\xd7\x30\x73\x47\x63\xcb\xbd\x85\x2f\xf6\x2d\x74\x0f\xec\x29\x90\xe8\xb1\x5e\x9f\xbd\x3a\x08\x81\x40\xc3\x29\xce\xe7\xa1\x6d\x20\x9e\x24\xaf\xcd\x85\xc2\xe5\x9e\x3b\xbf\xf8\xd4\x2b\xec\xe5\x2b\xac\x81\x24\xf7\xd0\xe5\x79\xf5\x8e\x0d\xdf\x53\x17\x57\x57\xcf\x38\x8d\xea\x25\x6f\x63\x6e\x60\x38\xf5\xaf\x1d\xbb\x38\x65\x69\xe9\x74\x9c\xef\x8f\x95\x57\x6c\x4f\xe4\x9f\x59\x1f\xc6\x14\xae\xeb\x76\xef\xe0\xb7\x8c\x5e\x4b\xa0\x1a\xc3\xf7\xef\x87\xa9\xf0\xf7\x6f\xc7\x68\x77\x69\x29\x41\x0d\x3d\x7d\x6f\xe9\x29\x17\x7d\x64\x70\xaa\x26\x66\xe9\x3d\xaa\x37\xff\x31\xbd\xb3\x74\x1c\x4c\x3e\x22\x1c\x2d\xfd\xfa\x3f\xf9\xbf\x3d\xf9\xe5\x3d\x70\x98\x6d\xd3\xa7\x4d\x70\xbf\x06\xe6\xe0\x2f\x2d\x82\x2a\x8b\x63\x14\xb0\xe0\xe1\xba\xfc\x78\xd5\xbb\xd3\x6f\xa6\x9f\xe1\xe5\x97\xac\xce\x54\xa1\xfa\xe6\xd0\x42\xeb\x3e\x63\x3f\x03\x00\x00\xff\xff\xcd\x62\xc2\x73\xfb\x0a\x00\x00"

func db20180423055535_convSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180423055535_convSql,
		"db/20180423055535_conv.sql",
	)
}

func db20180423055535_convSql() (*asset, error) {
	bytes, err := db20180423055535_convSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180423055535_conv.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20180423055535_conv.sql": db20180423055535_convSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20180423055535_conv.sql": &bintree{db20180423055535_convSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
