// Code generated by go-bindata.
// sources:
// db/20170902105059_wlbl.sql
// db/20170910053350_publisher.sql
// db/20170927075829_invemtory.sql
// db/20171002100931_inventory.sql
// db/20171003071731_seed.sql
// db/20171003123737_inventory.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20170902105059_wlblSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x6f\x9b\x40\x10\x85\xef\xfc\x8a\x27\x5f\x6c\x54\x5b\xea\xa9\x97\xa8\x07\x82\x37\x2d\xaa\x01\x77\xbd\xae\x92\x13\x5a\x60\x52\xaf\xbc\x86\x15\xbb\x0e\xcd\xbf\xaf\x16\x42\xeb\x34\x4d\x94\x39\x8e\x66\x3e\x98\xf7\xf6\xad\x56\xf8\x70\x52\x3f\x3b\xe9\x08\x7b\x13\xac\x56\xd8\x7d\xdf\x40\x35\xb0\x54\x39\xd5\x36\x98\xef\xcd\x1c\xca\x82\x7e\x51\x75\x76\x54\xa3\x3f\x50\x03\x77\x50\x16\xe3\x9e\x1f\x52\x16\xd2\x18\xad\xa8\x0e\x82\x98\xb3\x48\x30\x88\xe8\x7a\xc3\x70\xb6\xd4\x15\xbd\x2e\x75\x61\x3a\xb2\xe4\x2c\x16\x01\xa0\x6a\x4c\x95\x64\x02\xd1\x5e\xe4\x45\x92\xc5\x9c\xa5\x2c\x13\xd8\xf2\x24\x8d\xf8\x1d\xbe\xb1\xbb\x65\x00\x54\x1d\x49\x47\x75\x21\x1d\x44\x92\xb2\x9d\x88\xd2\x2d\xfe\x56\x96\x0b\x64\xfb\xcd\xc6\x8f\x9e\x4d\xfd\xde\x51\x59\x39\xf5\x40\x43\xfb\x3a\xcf\x37\xf8\xa7\x9e\x51\xfd\x0d\xe3\x2f\xfb\xbf\x7d\x6b\x54\xcb\x92\xf4\xd8\xfe\x11\xf1\xf8\x6b\xc4\x17\x9f\x3e\x86\x2f\x46\x81\x38\x4f\x87\x5b\xe7\x1e\x0e\x43\x9d\x6d\x1b\xa9\xc7\xfd\xb9\x27\xd5\xed\x49\xaa\xc6\xfa\x2d\xc1\x6e\x5f\x7c\xf5\x3f\xa4\xaa\x3d\x9d\x24\x2c\x19\xe9\xcd\xac\x27\xc2\x40\x3b\xaa\x66\x92\xfc\xad\x6b\x2f\x68\xfd\x41\x39\xd2\xca\x3a\x7c\x86\xeb\xce\xb4\x44\xa9\x65\x75\x7c\xea\xdc\x4b\x6d\x69\x20\x9b\x73\xa9\x95\x3d\x50\x57\xb8\x47\xe3\xf5\x64\xd9\x3e\xc5\x62\xd6\x53\x39\x5b\x62\x26\x8d\x99\x85\xcf\x24\x8a\xf3\x6c\x27\x78\xe4\x95\x54\xcd\x03\x35\xae\xed\x1e\x8b\x41\xe2\xfb\x23\x6e\x72\xce\x92\x2f\x99\xb7\x1e\x8b\x27\xdd\x43\x70\x76\xc3\x38\xcb\x62\xb6\x1b\xbc\xb0\x58\xa8\x3a\xf4\xac\x24\x5b\xb3\xdb\x0b\xcc\x68\x6a\x31\x3e\x83\x62\xf2\x6d\x02\x2d\x27\xd3\xd7\x6c\x17\x2f\x2f\x1f\x8b\x6f\x84\x41\x78\x15\x04\x97\x71\x58\xb7\x7d\x33\x05\xe2\x4f\x1a\x7c\xf3\x5d\x79\xe8\x5a\xad\xa9\x46\x29\xab\x63\xb0\xe6\xf9\xf6\xb5\x40\x5c\x05\xbf\x03\x00\x00\xff\xff\x02\x72\x56\x53\x83\x03\x00\x00"

func db20170902105059_wlblSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170902105059_wlblSql,
		"db/20170902105059_wlbl.sql",
	)
}

func db20170902105059_wlblSql() (*asset, error) {
	bytes, err := db20170902105059_wlblSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170902105059_wlbl.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20170910053350_publisherSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8e\xd3\x30\x10\x40\xef\xfe\x8a\x51\x2e\x9b\x88\x5d\x09\x38\xc0\x61\x4f\x26\xeb\x42\x44\xe2\x14\xc7\x41\xea\x29\x72\xe2\xa1\xb5\x9a\x3a\x56\xec\xa8\xf0\xf7\x28\x69\x29\x22\x95\x80\x9b\xed\x79\x23\x59\x4f\x8f\x3c\x3d\xc1\xab\x93\xd9\x8f\x2a\x20\xd4\x6e\xbe\x56\x5f\x72\x30\x16\x3c\x76\xc1\x0c\x16\x1e\x6a\xf7\x00\xc6\x03\x7e\xc7\x6e\x0a\xa8\xe1\x7c\x40\x0b\xe1\x60\x3c\x5c\xf6\x66\xc8\x78\x50\xce\xf5\x06\x35\x49\x05\xa3\x92\x81\xa4\x1f\x72\x06\x6e\x6a\x7b\xe3\x0f\x38\x7a\x12\x13\x00\x00\xa3\x21\xe3\x12\xb6\x22\x2b\xa8\xd8\xc1\x67\xb6\x03\x5a\xcb\xb2\xc9\x78\x2a\x58\xc1\xb8\x7c\x5c\xb0\xc9\xe3\xd8\x5c\x59\x5e\x4a\xe0\x75\x9e\x5f\x26\x56\x9d\x10\xbe\x52\x91\x7e\xa2\x22\x7e\xf3\xf6\x7d\xb2\x9a\xeb\xe1\xa4\x8c\xbd\x11\xef\x5e\xaf\x01\x37\xb5\x4d\xf8\xe1\x10\x18\xaf\x8b\x38\x52\xce\x45\x8f\x10\x9d\xb1\x8d\xd6\xa4\x0f\x2a\x4c\xfe\xca\x39\xb4\xda\xd8\xfd\xcc\xb6\xfd\xd0\x1d\x51\xcf\x47\xd5\x75\xe8\x02\xea\xfb\xdd\x69\xd1\x31\xfe\xe5\x23\xdd\x88\x2a\xa0\x6e\x54\x00\x99\x15\xac\x92\xb4\xd8\xae\x90\xc9\xe9\x7f\x21\x69\xc9\x2b\x29\xe8\x2c\xea\xb7\xec\x66\xf6\xe7\x1b\xa3\x9b\x6f\x47\xd8\x94\x82\x65\x1f\xf9\xe2\x3a\xbe\x8a\x4d\x40\xb0\x0d\x13\x8c\xa7\xac\x5a\x64\x7b\x88\x8d\x4e\x48\xf2\x4c\xfe\x28\xe2\x65\x38\xdb\x5f\x4d\xdc\x82\x98\x1f\xff\x2b\x89\x71\xe8\x7b\xd4\xd0\xaa\xee\x48\x5e\x44\xb9\xbd\x8b\xe2\x99\x90\x9f\x01\x00\x00\xff\xff\xc7\x4c\x41\xd2\x81\x02\x00\x00"

func db20170910053350_publisherSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170910053350_publisherSql,
		"db/20170910053350_publisher.sql",
	)
}

func db20170910053350_publisherSql() (*asset, error) {
	bytes, err := db20170910053350_publisherSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170910053350_publisher.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20170927075829_invemtorySql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\x41\x4b\xc4\x30\x10\x05\xe0\x7b\x7e\xc5\xbb\xed\x41\xf6\x17\xf4\x54\x4d\x04\x21\xdb\x6a\x4d\xce\x25\xdb\x0c\xee\x60\x36\x09\x49\x96\xfa\xf3\xa5\x88\x82\xf4\xa0\xc7\x99\xf7\x1e\x7c\xe2\x78\xc4\xdd\x95\xdf\x8a\x6b\x04\x9b\xb7\xf3\xf5\x45\x83\x23\x2a\x2d\x8d\x53\xc4\xc1\xe6\x03\xb8\x82\x3e\x68\xb9\x35\xf2\x58\x2f\x14\xd1\x2e\x5c\xf1\xb5\xdb\x4a\x5c\xe1\x72\x0e\x4c\x5e\x48\xa5\x95\x51\x78\x9c\xc6\x13\x6e\x95\xca\xbc\x86\x73\x98\x73\xa1\x4a\xad\x76\xa2\xd7\x46\x4d\x30\xfd\xbd\x56\xfb\x18\xbd\x94\x78\x18\xb5\x3d\x0d\xf0\xe9\xea\x38\xce\xec\xf1\x34\x18\x0c\xa3\xc1\x60\xb5\xee\xc4\x2f\xb1\x4c\x6b\xfc\x36\xff\x80\xb7\xe7\xbf\xc8\x25\x85\x40\x1e\x67\xb7\xbc\xff\xe1\x92\xd3\xf8\xbc\x83\x75\x42\x7c\x06\x00\x00\xff\xff\x77\xed\xdf\xa0\x3f\x01\x00\x00"

func db20170927075829_invemtorySqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170927075829_invemtorySql,
		"db/20170927075829_invemtory.sql",
	)
}

func db20170927075829_invemtorySql() (*asset, error) {
	bytes, err := db20170927075829_invemtorySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170927075829_invemtory.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20171002100931_inventorySql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x5d\x6f\x9b\x3c\x14\xbe\xe7\x57\x1c\xe5\x06\xd0\xdb\x48\x6f\x77\xb1\x69\xea\x15\x4d\x9c\x0d\x8d\x40\x46\xcc\xd4\x5e\x21\x83\xcf\x1a\x2b\x89\xb1\xb0\x69\xb6\x7f\x3f\x99\x38\x29\xc9\xb2\x2e\xea\xb8\xb2\x8e\xcf\x63\xfb\x3c\x1f\x8c\xc7\xf0\xdf\x56\x3c\xb5\xcc\x20\x14\xca\x1b\x8f\x61\xf9\x35\x01\x21\x41\x63\x6d\x44\x23\xc1\x2f\x94\x0f\x42\x03\xfe\xc0\xba\x33\xc8\x61\xb7\x42\x09\x66\x25\x34\xec\x71\xb6\x49\x68\x60\x4a\x6d\x04\x72\x6f\x9a\x67\x0b\xa0\xd1\x7d\x42\x40\x75\xd5\x46\xe8\x15\xb6\xfa\xce\x9b\xe4\x24\xa2\xc4\x6d\x08\xf9\x8c\xd2\x34\xad\x40\x0d\x81\x07\x20\x38\xb8\xef\x5b\x94\x4f\x3e\x47\x79\x70\xfb\xf1\x36\x84\x45\x1e\xcf\xa3\xfc\x11\xbe\x90\xc7\x1b\x0f\xa0\x6e\x91\x19\x2c\x99\x01\x1a\xcf\xc9\x92\x46\xf3\x05\xbc\xfe\xa5\x19\x85\xb4\x48\x12\x8b\xee\x14\xff\x07\x34\xab\x8d\x78\x46\x5b\xbd\xcf\xb2\xe4\x2f\xc0\x13\x34\x4c\xc9\x2c\x2a\x12\x0a\xb7\xf6\x1c\xc9\xb6\x78\x36\xe9\xbb\x0f\xe1\xb5\xaf\xe0\xcd\x96\x09\xf9\x56\x74\xcd\x8c\xab\x52\xf2\x40\xaf\x9a\xc1\x21\x8f\x42\xbe\xe9\xde\xb5\x90\x4e\x5f\x92\x16\x73\x08\x7c\xa6\x94\x7f\x03\xfe\x0e\x2b\xff\xf2\x21\x43\xb4\x36\xcc\x74\x7a\x80\x56\x28\xb9\x90\x4f\xf6\x84\x6a\xd3\xd4\x6b\xe4\x76\xc9\xea\x1a\x95\x41\xee\x87\x47\xb4\x17\x1e\x6d\x17\xa7\x53\xf2\x30\xb4\x5d\xe9\xa8\xcc\xd2\x61\x35\xd8\x57\xfb\xe9\xc2\x3b\xcf\x1b\x86\x63\xda\xec\xe4\x21\x1e\xc7\x6c\xd8\xe2\x55\xe9\x68\x9b\xcd\x06\x39\x54\xac\x5e\x0f\x13\x32\xb8\xfb\x2c\x22\x2f\xd9\xf1\x5c\x42\xe2\x94\x0e\x13\x01\x51\x41\xb3\x32\x4e\x27\x39\x99\x93\x94\xf6\x16\xd7\xd8\x96\xae\x73\x48\x61\x6f\xba\x13\xe5\x2e\x98\xea\xb0\xff\xfe\xff\xd3\x6d\xd5\x55\xa5\xf9\xa9\xb0\xa7\x3f\x18\x31\xa5\x46\x37\x30\xda\x61\x35\x0a\x2f\xe9\xb4\xef\x72\x1a\xd9\x4e\xa7\x91\x5d\x1e\x34\x3a\x47\x76\xfd\xaf\xa3\xfd\xe3\x13\xf6\xc1\xe7\xa7\xd9\xfd\x3d\xdb\xaf\x34\x4c\xb2\x74\x49\xf3\xc8\x12\xf3\x42\x6c\x69\xf9\xd2\xa5\xe0\xe5\xf7\x35\xcc\xb2\x9c\xc4\x9f\xd2\x9e\xd9\xc0\x11\x19\x42\x4e\x66\x24\x27\xe9\x84\x2c\x7b\x72\x35\x04\x82\x87\xd6\x57\x9e\xf7\x2b\x00\x00\xff\xff\xc2\x64\xa6\x11\x39\x05\x00\x00"

func db20171002100931_inventorySqlBytes() ([]byte, error) {
	return bindataRead(
		_db20171002100931_inventorySql,
		"db/20171002100931_inventory.sql",
	)
}

func db20171002100931_inventorySql() (*asset, error) {
	bytes, err := db20171002100931_inventorySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20171002100931_inventory.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20171003071731_seedSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x14\x84\xef\xfd\x15\xef\x96\x16\xb3\x87\xed\xd5\x93\xb0\x15\x16\x6a\x8b\xdb\x56\x8f\x25\x9b\x3c\xed\xc3\x6c\x12\x92\xd4\xea\xbf\x97\x50\x15\xf4\xe2\x5e\x44\x2f\x61\x32\xcc\x9b\x39\x7c\xd9\x66\x03\x17\x27\x7a\xf4\x22\x22\x0c\x2e\x7d\xbb\xdb\x1a\xc8\x40\x40\x19\xc9\x1a\x60\x83\x63\x40\x01\xf0\x05\xe5\x1c\x51\xc1\x32\xa1\x81\x38\x51\x80\xf5\x2e\x85\x28\x80\x70\x4e\x13\xaa\x6c\x57\xd5\x55\x5f\xc1\xf5\xa1\xbd\x01\x6f\x35\x8e\x0e\xfd\x89\x42\x48\xb1\x65\x42\x8f\x40\x2a\xf5\xe7\x5b\x5e\x16\x97\xd9\xbe\xe9\xaa\x43\x0f\xfb\xa6\x6f\xbf\xc7\x73\x52\x7c\xf5\x92\x48\x3e\x87\x20\xad\x43\x0e\xd2\xa3\x88\xa8\x46\x11\x39\xcc\x4e\xbd\xeb\x02\xee\xae\xea\xa1\xea\x52\xf7\x96\x33\x32\xcf\x68\xa2\xf5\xaf\xa3\xa6\x10\x19\x67\x01\xf5\x03\xe3\x4d\x7b\x9f\x17\xeb\xfb\x6b\xfb\x25\x2f\xcf\xdc\xcf\xbe\x10\xd8\xd9\xc5\x7c\x30\xf8\x04\x90\xcc\xb3\x10\x78\xab\x35\x2a\x38\x0a\xf9\xf4\x8f\x30\xb8\xf9\xf8\x47\x00\x7e\x58\xce\xde\x02\x00\x00\xff\xff\xd9\xb5\x65\x28\xfd\x02\x00\x00"

func db20171003071731_seedSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20171003071731_seedSql,
		"db/20171003071731_seed.sql",
	)
}

func db20171003071731_seedSql() (*asset, error) {
	bytes, err := db20171003071731_seedSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20171003071731_seed.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20171003123737_inventorySql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xcf\xcd\x4a\xc4\x30\x14\x05\xe0\xfd\x3c\xc5\xd9\xcd\x42\xe6\x09\x5c\x45\x0d\x2a\x64\xea\xcf\xa4\x6b\x13\x93\x8b\x73\xb1\x26\x21\xc9\x38\x3e\xbe\xd4\xd2\x52\x17\x85\xc2\xec\xce\x09\xb9\x07\xbe\xcd\x6e\x87\xab\x2f\xfe\xc8\xb6\x12\xda\xd4\xd7\xc3\x8b\x02\x07\x14\x72\x95\x63\xc0\xb6\x4d\x5b\x70\x01\xfd\x90\x3b\x55\xf2\x38\x1f\x29\xa0\x1e\xb9\x60\xb8\xeb\x3f\x71\x81\x4d\xa9\x63\xf2\x1b\xa1\xb4\x7c\x85\x16\x37\x4a\xc2\x70\xf8\xa6\x50\x63\x66\x2a\x06\xb7\x0f\xa2\xb9\x97\x30\x2e\x93\xad\xf4\x66\xab\x19\xb3\xff\x2b\xfa\x71\x2f\x0f\x5a\xec\x9f\xd1\x3c\x69\x34\xad\x52\xd7\x2b\xd6\x4e\xc9\x4f\x6b\x43\x5e\x5e\xfb\xa7\xbd\x8b\xe7\x30\x7a\x27\x6c\xff\xb8\x8a\x9b\x63\xd7\x91\xc7\xbb\x75\x9f\xab\xc9\x7e\x6e\xbe\x98\xec\xe7\xe6\x65\xf2\x6f\x00\x00\x00\xff\xff\xfe\xd7\x54\x61\xe2\x01\x00\x00"

func db20171003123737_inventorySqlBytes() ([]byte, error) {
	return bindataRead(
		_db20171003123737_inventorySql,
		"db/20171003123737_inventory.sql",
	)
}

func db20171003123737_inventorySql() (*asset, error) {
	bytes, err := db20171003123737_inventorySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20171003123737_inventory.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20170902105059_wlbl.sql": db20170902105059_wlblSql,
	"db/20170910053350_publisher.sql": db20170910053350_publisherSql,
	"db/20170927075829_invemtory.sql": db20170927075829_invemtorySql,
	"db/20171002100931_inventory.sql": db20171002100931_inventorySql,
	"db/20171003071731_seed.sql": db20171003071731_seedSql,
	"db/20171003123737_inventory.sql": db20171003123737_inventorySql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20170902105059_wlbl.sql": &bintree{db20170902105059_wlblSql, map[string]*bintree{}},
		"20170910053350_publisher.sql": &bintree{db20170910053350_publisherSql, map[string]*bintree{}},
		"20170927075829_invemtory.sql": &bintree{db20170927075829_invemtorySql, map[string]*bintree{}},
		"20171002100931_inventory.sql": &bintree{db20171002100931_inventorySql, map[string]*bintree{}},
		"20171003071731_seed.sql": &bintree{db20171003071731_seedSql, map[string]*bintree{}},
		"20171003123737_inventory.sql": &bintree{db20171003123737_inventorySql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

