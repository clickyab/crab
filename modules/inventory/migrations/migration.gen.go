// Code generated by go-bindata.
// sources:
// db/20170902105059_filter.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20170902105059_filterSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x51\x6f\x9b\x30\x18\x7c\xf7\xaf\x38\xe5\x25\x89\x96\x48\x7b\xda\x4b\xb5\x07\x4a\x2c\x0d\x2d\x40\x4a\xcc\xd4\x3e\x21\x03\xdf\x16\x2b\x0e\x58\xd8\x34\xeb\xbf\x9f\x0c\x61\x4d\xd7\xb5\xaa\x1f\x4f\x77\x07\xdf\xdd\xad\xd7\xf8\x74\x52\xbf\x3a\xe9\x08\xb9\x61\xeb\x35\xf6\x77\x5b\xa8\x06\x96\x2a\xa7\xda\x06\xf3\xdc\xcc\xa1\x2c\xe8\x37\x55\xbd\xa3\x1a\xe7\x03\x35\x70\x07\x65\x31\xea\x3c\x49\x59\x48\x63\xb4\xa2\x9a\xb1\x30\xe3\x81\xe0\x10\xc1\xed\x96\xa3\xb7\xd4\x15\xaa\x79\xa4\xc6\xb5\x9d\x22\x8b\x05\x03\x54\x8d\xe9\x45\x89\x40\x90\x8b\xb4\x88\x92\x30\xe3\x31\x4f\x04\x76\x59\x14\x07\xd9\x03\xbe\xf3\x87\x15\x03\xaa\x8e\xa4\xa3\xba\x90\x0e\x22\x8a\xf9\x5e\x04\xf1\x0e\xcf\x2f\x49\x05\x92\x7c\xbb\xf5\xd4\xde\xd4\x1f\xa5\xca\xca\xa9\x47\x1a\xe0\xdb\x34\xdd\xe2\x9f\xf7\xc2\x75\x38\xa1\x9e\xfe\xf6\x3d\xaa\x96\x25\xe9\x11\xfe\x11\x64\xe1\xb7\x20\x5b\x7c\xf9\xbc\x7c\x45\x05\xc2\x34\x1e\x6e\x9d\x7b\x73\x18\xea\x6c\xdb\x48\x3d\xea\xe7\xde\xa9\x6e\x4f\x52\x35\xd6\xab\x04\xbf\x7f\xf5\xd5\xff\x38\x55\xed\xe9\x24\x61\xc9\x48\xdf\x65\x3d\x39\x0c\x6e\x47\xd5\x4c\x91\xbf\x77\xed\x95\xdb\xf9\xa0\x1c\x69\x65\x1d\xbe\xc2\x75\x3d\xad\x50\x6a\x59\x1d\x2f\xc8\x4f\xa9\x2d\x0d\xce\xa6\x2f\xb5\xb2\x07\xea\x0a\xf7\x64\x7c\x9e\x3c\xc9\x63\x2c\x66\x67\x2a\x67\x2b\xcc\xa4\x31\xb3\xe5\x8b\x88\xc2\x34\xd9\x8b\x2c\xf0\x49\x4e\xb3\x78\x2a\x86\x88\xc7\xf0\xf2\x24\xba\xcb\x39\x16\x97\xd4\x57\x63\x26\x4b\x2f\x8d\x92\x0d\xbf\xbf\x52\x8d\x1d\x16\x63\xeb\xc5\x54\xd3\xb3\xf2\xd2\xf1\x86\xef\xc3\xd5\xf5\x36\x3c\xb0\x64\xcb\x1b\xc6\xae\xc7\xbf\x69\xcf\xcd\x34\xff\xbf\xdb\xf7\xe0\x87\xd6\xdf\xb5\x5a\x53\x8d\x52\x56\x47\xb6\xc9\xd2\xdd\x1b\xf3\xbf\x61\x7f\x02\x00\x00\xff\xff\x66\x53\xc2\xa6\x70\x03\x00\x00"

func db20170902105059_filterSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170902105059_filterSql,
		"db/20170902105059_filter.sql",
	)
}

func db20170902105059_filterSql() (*asset, error) {
	bytes, err := db20170902105059_filterSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170902105059_filter.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20170902105059_filter.sql": db20170902105059_filterSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20170902105059_filter.sql": &bintree{db20170902105059_filterSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

