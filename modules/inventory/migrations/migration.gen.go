// Code generated by go-bindata.
// sources:
// db/20170902105059_wlbl.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20170902105059_wlblSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x6f\x9b\x40\x10\x85\xef\xfc\x8a\x27\x5f\x6c\x54\x5b\xea\xa9\x97\xa8\x07\x82\x37\x2d\xaa\x01\x77\xbd\xae\x92\x13\x5a\x60\x52\xaf\xbc\x86\x15\xbb\x0e\xcd\xbf\xaf\x16\x42\xeb\x34\x4d\x94\x39\x8e\x66\x3e\x98\xf7\xf6\xad\x56\xf8\x70\x52\x3f\x3b\xe9\x08\x7b\x13\xac\x56\xd8\x7d\xdf\x40\x35\xb0\x54\x39\xd5\x36\x98\xef\xcd\x1c\xca\x82\x7e\x51\x75\x76\x54\xa3\x3f\x50\x03\x77\x50\x16\xe3\x9e\x1f\x52\x16\xd2\x18\xad\xa8\x0e\x82\x98\xb3\x48\x30\x88\xe8\x7a\xc3\x70\xb6\xd4\x15\xbd\x2e\x75\x61\x3a\xb2\xe4\x2c\x16\x01\xa0\x6a\x4c\x95\x64\x02\xd1\x5e\xe4\x45\x92\xc5\x9c\xa5\x2c\x13\xd8\xf2\x24\x8d\xf8\x1d\xbe\xb1\xbb\x65\x00\x54\x1d\x49\x47\x75\x21\x1d\x44\x92\xb2\x9d\x88\xd2\x2d\xfe\x56\x96\x0b\x64\xfb\xcd\xc6\x8f\x9e\x4d\xfd\xde\x51\x59\x39\xf5\x40\x43\xfb\x3a\xcf\x37\xf8\xa7\x9e\x51\xfd\x0d\xe3\x2f\xfb\xbf\x7d\x6b\x54\xcb\x92\xf4\xd8\xfe\x11\xf1\xf8\x6b\xc4\x17\x9f\x3e\x86\x2f\x46\x81\x38\x4f\x87\x5b\xe7\x1e\x0e\x43\x9d\x6d\x1b\xa9\xc7\xfd\xb9\x27\xd5\xed\x49\xaa\xc6\xfa\x2d\xc1\x6e\x5f\x7c\xf5\x3f\xa4\xaa\x3d\x9d\x24\x2c\x19\xe9\xcd\xac\x27\xc2\x40\x3b\xaa\x66\x92\xfc\xad\x6b\x2f\x68\xfd\x41\x39\xd2\xca\x3a\x7c\x86\xeb\xce\xb4\x44\xa9\x65\x75\x7c\xea\xdc\x4b\x6d\x69\x20\x9b\x73\xa9\x95\x3d\x50\x57\xb8\x47\xe3\xf5\x64\xd9\x3e\xc5\x62\xd6\x53\x39\x5b\x62\x26\x8d\x99\x85\xcf\x24\x8a\xf3\x6c\x27\x78\xe4\x95\x54\xcd\x03\x35\xae\xed\x1e\x8b\x41\xe2\xfb\x23\x6e\x72\xce\x92\x2f\x99\xb7\x1e\x8b\x27\xdd\x43\x70\x76\xc3\x38\xcb\x62\xb6\x1b\xbc\xb0\x58\xa8\x3a\xf4\xac\x24\x5b\xb3\xdb\x0b\xcc\x68\x6a\x31\x3e\x83\x62\xf2\x6d\x02\x2d\x27\xd3\xd7\x6c\x17\x2f\x2f\x1f\x8b\x6f\x84\x41\x78\x15\x04\x97\x71\x58\xb7\x7d\x33\x05\xe2\x4f\x1a\x7c\xf3\x5d\x79\xe8\x5a\xad\xa9\x46\x29\xab\x63\xb0\xe6\xf9\xf6\xb5\x40\x5c\x05\xbf\x03\x00\x00\xff\xff\x02\x72\x56\x53\x83\x03\x00\x00"

func db20170902105059_wlblSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170902105059_wlblSql,
		"db/20170902105059_wlbl.sql",
	)
}

func db20170902105059_wlblSql() (*asset, error) {
	bytes, err := db20170902105059_wlblSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170902105059_wlbl.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20170902105059_wlbl.sql": db20170902105059_wlblSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20170902105059_wlbl.sql": &bintree{db20170902105059_wlblSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

