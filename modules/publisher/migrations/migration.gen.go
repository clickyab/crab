// Code generated by go-bindata.
// sources:
// db/20170910053350_publisher.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20170910053350_publisherSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8e\xd3\x30\x10\x40\xef\xfe\x8a\x51\x2e\x9b\x88\x5d\x09\x38\xc0\x61\x4f\x26\xeb\x42\x44\xe2\x14\xc7\x41\xea\x29\x72\xe2\xa1\xb5\x9a\x3a\x56\xec\xa8\xf0\xf7\x28\x69\x29\x22\x95\x80\x9b\xed\x79\x23\x59\x4f\x8f\x3c\x3d\xc1\xab\x93\xd9\x8f\x2a\x20\xd4\x6e\xbe\x56\x5f\x72\x30\x16\x3c\x76\xc1\x0c\x16\x1e\x6a\xf7\x00\xc6\x03\x7e\xc7\x6e\x0a\xa8\xe1\x7c\x40\x0b\xe1\x60\x3c\x5c\xf6\x66\xc8\x78\x50\xce\xf5\x06\x35\x49\x05\xa3\x92\x81\xa4\x1f\x72\x06\x6e\x6a\x7b\xe3\x0f\x38\x7a\x12\x13\x00\x00\xa3\x21\xe3\x12\xb6\x22\x2b\xa8\xd8\xc1\x67\xb6\x03\x5a\xcb\xb2\xc9\x78\x2a\x58\xc1\xb8\x7c\x5c\xb0\xc9\xe3\xd8\x5c\x59\x5e\x4a\xe0\x75\x9e\x5f\x26\x56\x9d\x10\xbe\x52\x91\x7e\xa2\x22\x7e\xf3\xf6\x7d\xb2\x9a\xeb\xe1\xa4\x8c\xbd\x11\xef\x5e\xaf\x01\x37\xb5\x4d\xf8\xe1\x10\x18\xaf\x8b\x38\x52\xce\x45\x8f\x10\x9d\xb1\x8d\xd6\xa4\x0f\x2a\x4c\xfe\xca\x39\xb4\xda\xd8\xfd\xcc\xb6\xfd\xd0\x1d\x51\xcf\x47\xd5\x75\xe8\x02\xea\xfb\xdd\x69\xd1\x31\xfe\xe5\x23\xdd\x88\x2a\xa0\x6e\x54\x00\x99\x15\xac\x92\xb4\xd8\xae\x90\xc9\xe9\x7f\x21\x69\xc9\x2b\x29\xe8\x2c\xea\xb7\xec\x66\xf6\xe7\x1b\xa3\x9b\x6f\x47\xd8\x94\x82\x65\x1f\xf9\xe2\x3a\xbe\x8a\x4d\x40\xb0\x0d\x13\x8c\xa7\xac\x5a\x64\x7b\x88\x8d\x4e\x48\xf2\x4c\xfe\x28\xe2\x65\x38\xdb\x5f\x4d\xdc\x82\x98\x1f\xff\x2b\x89\x71\xe8\x7b\xd4\xd0\xaa\xee\x48\x5e\x44\xb9\xbd\x8b\xe2\x99\x90\x9f\x01\x00\x00\xff\xff\xc7\x4c\x41\xd2\x81\x02\x00\x00"

func db20170910053350_publisherSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170910053350_publisherSql,
		"db/20170910053350_publisher.sql",
	)
}

func db20170910053350_publisherSql() (*asset, error) {
	bytes, err := db20170910053350_publisherSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170910053350_publisher.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20170910053350_publisher.sql": db20170910053350_publisherSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20170910053350_publisher.sql": &bintree{db20170910053350_publisherSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

