// Code generated by go-bindata.
// sources:
// db/20170924113721_ad.sql
// db/20170926112439_ads.sql
// db/20171229201129_addattr.sql
// db/20180115102324_title.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20170924113721_adSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8e\xd3\x30\x10\x86\xef\x7e\x8a\xb9\x39\x15\xa9\x94\x15\x82\x03\x7b\x0a\x6d\x90\x2a\xd2\xb4\x64\x9d\xc3\x9e\x6a\xaf\x3d\x4a\x06\x1a\xd7\xb2\xa7\x2d\xbc\x3d\xca\xc2\xb2\x2a\x14\xa9\xd2\x1c\x6c\xff\xf3\x8f\x47\x33\x9f\x98\xcf\xe1\xcd\x48\x7d\x34\x8c\xd0\x85\xe9\xfa\xf0\xa5\x06\xf2\x90\xd0\x32\x1d\x3c\xc8\x2e\x48\xa0\x04\xf8\x1d\xed\x91\xd1\xc1\x79\x40\x0f\x3c\x50\x82\x5f\xbe\x29\x89\x12\x98\x10\xf6\x84\x4e\x2c\xda\xaa\x54\x15\xa8\xf2\x63\x5d\x81\x36\x2e\x69\xc8\x84\x26\xa7\x81\x3c\x67\x77\x77\x33\x68\x36\x0a\x9a\xae\xae\xa1\xec\xd4\x66\xb7\x6a\x16\x6d\xb5\xae\x1a\x95\x0b\x6d\xcd\x18\x0c\xf5\x7e\x77\x2d\x3d\x17\x3a\x45\xab\xe1\x64\xa2\x1d\x4c\xcc\xde\xfd\x25\xb2\x89\x3d\xf2\xff\xf5\x33\x39\x1e\xae\x96\x1d\x90\xfa\x81\xaf\xff\xc8\x86\x8f\x49\x03\xfa\xe3\x98\xc9\x80\xde\x91\xef\x65\x2e\x8d\xb5\x18\x18\x9d\xcc\x65\xc4\xaf\x68\xa7\xe3\x65\x37\x3f\x02\xbe\xd8\x9e\x8c\xf7\x18\x65\x2e\xbd\x61\x3a\xa1\xcc\xe5\x89\x1c\x1e\x2e\x0d\x23\x8d\xf8\xda\xfc\xfb\xb7\x17\xa2\x8d\x68\x18\xdd\xce\xb0\x06\xa6\x11\x13\x9b\x31\xbc\x0e\x72\x59\x7d\x2a\xbb\x5a\xc1\xa2\x6b\xdb\xaa\x51\x3b\xb5\x5a\x57\x0f\xaa\x5c\x6f\x61\xd3\x40\xb7\x5d\x4e\x0b\xf9\x47\xcb\x85\x3e\x06\x77\x4b\x59\x59\x14\x45\x31\x7f\x0e\x28\x8a\x0f\xcf\x21\x73\xb1\x6d\x57\xeb\xb2\x7d\x84\xcf\xd5\x23\x64\xd3\x86\x67\x62\x76\x2f\x2e\x88\x5a\x1e\xce\xfe\x85\xa9\x3f\x40\x4d\x8f\x37\x21\x15\x0f\xfb\x3d\x3a\x78\x32\xf6\x9b\x58\xb6\x9b\xed\x6f\xa8\x8c\x4b\xf7\x42\xfc\x0c\x00\x00\xff\xff\xb7\xae\x89\x0e\xba\x02\x00\x00"

func db20170924113721_adSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170924113721_adSql,
		"db/20170924113721_ad.sql",
	)
}

func db20170924113721_adSql() (*asset, error) {
	bytes, err := db20170924113721_adSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170924113721_ad.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20170926112439_adsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x6f\xc2\x30\x14\x84\xf7\xfc\x8a\xdb\x00\x55\x0c\x0c\x1d\x2a\x26\x37\x79\xb4\x51\x53\xa7\x98\xa4\x2a\x53\xe4\xda\x2e\x58\x84\xc4\x8a\x83\xe0\xe7\x57\x01\x41\x41\x8a\x54\x46\x9f\xdf\xbb\x77\xfa\x2e\x18\x8f\xf1\xb0\xb5\xab\x46\xb6\x06\xb9\xeb\x9e\x8b\x79\x02\x5b\xc1\x1b\xd5\xda\xba\xc2\x20\x77\x03\x58\x0f\x73\x30\x6a\xd7\x1a\x8d\xfd\xda\x54\x68\xd7\xd6\xe3\xb4\xd7\x0d\x59\x0f\xe9\x5c\x69\x8d\x0e\x58\x92\x91\x40\xc6\x9e\x13\x82\xd4\x3e\x00\x58\x14\x21\x4c\xf9\x22\x13\x2c\xe6\x59\x27\x16\x4a\x6e\x9d\xb4\xab\xaa\xb0\xba\xf8\xd9\x60\x96\x0a\x8a\x5f\x38\xde\x68\x89\xe1\xd5\xdf\x08\x82\x66\x24\x88\x87\xb4\xc0\x59\xf7\x18\x5a\x3d\x9a\x76\xc6\xb7\xa7\xf0\x9e\x46\xf1\x6c\x09\xdf\x28\x7c\x32\x11\xbe\x32\x31\x9c\x3c\x4d\x46\xe0\x69\x06\x9e\x27\x49\xcf\x4e\x7f\xbc\x9d\x2b\x6b\xa9\xfb\xc2\xf9\x46\xdd\x84\x3a\x4d\xfe\x45\x0a\x05\xb1\x8c\x90\xf3\x78\x9e\x13\x62\x1e\xd1\xd7\xd1\xd1\x37\xaa\xd8\xd9\x4a\x9b\x03\x52\x7e\x0c\x7b\xb4\x9a\x06\x37\x05\x44\xf5\xbe\x3a\x57\x70\xe1\xdf\x89\x77\x35\xd0\xd4\x65\x69\x34\xbe\xa5\xda\xf4\xb4\x10\x89\xf4\xa3\x87\xfd\x9d\x1c\x1f\x27\xff\x72\xbc\x1c\xb8\xa6\x37\x0d\x82\xdf\x00\x00\x00\xff\xff\x3d\xd4\x27\xc9\x63\x02\x00\x00"

func db20170926112439_adsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20170926112439_adsSql,
		"db/20170926112439_ads.sql",
	)
}

func db20170926112439_adsSql() (*asset, error) {
	bytes, err := db20170926112439_adsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20170926112439_ads.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20171229201129_addattrSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9e\xe2\xa3\x97\x1e\xa4\x4f\x50\x3c\x44\x93\x5b\xb4\xb5\x4d\xc0\x6b\x6c\x06\x1b\xac\x69\x68\x22\x15\xc4\x77\x5f\xba\x65\x97\x5d\xf6\xb2\xc7\x99\xf9\x0f\xfc\x58\x55\xe1\xe1\xdb\x7f\x2e\x36\x13\x4c\xdc\xc6\xfe\x4d\xc1\x07\x24\x1a\xb2\x9f\x03\x4a\x13\x4b\xf8\x04\xfa\xa5\xe1\x27\x93\xc3\x3a\x52\x40\x1e\x7d\xc2\xfe\xb7\x45\x3e\xc1\xc6\x38\x79\x72\x8c\x2b\x2d\x3b\x68\xfe\xa4\x24\xac\x4b\xe0\x42\xe0\xb9\x51\xe6\xe5\x15\x36\xe7\x05\x5a\xbe\xeb\x9a\x99\x56\x70\xbd\x07\xbd\xd4\xc7\xcb\x63\xf1\xf7\x5f\xd4\xec\x4a\x24\xe6\x35\x9c\x4c\x67\xd0\xb6\xbc\x8b\xb4\xcc\xd3\x44\x0e\x1f\x76\xf8\xba\x61\x89\xae\x69\x2f\x5d\x35\x63\x87\x00\x00\x00\xff\xff\x95\x7c\x52\x52\x0c\x01\x00\x00"

func db20171229201129_addattrSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20171229201129_addattrSql,
		"db/20171229201129_addattr.sql",
	)
}

func db20171229201129_addattrSql() (*asset, error) {
	bytes, err := db20171229201129_addattrSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20171229201129_addattr.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180115102324_titleSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x4f\xc4\x20\x14\x84\xef\xfc\x8a\xc9\x5e\x56\x63\x36\xf1\xe2\xa9\x27\x5c\x6a\x3c\x60\xab\x08\xde\xb1\xbc\xb8\x2f\x22\x25\x0b\x66\xfd\xf9\xa6\xad\x35\x51\x2f\x1e\x99\xf0\xbd\xf9\x46\xec\x76\xb8\x78\xe3\x97\xa3\xaf\x04\x97\xa7\xe7\xe3\x83\x06\x27\x14\x1a\x2a\x8f\x09\x5b\x97\xb7\xe0\x02\xfa\xa0\xe1\xbd\x52\xc0\xe9\x40\x09\xf5\xc0\x05\x0b\x37\x7d\xe2\x02\x9f\x73\x64\x0a\x42\x6a\xdb\x1a\x58\x79\xad\x5b\xf8\x50\x20\x95\x42\xe5\x1a\x09\x4f\xd2\xec\x6f\xa5\x39\xbb\xba\x3c\x87\x6a\x6f\xa4\xd3\x16\x9b\x0d\xba\xde\xa2\x73\x5a\x37\xbf\x51\x01\x2c\xc9\xbe\xd7\xee\xae\xfb\xba\xa2\x4c\x7f\xbf\xe2\xcd\x0f\x7d\x35\x9e\xd2\x3a\xe0\xdb\x7e\x0a\xff\xe5\x7f\x1c\x63\xa4\x80\x67\x3f\xbc\xfe\xd9\x30\x77\xce\xf5\x8d\x10\x9f\x01\x00\x00\xff\xff\xe6\xa7\x8a\x39\x33\x01\x00\x00"

func db20180115102324_titleSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180115102324_titleSql,
		"db/20180115102324_title.sql",
	)
}

func db20180115102324_titleSql() (*asset, error) {
	bytes, err := db20180115102324_titleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180115102324_title.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20170924113721_ad.sql":      db20170924113721_adSql,
	"db/20170926112439_ads.sql":     db20170926112439_adsSql,
	"db/20171229201129_addattr.sql": db20171229201129_addattrSql,
	"db/20180115102324_title.sql":   db20180115102324_titleSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20170924113721_ad.sql":      &bintree{db20170924113721_adSql, map[string]*bintree{}},
		"20170926112439_ads.sql":     &bintree{db20170926112439_adsSql, map[string]*bintree{}},
		"20171229201129_addattr.sql": &bintree{db20171229201129_addattrSql, map[string]*bintree{}},
		"20180115102324_title.sql":   &bintree{db20180115102324_titleSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
