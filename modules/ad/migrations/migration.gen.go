// Code generated by go-bindata.
// sources:
// db/20180325071354_creatives.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20180325071354_creativesSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x51\x4f\xdb\x30\x10\x7e\xf7\xaf\xb8\xb7\x36\x1a\x48\x6c\x12\xd3\x24\xc4\x83\x49\x5c\x88\xd6\xba\x9d\xe3\x4c\xf0\x94\xb8\xc9\x51\x3c\x5a\x27\x4a\x9c\x02\xff\x7e\x72\xb2\x94\x14\x2a\x40\x13\x6f\xd7\xbb\xfb\xfa\xdd\xe5\xfb\x7c\xe4\xf8\x18\xbe\x6c\xf4\xaa\x52\x16\x21\x2e\xdd\xcf\xe8\xd7\x14\xb4\x81\x1a\x33\xab\x0b\x03\xa3\xb8\x1c\x81\xae\x01\x1f\x31\x6b\x2c\xe6\xf0\x70\x87\x06\xec\x9d\xae\xa1\xc3\xb9\x26\x5d\x83\x2a\xcb\xb5\xc6\x9c\xf8\x82\x51\xc9\x40\xd2\x8b\x29\x83\x70\x02\x7c\x2e\x81\x5d\x87\x91\x8c\x20\xcd\x2a\x54\x56\x6f\xb1\x4e\x61\x4c\x52\x9d\xa7\x10\x72\x39\xfe\x7a\xe2\x41\xcc\xa3\xf0\x92\xb3\xa0\x6d\xe7\xf1\x74\x0a\x34\x96\xf3\x24\xe4\xbe\x60\x33\xc6\xe5\x11\x49\x33\xb5\x29\x95\x5e\x99\xe4\x4d\xdc\x11\x49\x6b\xab\x6c\x53\xa7\xc0\x78\x3c\x1b\x8f\x4a\x34\xb9\x36\xab\xd1\x11\x8c\x54\x96\x61\x69\x31\x77\x71\x85\x7f\x30\x73\xb1\x37\x84\xda\xa7\x12\x7b\xe0\x52\x19\x83\x95\xeb\x35\xed\xd0\x2e\xda\xaa\xda\xee\x23\x9a\x6a\x9d\xc2\x6f\x2a\xfc\x2b\x2a\xc6\xdf\x4e\x4f\xf7\x8a\xca\xda\x4a\x2f\x1b\xeb\x16\x96\xec\x5a\x0e\x6b\xed\xb7\xc0\x3c\x51\x36\x85\x80\x4a\x26\xc3\x19\x7b\xde\x3e\x60\x13\x1a\x4f\x25\xf8\xb1\x10\x8c\xcb\xc4\x55\x23\x49\x67\x0b\x47\x59\xe6\x07\x90\x43\x54\x4f\x5f\x65\x77\x7a\xfb\x81\xce\x85\x08\x67\x54\xdc\xc0\x4f\x76\x03\x63\xa7\x8b\xe7\x11\xc6\x2f\x43\xce\xe0\x1c\x42\x63\x8a\xe0\x82\xec\x26\xba\xa2\x82\xfa\x92\x09\x88\x98\x84\x73\x68\xec\xed\x8f\x33\xf2\xa6\xec\xaa\xae\xd1\xfe\x9f\xe6\xff\x0c\xf3\xae\xe6\x2d\x45\x32\x94\x4f\x6f\xd4\xaa\xd3\x4c\xe7\x58\xb8\xc0\xe2\xa3\x6d\xe5\x6c\x36\x4b\xac\xf6\x65\x2c\xab\xa2\xc4\xca\x3e\xf5\x3a\x1d\xfa\x9a\x2d\xc5\x3d\x3e\x3d\xeb\xfd\xfd\xc4\x7b\xa3\x75\xab\xd6\x0d\xbe\x34\xc7\x81\xee\xcf\x76\xc2\xbb\x48\x98\x73\x88\x17\x0e\x70\xe8\x5f\x3f\xc1\x0c\x74\xea\x52\x9d\x17\x76\x6f\x9e\x00\xd0\x20\x00\x7f\xce\x23\x29\x68\xc8\xe5\xae\x94\x0c\x9e\x76\x72\x7b\x4f\x26\x73\xc1\xc2\x4b\xde\x4d\x30\xa8\x79\x20\xd8\x84\x09\xc6\x7d\x16\x41\x9f\xaf\x61\xac\x73\xef\x05\x69\xe7\xb8\xd7\x8c\x5d\x3e\x19\xd8\xea\x35\xdf\x73\x6d\x9f\xaf\xdf\xa3\xe7\x1b\x5e\xce\xa0\x78\x30\xfd\xed\xdc\x1d\x4e\x97\xfc\xd0\xe9\xac\x8a\xf5\x1a\x73\x58\xaa\xec\x9e\x04\x62\xbe\xd8\x5b\xe2\x6c\x98\xda\x0d\x71\x46\xc8\xdf\x00\x00\x00\xff\xff\xc2\x13\x30\x3b\xbb\x05\x00\x00"

func db20180325071354_creativesSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325071354_creativesSql,
		"db/20180325071354_creatives.sql",
	)
}

func db20180325071354_creativesSql() (*asset, error) {
	bytes, err := db20180325071354_creativesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325071354_creatives.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20180325071354_creatives.sql": db20180325071354_creativesSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20180325071354_creatives.sql": &bintree{db20180325071354_creativesSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
