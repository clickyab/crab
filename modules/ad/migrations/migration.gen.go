// Code generated by go-bindata.
// sources:
// db/20180325071354_creatives.sql
// db/20180407151329_add_creative_perm.sql
// db/20180408053319_unique_index_assets.sql
// db/20180408105045_add_creative_max_bid.sql
// db/20180417122713_fix.sql
// db/20180422112913_perm.sql
// db/20180423124500_fixcreative.sql
// db/20180502070808_creatvie_detail.sql
// db/20180507044253_add_creative_reject_reasons.sql
// db/20180612105323_archive_creative_perm.sql
// db/creativestatus_perm.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _db20180325071354_creativesSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x51\x4f\xdb\x30\x10\x7e\xf7\xaf\xb8\xb7\x36\x1a\x48\x6c\x12\xd3\x24\xc4\x83\x49\x5c\x88\xd6\xba\x9d\xe3\x4c\xf0\x94\xb8\xc9\x51\x3c\x5a\x27\x4a\x9c\x02\xff\x7e\x72\xb2\x94\x14\x2a\x40\x13\x6f\xd7\xbb\xfb\xfa\xdd\xe5\xfb\x7c\xe4\xf8\x18\xbe\x6c\xf4\xaa\x52\x16\x21\x2e\xdd\xcf\xe8\xd7\x14\xb4\x81\x1a\x33\xab\x0b\x03\xa3\xb8\x1c\x81\xae\x01\x1f\x31\x6b\x2c\xe6\xf0\x70\x87\x06\xec\x9d\xae\xa1\xc3\xb9\x26\x5d\x83\x2a\xcb\xb5\xc6\x9c\xf8\x82\x51\xc9\x40\xd2\x8b\x29\x83\x70\x02\x7c\x2e\x81\x5d\x87\x91\x8c\x20\xcd\x2a\x54\x56\x6f\xb1\x4e\x61\x4c\x52\x9d\xa7\x10\x72\x39\xfe\x7a\xe2\x41\xcc\xa3\xf0\x92\xb3\xa0\x6d\xe7\xf1\x74\x0a\x34\x96\xf3\x24\xe4\xbe\x60\x33\xc6\xe5\x11\x49\x33\xb5\x29\x95\x5e\x99\xe4\x4d\xdc\x11\x49\x6b\xab\x6c\x53\xa7\xc0\x78\x3c\x1b\x8f\x4a\x34\xb9\x36\xab\xd1\x11\x8c\x54\x96\x61\x69\x31\x77\x71\x85\x7f\x30\x73\xb1\x37\x84\xda\xa7\x12\x7b\xe0\x52\x19\x83\x95\xeb\x35\xed\xd0\x2e\xda\xaa\xda\xee\x23\x9a\x6a\x9d\xc2\x6f\x2a\xfc\x2b\x2a\xc6\xdf\x4e\x4f\xf7\x8a\xca\xda\x4a\x2f\x1b\xeb\x16\x96\xec\x5a\x0e\x6b\xed\xb7\xc0\x3c\x51\x36\x85\x80\x4a\x26\xc3\x19\x7b\xde\x3e\x60\x13\x1a\x4f\x25\xf8\xb1\x10\x8c\xcb\xc4\x55\x23\x49\x67\x0b\x47\x59\xe6\x07\x90\x43\x54\x4f\x5f\x65\x77\x7a\xfb\x81\xce\x85\x08\x67\x54\xdc\xc0\x4f\x76\x03\x63\xa7\x8b\xe7\x11\xc6\x2f\x43\xce\xe0\x1c\x42\x63\x8a\xe0\x82\xec\x26\xba\xa2\x82\xfa\x92\x09\x88\x98\x84\x73\x68\xec\xed\x8f\x33\xf2\xa6\xec\xaa\xae\xd1\xfe\x9f\xe6\xff\x0c\xf3\xae\xe6\x2d\x45\x32\x94\x4f\x6f\xd4\xaa\xd3\x4c\xe7\x58\xb8\xc0\xe2\xa3\x6d\xe5\x6c\x36\x4b\xac\xf6\x65\x2c\xab\xa2\xc4\xca\x3e\xf5\x3a\x1d\xfa\x9a\x2d\xc5\x3d\x3e\x3d\xeb\xfd\xfd\xc4\x7b\xa3\x75\xab\xd6\x0d\xbe\x34\xc7\x81\xee\xcf\x76\xc2\xbb\x48\x98\x73\x88\x17\x0e\x70\xe8\x5f\x3f\xc1\x0c\x74\xea\x52\x9d\x17\x76\x6f\x9e\x00\xd0\x20\x00\x7f\xce\x23\x29\x68\xc8\xe5\xae\x94\x0c\x9e\x76\x72\x7b\x4f\x26\x73\xc1\xc2\x4b\xde\x4d\x30\xa8\x79\x20\xd8\x84\x09\xc6\x7d\x16\x41\x9f\xaf\x61\xac\x73\xef\x05\x69\xe7\xb8\xd7\x8c\x5d\x3e\x19\xd8\xea\x35\xdf\x73\x6d\x9f\xaf\xdf\xa3\xe7\x1b\x5e\xce\xa0\x78\x30\xfd\xed\xdc\x1d\x4e\x97\xfc\xd0\xe9\xac\x8a\xf5\x1a\x73\x58\xaa\xec\x9e\x04\x62\xbe\xd8\x5b\xe2\x6c\x98\xda\x0d\x71\x46\xc8\xdf\x00\x00\x00\xff\xff\xc2\x13\x30\x3b\xbb\x05\x00\x00"

func db20180325071354_creativesSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180325071354_creativesSql,
		"db/20180325071354_creatives.sql",
	)
}

func db20180325071354_creativesSql() (*asset, error) {
	bytes, err := db20180325071354_creativesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180325071354_creatives.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180407151329_add_creative_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x4f\x4b\xc3\x40\x10\xc5\xef\xfd\x14\x8f\x5c\x92\x60\x7a\x68\xaf\xa5\x87\x42\x56\x0c\xc4\x14\xf3\x47\x8f\x6d\xcc\x8e\x76\x30\x4d\x96\xdd\xd5\xfa\xf1\x65\x13\x15\x2b\x14\x2a\xf5\xb8\x8f\xd9\x1f\xbf\x99\x37\x99\x4e\x71\xb5\xe7\x67\x5d\x5b\x42\xa5\xdc\xb3\xb8\x4b\xc1\x1d\x0c\x35\x96\xfb\x0e\x7e\xa5\x7c\xb0\x01\xbd\x53\xf3\x6a\x49\xe2\xb0\xa3\x0e\x76\xc7\x06\xe3\x3f\x37\xc4\x06\xb5\x52\x2d\x93\x9c\x24\x59\x21\xf2\x12\x49\x56\xae\xa1\xfb\x96\x36\x8a\xf4\x9e\x8d\x71\x63\xc1\x10\xb0\x8c\xe0\xc2\x08\xa6\xe9\x15\x85\xb8\x5f\xa5\x95\x28\x10\xcc\x22\xaf\x96\x72\xd3\x68\xaa\x2d\xbf\x91\x17\x79\x86\xda\x27\x2f\x5c\x5c\x02\x9d\x9f\x84\x5e\xa8\x4a\x92\xed\xff\xbb\x9e\xa2\x1e\x15\x15\xf7\x87\xee\xab\xaa\xef\x9e\x5c\x78\x56\x53\xba\x6f\x5b\x92\x78\xac\x9b\x97\x49\x2c\x52\x51\x0a\xe0\x3a\x5f\xdf\x62\xfb\x4b\x77\x8b\x87\x1b\x91\x8b\xc1\x75\xe9\xff\xbc\xa2\x8f\x55\x16\x8f\xf6\xcb\x51\x71\x08\x3e\xb7\x43\x92\x05\xb3\x68\x1e\x2e\xfe\x82\x3f\x5a\xfc\x5c\xfe\x47\x00\x00\x00\xff\xff\xe8\x04\x55\x35\xbf\x02\x00\x00"

func db20180407151329_add_creative_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180407151329_add_creative_permSql,
		"db/20180407151329_add_creative_perm.sql",
	)
}

func db20180407151329_add_creative_permSql() (*asset, error) {
	bytes, err := db20180407151329_add_creative_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180407151329_add_creative_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180408053319_unique_index_assetsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\x4b\x4e\x85\x30\x14\xc6\xf1\x79\x57\xf1\xcd\xae\x46\xef\x0a\xee\x08\xd3\x0e\x48\x08\x0a\xd2\xc4\x19\xad\xed\x89\x9c\x80\xa5\xd2\x22\xba\x7b\x83\xaf\x68\xe2\xc0\xe1\x79\xfc\x93\x9f\x38\x1e\x71\xf1\xc8\x0f\x8b\xcd\x04\x1d\xf7\xf1\xb6\xa9\xc0\x01\x89\x5c\xe6\x39\xe0\xa0\xe3\x01\x9c\x40\x2f\xe4\xd6\x4c\x1e\xdb\x40\x01\x79\xe0\x84\x8f\x6e\x7f\xe2\x04\x1b\xe3\xc4\xe4\x45\x51\x75\xaa\x45\x57\x5c\x55\x0a\xc6\xa6\x44\x39\x19\x14\x52\x42\xd7\x65\xa3\x15\xcc\x1a\xf8\x69\xa5\xfe\xfd\x64\x70\x66\xdc\x42\x36\xf3\x33\xf5\xec\xcd\xe5\x67\xd2\x8f\xf4\x6a\xce\x4f\x42\x88\x5f\x40\x39\x6f\xe1\x8b\xf8\xed\xdb\x97\xff\x12\x2e\xf3\x34\x91\xc7\xbd\x75\xa3\xf8\x9b\x29\xdb\xeb\x1b\x94\xb5\x54\x77\xf8\xa9\x3c\x89\xb7\x00\x00\x00\xff\xff\x8a\x23\xfc\x1e\x27\x01\x00\x00"

func db20180408053319_unique_index_assetsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180408053319_unique_index_assetsSql,
		"db/20180408053319_unique_index_assets.sql",
	)
}

func db20180408053319_unique_index_assetsSql() (*asset, error) {
	bytes, err := db20180408053319_unique_index_assetsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180408053319_unique_index_assets.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180408105045_add_creative_max_bidSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xc1\x4a\x03\x31\x10\xc6\xf1\xfb\x3e\xc5\x77\xab\x22\x05\x3d\xf7\xb4\x92\x55\x0a\x21\xd5\x36\x39\x9b\x34\x19\xec\x60\x9a\x0d\x49\x6a\xfb\xf8\x12\x44\xc5\x83\xe0\x71\x86\xef\x0f\xbf\x61\xb9\xc4\xcd\x91\x5f\x8b\x6b\x04\x93\xfb\xb9\x7b\x96\xe0\x84\x4a\xbe\xf1\x9c\xb0\x30\x79\x01\xae\xa0\x0b\xf9\x53\xa3\x80\xf3\x81\x12\xda\x81\x2b\x3e\xbb\x3e\xe2\x0a\x97\x73\x64\x0a\xc3\x28\xf5\xb4\x85\x1e\xef\xe5\x04\xeb\x0b\xb9\xc6\xef\x54\x2d\x46\x21\x60\x8f\xee\xf2\xb2\xe7\x60\xb1\x56\xfa\xea\xee\xf6\x1a\x46\xed\xd6\x8f\x6a\x12\x50\x1b\x0d\x65\xa4\xc4\xf8\xd0\x7b\x7b\x2a\xd1\xae\x86\x5f\x3c\x31\x9f\xd3\x17\xf0\x5b\xd7\x9f\xff\xf2\x95\x39\x46\x0a\xd8\x3b\xff\xf6\xa7\x51\x6c\x37\x4f\x3f\xc8\xd5\xf0\x11\x00\x00\xff\xff\x11\xe7\x4a\x26\x1e\x01\x00\x00"

func db20180408105045_add_creative_max_bidSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180408105045_add_creative_max_bidSql,
		"db/20180408105045_add_creative_max_bid.sql",
	)
}

func db20180408105045_add_creative_max_bidSql() (*asset, error) {
	bytes, err := db20180408105045_add_creative_max_bidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180408105045_add_creative_max_bid.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180417122713_fixSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcf\x4f\xbb\x40\x10\xc5\xef\xfb\x57\xbc\x5b\xdb\x7c\xd3\xe4\xeb\xb9\x27\xec\x4e\x1b\x22\x2e\xba\x40\xa2\x27\x82\x30\xda\x49\x2b\x45\x16\xac\x7f\xbe\x01\xec\x2f\xab\x89\xc7\x7d\x3b\xf3\x3e\x79\xf3\xd4\x74\x8a\x7f\xaf\xf2\x52\x67\x0d\x23\xa9\xba\x67\x74\x1f\x40\x4a\x38\xce\x1b\xd9\x96\x18\x25\xd5\x08\xe2\xc0\x1f\x9c\xb7\x0d\x17\xd8\xad\xb8\x44\xb3\x12\x87\x61\xaf\x1b\x12\x87\xac\xaa\x36\xc2\x85\xd2\x14\x50\x4c\x58\xd8\xf0\x16\x99\x73\xdc\xb8\xd9\x99\x96\xd7\x9c\x35\xf2\xce\x6e\xa6\xbc\x20\x26\x8b\xd8\xbb\x0e\xe8\x28\xc3\xd3\x1a\xad\xe3\x3a\x95\x02\xbe\x89\xc7\x57\xff\x27\x48\x4c\xe4\x2f\x0d\x69\x98\x24\x08\x7e\x59\x54\xe8\x57\xe7\xa1\x89\x62\xeb\xf9\x26\x3e\x7e\xa5\x9d\x9f\x4b\xa5\x48\x9f\xd7\x6a\x11\x5a\xf2\x97\x06\x37\xf4\x88\xf1\x17\x68\x02\x4b\x0b\xb2\x64\xe6\x14\xf5\x70\x87\xb1\x14\x93\x73\xd2\x90\x06\xda\x86\x77\x38\x35\x19\xf4\x74\x4f\x1b\x30\x33\xd5\xcf\xf9\x46\xd3\x03\xda\x52\xde\x5a\x4e\xfb\x41\x84\xe6\x70\x97\x4b\xf7\xcb\x10\xdf\xdc\x7f\x4c\x71\x82\x3e\x4b\x72\x3c\xea\x90\xe6\xb4\x6c\xbd\xdd\x95\xfb\xba\x0f\x5d\x77\xe2\x9f\xda\xae\xb7\x9b\x0d\x17\x78\xca\xf2\xb5\x52\xea\x33\x00\x00\xff\xff\xc2\xaa\xa7\x6a\x46\x02\x00\x00"

func db20180417122713_fixSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180417122713_fixSql,
		"db/20180417122713_fix.sql",
	)
}

func db20180417122713_fixSql() (*asset, error) {
	bytes, err := db20180417122713_fixSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180417122713_fix.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180422112913_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8f\x4d\x4b\xf3\x40\x14\x46\xf7\xf9\x15\x0f\xd9\x24\xe1\x4d\x17\xed\xb6\x74\x51\xc8\xbc\x18\x88\x29\xe6\x43\x97\x6d\x4c\xae\xed\xc5\x69\x66\x98\x19\xad\x3f\x5f\x26\x51\x51\x41\x10\x5c\xce\xe1\xce\xc3\x39\xc1\x62\x81\x7f\x67\x3e\x9a\xce\x11\x5a\xed\x9f\xf5\x4d\x01\x1e\x61\xa9\x77\xac\x46\x44\xad\x8e\xc0\x16\xf4\x42\xfd\x93\xa3\x01\x97\x13\x8d\x70\x27\xb6\x98\xff\xf9\x23\xb6\xe8\xb4\x96\x4c\x43\x90\x97\xb5\xa8\x1a\xe4\x65\xb3\x83\x51\x92\xf6\x9a\xcc\x99\xad\xf5\x67\xf1\x04\x78\x48\xe1\x61\x0a\xdb\x2b\x4d\x09\x6e\xb7\x45\x2b\x6a\xc4\xcb\x34\x3c\x92\xdb\xf7\x86\x3a\xc7\xcf\x14\xa6\xa1\x25\xf9\x10\x26\xeb\xbf\x8c\xae\x7e\x1c\xfd\xd2\x9e\xa9\xcb\xf8\x5e\xff\x91\xee\xe1\xaf\xe2\x8d\x92\x92\x06\xdc\x77\xfd\x63\x90\x89\x42\x34\x02\xf8\x5f\xed\xae\x71\xf8\x66\x7b\xc0\xdd\x95\xa8\xc4\xa4\xba\x89\x3e\x8b\x45\xd8\x96\xd9\x2c\xbf\x99\x15\x27\xf0\x16\x87\xbc\x8c\x97\xe9\x2a\x59\x07\xaf\x01\x00\x00\xff\xff\x8e\xcc\xe9\x12\xb2\x01\x00\x00"

func db20180422112913_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180422112913_permSql,
		"db/20180422112913_perm.sql",
	)
}

func db20180422112913_permSql() (*asset, error) {
	bytes, err := db20180422112913_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180422112913_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180423124500_fixcreativeSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\xc1\x4a\x03\x31\x10\xc6\xf1\x7b\x9e\xe2\xbb\x55\x91\xde\xc4\x4b\x4f\xd1\xac\xba\x10\xb3\xba\xdd\x08\x9e\x24\x4d\x06\x3b\xb8\x9b\x0d\x9b\x68\xfb\xf8\xb2\x8a\xa2\x87\x82\xf4\x38\xc3\xfc\xe1\x37\x62\xb9\xc4\xd9\xc0\x2f\x93\x2b\x04\x9b\xe6\x71\xfd\xa0\xc1\x11\x99\x7c\xe1\x31\x62\x61\xd3\x02\x9c\x41\x7b\xf2\x6f\x85\x02\x76\x5b\x8a\x28\x5b\xce\xf8\xea\xe6\x23\xce\x70\x29\xf5\x4c\x41\x48\xdd\x55\x2d\x3a\x79\xa9\x2b\xf8\x89\x5c\xe1\x77\xca\x90\x4a\x21\xba\x81\xf0\x28\xdb\xab\x5b\xd9\x9e\x5c\x9c\x9f\xc2\x34\x1d\x8c\xd5\x7a\x75\x20\xba\x6b\x54\x7d\xfd\x84\xc1\xed\x9f\x37\x1c\x50\x9b\x0e\xd6\xac\xeb\x1b\x53\xa9\x95\xf8\x23\x57\xe3\x2e\x7e\xdb\x7f\xe0\xf3\xf2\x5f\xf4\x69\xec\x7b\x0a\xd8\x38\xff\x7a\x40\xa2\xda\xe6\xfe\xd3\x7f\x04\xf5\xd7\x9b\x42\x7c\x04\x00\x00\xff\xff\x0e\x6c\x9e\x81\x70\x01\x00\x00"

func db20180423124500_fixcreativeSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180423124500_fixcreativeSql,
		"db/20180423124500_fixcreative.sql",
	)
}

func db20180423124500_fixcreativeSql() (*asset, error) {
	bytes, err := db20180423124500_fixcreativeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180423124500_fixcreative.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180502070808_creatvie_detailSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x4d\x6f\xdb\x30\x0c\xbd\xeb\x57\x10\xb9\x24\xc6\x5c\xa0\xe9\x69\x40\x91\x83\x9b\x28\xad\x31\x47\xe9\x64\x65\x43\x4f\xb6\x6a\x29\xad\x10\x47\x36\x6c\xa5\xed\xfe\xfd\xa0\xb4\xfe\x4a\xd6\xd9\xd8\x8e\x26\xdf\xe3\x23\xa9\x07\x13\x5d\x5c\xc0\x97\xbd\x7a\x2a\xb8\x91\xb0\xc9\xed\x67\xf8\x3d\x00\xa5\xa1\x94\x89\x51\x99\x86\xf1\x26\x1f\x83\x2a\x41\xbe\xc9\xe4\x60\xa4\x80\xd7\x67\xa9\xc1\x3c\xab\x12\xde\x79\x16\xa4\x4a\xe0\x79\x9e\x2a\x29\xd0\x9c\x62\x8f\x61\x60\xde\x4d\x80\x21\x4e\x0a\xc9\x8d\x7a\x91\x91\x90\x86\xab\x34\x86\x09\x8a\x13\xbe\xcf\xb9\x7a\xd2\x91\x12\x31\x28\x6d\x26\xd3\x4b\x07\x0e\xba\x54\x4f\x5a\x0a\x20\x6b\x06\x64\x13\x04\x2e\x6a\xc8\x7d\x40\xc1\x55\xfa\xab\x17\xf5\x9c\x1d\x8a\x5e\xd0\x96\xef\x64\xa4\xf6\xf9\x07\x6a\xea\xd4\x49\x58\xe0\xa5\xb7\x09\x18\x8c\x2f\xc7\x15\x30\x49\x55\xb2\xeb\x85\x0e\x29\x37\xac\x52\x92\xe9\x97\x7e\x50\x9e\x0c\xc0\xec\x07\x60\x78\x3f\xc6\x3e\x91\x14\x11\x37\x31\x08\x6e\xa4\x51\x7b\x79\x8e\x9d\x6f\x28\xc5\x84\x45\xcc\x5f\xe1\x90\x79\xab\x7b\x17\xc5\x87\x5c\xfc\x1b\xf3\x9e\xfa\x2b\x8f\x3e\xc0\x37\xfc\x00\x93\x8e\x47\xdc\xfa\x89\x1d\x17\xd9\xf4\xa9\xfd\xa2\x96\xf5\xa2\xca\x34\x91\xd2\x42\xbe\xc5\xb6\x56\xcb\x98\x6e\x63\xaa\xcf\x8a\xd9\xae\x23\xc3\x1f\x53\x2b\x1e\x6d\x77\xb6\x44\x2f\xe9\xd8\xe1\x09\xa9\xd5\xf5\x7c\x4d\x42\x46\x3d\x9f\xb0\xcf\x9b\x2f\x2b\xe6\x72\x4d\xb1\x7f\x4b\xaa\x4d\xb4\xba\x77\x80\xe2\x25\xa6\x98\xcc\x71\x08\x75\xa6\xb4\x62\xfd\x3a\xe7\x73\x75\x85\x9a\x19\x3b\x2a\x0d\x6d\x98\xcc\xf9\x26\xba\x32\xf5\x56\x3a\x2a\x0d\x6b\x98\x4a\xcb\x1f\x7f\xda\x59\xcb\x3d\x27\x3b\xfb\xc8\xd4\x3b\x43\x0e\x60\x72\xeb\x13\x3c\xf3\xb5\xce\x16\x37\x8d\x45\xef\x3c\x1a\x62\x36\x3b\x98\xed\xd7\x6b\x84\x7c\x12\x62\xca\xc0\x27\x6c\x0d\x45\x96\xca\x28\x97\xc5\x5e\x95\xa5\xfd\x4d\x4e\x8e\x01\x25\x5c\xb0\x41\x17\xca\x24\xcb\xa5\x03\x3f\xbc\x60\x83\x43\x98\x4c\xdd\x51\xfd\x88\x95\xfe\xc8\x1d\x95\x32\xdd\x8e\x9c\xeb\xff\xa9\x7c\xf5\xf7\xca\x9d\x2b\xb0\xc8\x5e\x75\x75\x07\xea\x23\x60\x83\x83\xce\x40\x91\xa5\xa9\x14\xf0\xc8\x93\x1d\x5a\xd0\xf5\xfd\x67\x87\xe0\x1a\xa1\x05\x0e\x30\xc3\x00\x4b\xba\x5e\x41\x7c\x32\x51\x0c\x3f\xef\x30\xc5\xc7\x71\x66\xe3\xb3\xe6\xc7\xe0\x91\xc5\xfb\x94\xb3\xf7\x31\x8e\x81\x8f\x2d\x80\x4f\x26\x53\xf7\xca\x4e\xf6\x3b\x00\x00\xff\xff\x06\x7e\x30\x03\xe1\x06\x00\x00"

func db20180502070808_creatvie_detailSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180502070808_creatvie_detailSql,
		"db/20180502070808_creatvie_detail.sql",
	)
}

func db20180502070808_creatvie_detailSql() (*asset, error) {
	bytes, err := db20180502070808_creatvie_detailSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180502070808_creatvie_detail.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180507044253_add_creative_reject_reasonsSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x6f\xda\x30\x18\xc5\xef\xfe\x2b\xde\x0d\xa2\x51\x69\xbb\x4d\x8a\x7a\x70\x93\x8f\xce\x5a\x70\x98\xe3\x48\xed\x29\x0e\xc4\xac\x1e\x2c\xa0\xd8\x59\xf7\xe7\x4f\x81\x8e\x42\xa1\xd3\x6e\x49\xfc\xde\xf7\xbe\xf8\xfd\xd8\xcd\x0d\x3e\xfc\x74\xdf\xbb\x3a\x58\x94\xbb\xe1\xb5\xf8\x96\xc1\xb5\xf0\x76\x19\xdc\xb6\xc5\xa8\xdc\x8d\xe0\x3c\xec\x6f\xbb\xec\x83\x6d\xf0\xfc\x64\x5b\x84\x27\xe7\x71\xf0\x0d\x22\xe7\x51\xef\x76\x1b\x67\x1b\xc6\x33\x4d\x0a\x9a\xdf\x65\x04\xb3\xec\x6c\x1d\xdc\x2f\xeb\x0d\x78\x9a\xc2\x74\xf6\x87\x5d\x86\xaa\xb3\xb5\xdf\xb6\xbe\x72\x8d\x81\x90\x7a\xfc\xe9\x63\x84\x52\x16\xe2\x5e\x52\x0a\x59\x66\x19\xf8\x74\x98\x62\xea\x10\x3a\xb7\xe8\x83\xf5\x26\x66\x89\x22\xae\xe9\x65\x34\xc4\x14\x32\xd7\xa0\x07\x51\xe8\xe2\x35\xa9\x3a\x8f\x30\x18\x33\x73\x3d\x26\xd7\x2f\x51\xa5\xce\x2b\x21\x13\x45\x33\x92\x7a\xc2\xcc\xc1\x6a\xa0\xe9\x41\x1f\x65\x13\x66\x7c\xa8\x43\xef\x0d\x48\x96\xb3\xf1\xc8\xb6\xf5\x62\x63\x47\x13\x8c\x1a\xe7\xf7\x8f\xd1\xa9\x78\xbf\x8f\x6d\xaa\x3a\x18\xa4\x5c\x93\x16\x33\x7a\xcd\x4c\x69\xca\xcb\x4c\x23\x29\x95\x22\xa9\xab\xe1\xb4\xd0\x7c\x36\x9f\x30\xd3\xef\x9a\x2b\xce\x53\xd7\x21\x62\xae\xc4\x8c\xab\x47\x7c\xa5\x47\x8c\x87\x7f\x8c\x22\x46\xf2\x5e\x48\xc2\x2d\x44\xdb\x6e\xd3\x3b\x76\xcc\xf9\xc2\x15\x4f\x86\x2b\x2d\x48\xe3\x16\x7d\x58\x7d\x8e\xd9\x59\x57\xc7\xaa\x18\xf6\x5d\x25\xb9\x2c\xb4\xe2\x42\x6a\x5c\xb4\x56\xad\xd6\x6c\x9a\x2b\x12\xf7\xf2\x10\x7f\xa1\x88\xa0\x68\x4a\x8a\x64\x42\x05\xde\xe9\x06\x63\xd7\x44\x31\x3b\x43\x30\xdd\x3e\xb7\x7f\x21\x3c\x12\x38\x7c\xfc\x2f\x06\xbb\xed\x66\x63\x1b\x2c\xea\xe5\xfa\x5d\x0e\x53\x95\xcf\x71\xba\xfc\x25\x94\xd5\x6a\x6d\xe2\x7f\x0f\xb8\x42\x72\xcc\xf6\x27\x6f\x0c\x6f\x79\x8c\xff\x04\x00\x00\xff\xff\x2e\x5d\x08\x82\x72\x03\x00\x00"

func db20180507044253_add_creative_reject_reasonsSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180507044253_add_creative_reject_reasonsSql,
		"db/20180507044253_add_creative_reject_reasons.sql",
	)
}

func db20180507044253_add_creative_reject_reasonsSql() (*asset, error) {
	bytes, err := db20180507044253_add_creative_reject_reasonsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180507044253_add_creative_reject_reasons.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _db20180612105323_archive_creative_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\x4d\x4b\xf3\x40\x14\x85\xf7\xf9\x15\x67\x37\x09\xef\x74\xd3\x8f\x55\xe9\xa2\x90\x79\x31\x10\x53\xcc\x87\x2e\xdb\x38\xb9\x9a\x8b\x69\x32\xcc\xc4\xd6\x9f\x2f\x49\x54\x50\x41\x04\xe9\x72\x0e\x77\x0e\xcf\xe1\xf1\x66\x33\xfc\x3b\xf2\xa3\x2d\x7b\x42\x61\x86\x67\x76\x13\x83\x5b\x38\xd2\x3d\x77\x2d\x44\x61\x04\xd8\x81\x5e\x48\x3f\xf7\x54\xe1\x5c\x53\x8b\xbe\x66\x87\xe9\xdf\x70\xc4\x0e\xa5\x31\x0d\x53\xe5\x45\x49\xa6\xd2\x1c\x51\x92\xef\x60\xbb\x86\xf6\x86\xec\x91\x9d\x1b\xce\xfc\x31\xe0\x4a\x62\x08\x25\x9c\xee\x0c\x05\xb8\xdd\xc6\x85\xca\xe0\xcf\xa5\x28\xad\xae\xf9\x44\x7b\x6d\xa9\xec\xf9\x44\x42\x0a\x47\xcd\x83\x08\xd6\x7f\x29\x5e\x5c\xaa\x78\x79\xa9\xe2\xd5\x8f\xc5\x9f\xac\x85\xdd\xb9\x7d\xf7\xf6\x21\x6d\x08\x7f\xa5\xcd\x76\x4d\x43\x15\xee\x4b\xfd\xe4\x85\x2a\x56\xb9\x02\xfe\xa7\xbb\x6b\x1c\xbe\x10\x1f\x70\x77\xa5\x52\x35\xe2\x6e\xbe\xc3\x61\x9b\x84\xd3\x88\xcd\x84\x39\x06\x6f\x23\x11\x25\xfe\x5c\x2e\xe4\x52\xae\x82\xb5\xf7\x1a\x00\x00\xff\xff\x52\x02\x07\x47\x74\x02\x00\x00"

func db20180612105323_archive_creative_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_db20180612105323_archive_creative_permSql,
		"db/20180612105323_archive_creative_perm.sql",
	)
}

func db20180612105323_archive_creative_permSql() (*asset, error) {
	bytes, err := db20180612105323_archive_creative_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/20180612105323_archive_creative_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbCreativestatus_permSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x4f\x6b\x83\x30\x18\x87\xef\x7e\x8a\x1f\x5e\x54\x66\x4f\xed\xad\xf4\x50\x30\x63\x82\xb3\xcc\x3f\xdb\xd1\xa6\xf1\x45\xc3\x52\x13\x4c\xba\xee\xe3\x0f\xed\x3a\xd8\x60\x50\xe8\x31\x0f\x6f\x78\x9f\xf7\xf1\x16\x0b\x3c\x1c\x65\x37\x72\x47\xa8\xcd\xf4\x2c\x5f\x32\xc8\x01\x96\x84\x93\x7a\x40\x50\x9b\x00\xd2\x82\x3e\x49\x9c\x1c\xb5\x38\xf7\x34\xc0\xf5\xd2\xe2\xf2\x6f\x1a\x92\x16\xdc\x18\x25\xa9\xf5\xd2\xbc\x64\x45\x85\x34\xaf\x76\x18\xb5\xa2\xc6\xd0\x78\x94\xd6\x4e\x63\xe1\x0c\x64\x1b\x63\x82\x31\xac\xd0\x86\x22\xbc\x6e\xb3\x9a\x95\x08\x97\xb1\x2f\x7a\x3e\x74\xd4\x88\x91\xb8\x93\x1f\x64\x1b\xeb\xb8\x3b\x59\x3f\xf6\x3b\xa5\x0f\x5c\xf9\xd1\xfa\x9e\x0d\xab\xdb\x36\xfc\xaa\x92\xe8\xf3\x70\xed\xf2\x13\x65\x82\x37\x65\x19\xb5\x52\xd4\xe2\xc0\xc5\xbb\x97\xb0\x8c\x55\x0c\x78\x2c\x76\xcf\xd8\xff\x51\xdf\xe3\xed\x89\x15\x6c\xf6\xde\x04\xff\x58\x06\xd8\xe6\xc9\xe5\xa8\xcd\xd5\x77\x46\xdf\x67\x23\xcd\xc3\x65\xbc\x8a\xd6\xde\x57\x00\x00\x00\xff\xff\x52\x93\xfd\x47\xd9\x01\x00\x00"

func dbCreativestatus_permSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbCreativestatus_permSql,
		"db/creativestatus_perm.sql",
	)
}

func dbCreativestatus_permSql() (*asset, error) {
	bytes, err := dbCreativestatus_permSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/creativestatus_perm.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/20180325071354_creatives.sql":                   db20180325071354_creativesSql,
	"db/20180407151329_add_creative_perm.sql":           db20180407151329_add_creative_permSql,
	"db/20180408053319_unique_index_assets.sql":         db20180408053319_unique_index_assetsSql,
	"db/20180408105045_add_creative_max_bid.sql":        db20180408105045_add_creative_max_bidSql,
	"db/20180417122713_fix.sql":                         db20180417122713_fixSql,
	"db/20180422112913_perm.sql":                        db20180422112913_permSql,
	"db/20180423124500_fixcreative.sql":                 db20180423124500_fixcreativeSql,
	"db/20180502070808_creatvie_detail.sql":             db20180502070808_creatvie_detailSql,
	"db/20180507044253_add_creative_reject_reasons.sql": db20180507044253_add_creative_reject_reasonsSql,
	"db/20180612105323_archive_creative_perm.sql":       db20180612105323_archive_creative_permSql,
	"db/creativestatus_perm.sql":                        dbCreativestatus_permSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"20180325071354_creatives.sql":                   &bintree{db20180325071354_creativesSql, map[string]*bintree{}},
		"20180407151329_add_creative_perm.sql":           &bintree{db20180407151329_add_creative_permSql, map[string]*bintree{}},
		"20180408053319_unique_index_assets.sql":         &bintree{db20180408053319_unique_index_assetsSql, map[string]*bintree{}},
		"20180408105045_add_creative_max_bid.sql":        &bintree{db20180408105045_add_creative_max_bidSql, map[string]*bintree{}},
		"20180417122713_fix.sql":                         &bintree{db20180417122713_fixSql, map[string]*bintree{}},
		"20180422112913_perm.sql":                        &bintree{db20180422112913_permSql, map[string]*bintree{}},
		"20180423124500_fixcreative.sql":                 &bintree{db20180423124500_fixcreativeSql, map[string]*bintree{}},
		"20180502070808_creatvie_detail.sql":             &bintree{db20180502070808_creatvie_detailSql, map[string]*bintree{}},
		"20180507044253_add_creative_reject_reasons.sql": &bintree{db20180507044253_add_creative_reject_reasonsSql, map[string]*bintree{}},
		"20180612105323_archive_creative_perm.sql":       &bintree{db20180612105323_archive_creative_permSql, map[string]*bintree{}},
		"creativestatus_perm.sql":                        &bintree{dbCreativestatus_permSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
